{"version":3,"sources":["webpack://advanced-custom-post-type-lite//home/mauretto78/PhpstormProjects/wp/src/wordpress/wp-content/plugins/advanced-custom-post-type-lite/assets/src/App/localization/locales|sync|/^\\.\\/.*\\.js$/","webpack://advanced-custom-post-type-lite/./assets/src/App/components/pages/TaxonomyList/CustomPostTypesMiniTable.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/pages/TaxonomyList/TaxonomyListElement.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/pages/TaxonomyList/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/reusable/CustomPostType/CustomPostTypeLabel.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/reusable/Layout/Breadcrumbs/Breadcrumb.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/reusable/Layout/Breadcrumbs/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/reusable/Meta/MetaBoxMiniTable/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/reusable/Pagination/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/localization/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/localization/locales/en.js","webpack://advanced-custom-post-type-lite/./assets/src/App/redux/thunks/fetchTaxonomies.js","webpack://advanced-custom-post-type-lite/./assets/src/App/redux/thunks/fetchTaxonomiesCount.js","webpack://advanced-custom-post-type-lite/./assets/src/App/utils/misc.js"],"names":["CustomPostTypesMiniTable","taxonomy","elements","map","element","name","singular","plural","postCount","TaxonomyListElement","id","handleDeleteTemplate","slug","isNative","meta","length","customPostTypes","TaxonomyList","dispatch","state","fetchTaxonomiesReducer","fetched","loading","fetchTaxonomiesCountReducer","fetchedCount","loadingCount","fetchSettingsReducer","settingsLoading","settings","page","didMountRef","fetchedSuccess","setFetchedSuccess","perPage","value","totalPages","Math","ceil","history","current","button","label","border","CustomPostTypeLabel","isWooCommerce","Breadcrumb","link","isLast","Breadcrumbs","crumbs","crumb","index","MetaBoxMiniTable","postType","manageLink","count","Pagination","currentPage","records","rows","i","push","row","translate","string","args","lang","global","language","json","require","translations","strings","split","translation","getTranslatedString","key","replace","object","s","fetchTaxonomies","getState","fetchTaxonomiesCount","metaTitle","title","originalDocumentTitle","document","changeCurrentAdminMenuLink","menuWrapper","querySelector","childNodes","forEach","currentValue","currentIndex","listObj","links","getElementsByTagName","elem","href","getAttribute","toCompare","classList","add","remove","refreshPage","timeout","setTimeout","window","location","reload"],"mappings":"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","file":"489.js","sourcesContent":["var map = {\n\t\"./en.js\": 3167\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 8053;","import React from 'react';\n\nconst CustomPostTypesMiniTable = ({taxonomy, elements}) => {\n\n    return (\n        <div className=\"acpt-table-responsive\">\n            <table className=\"acpt-minitable\">\n                <thead>\n                <tr>\n                    <th>CPT</th>\n                    <th>Sing. label</th>\n                    <th>Plural label</th>\n                    <th>Post count</th>\n                </tr>\n                </thead>\n                <tbody>\n                {elements.map((element)=>(\n                    <tr>\n                        <td>{element.name}</td>\n                        <td>{element.singular}</td>\n                        <td>{element.plural}</td>\n                        <td>\n                            <span className=\"acpt-badge\">\n                                <span className=\"label\">\n                                    {element.postCount ? element.postCount : 0 }\n                                </span>\n                            </span>\n                        </td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n            <div className=\"minitable-buttons\">\n                <a href={`#/assoc-post-taxonomy/${taxonomy}`} >\n                    Manage\n                </a>\n            </div>\n        </div>\n    );\n};\n\nexport default CustomPostTypesMiniTable;","import React, {useState} from 'react';\nimport {Link} from \"react-router-dom\";\nimport {isset} from \"../../../utils/objects\";\nimport Tippy from \"../../reusable/Tippy\";\nimport CustomPostTypeLabel from \"../../reusable/CustomPostType/CustomPostTypeLabel\";\nimport CustomPostTypesMiniTable from \"./CustomPostTypesMiniTable\";\nimport MetaBoxMiniTable from \"../../reusable/Meta/MetaBoxMiniTable\";\n\nconst TaxonomyListElement = ({id, element, handleDeleteTemplate}) => {\n\n    return(\n        <React.Fragment>\n            <tr>\n                <td className=\"backend\">\n                    <div className=\"m-0 mb-1\">\n                        <strong>{element.slug}</strong>\n                        {!element.isNative && (\n                            <div className=\"element-buttons\">\n                                <a href={`#/view_taxonomy/${element.slug}`}>\n                                    View\n                                </a>\n                                &nbsp;\n                                <a href={`#/edit_taxonomy/${element.slug}`}>\n                                    Edit\n                                </a>\n                                &nbsp;\n                                <a href={`#/delete_taxonomy/${element.slug}`}>\n                                    Delete\n                                </a>\n                            </div>\n                        )}\n                    </div>\n                </td>\n                <td>\n                    <CustomPostTypeLabel element={element} />\n                </td>\n                <td>\n                    {isset(element, \"meta\") &&  element.meta.length > 0 ?\n                        <Tippy\n                            placement='end'\n                            html={(\n                                <MetaBoxMiniTable taxonomy={element.slug} elements={element.meta}/>\n                            )}\n                        >\n                            <Link\n                                to={`meta-taxonomy/${element.slug}`}\n                                className=\"acpt-btn no-border acpt-btn-sm acpt-btn-info-o\"\n                            >\n                                Manage\n                            </Link>\n                        </Tippy>\n                        :\n                        <Link\n                            to={`/meta-taxonomy/${element.slug}`}\n                            className=\"acpt-btn no-border acpt-btn-sm acpt-btn-primary-o\"\n                        >\n                            Create\n                        </Link>\n                    }\n                </td>\n                <td>\n                    {isset(element, \"customPostTypes\") &&  element.customPostTypes.length > 0 ?\n                        <Tippy\n                            placement='top'\n                            html={(\n                                <CustomPostTypesMiniTable taxonomy={element.slug} elements={element.customPostTypes}/>\n                            )}\n                        >\n                            <Link\n                                to={`/assoc-post-taxonomy/${element.slug}`}\n                                className=\"acpt-btn no-border acpt-btn-sm acpt-btn-info-o\"\n                            >\n                                Manage\n                            </Link>\n                        </Tippy>\n                        :\n                        <Link\n                            to={`/assoc-post-taxonomy/${element.slug}`}\n                            className=\"acpt-btn no-border acpt-btn-sm acpt-btn-primary-o\"\n                        >\n                            Associate\n                        </Link>\n                    }\n                </td>\n                <td className=\"with-border\">\n                    <span className=\"acpt-badge\">\n                        <span className=\"label\">\n                            {element.postCount}\n                        </span>\n                    </span>\n                </td>\n                <td className=\"frontend\">\n                    <a\n                        className=\"acpt-btn no-border acpt-btn-sm acpt-btn-primary-o text-danger\"\n                        href=\"https://acpt.io/checkout\"\n                        target=\"_blank\"\n                    >\n                        Buy a PRO license\n                    </a>\n                </td>\n            </tr>\n        </React.Fragment>\n    )\n};\n\nexport default TaxonomyListElement;","import React, {useEffect, useRef, useState} from 'react';\nimport {changeCurrentAdminMenuLink, metaTitle, refreshPage} from \"../../../utils/misc\";\nimport Breadcrumbs from \"../../reusable/Layout/Breadcrumbs\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Link, useHistory, useParams} from \"react-router-dom\";\nimport Spinner from \"../../reusable/Loader/Spinner\";\nimport {fetchTaxonomiesCount} from \"../../../redux/thunks/fetchTaxonomiesCount\";\nimport {fetchTaxonomies} from \"../../../redux/thunks/fetchTaxonomies\";\nimport Pagination from \"../../reusable/Pagination\";\nimport TaxonomyListElement from \"./TaxonomyListElement\";\nimport {Icon} from \"@iconify/react\";\nimport Tippy from \"../../reusable/Tippy\";\nimport {translate} from \"../../../localization\";\nimport {filterByLabel} from \"../../../utils/objects\";\nimport Layout from \"../../reusable/Layout\";\nimport ActionsBar from \"../../reusable/Layout/ActionsBar\";\nimport {metaTypes} from \"../../../constants/metaTypes\";\nimport {toast} from \"react-toastify\";\n\nconst TaxonomyList = () => {\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {fetched, loading} = useSelector(state => state.fetchTaxonomiesReducer);\n    const {fetched: fetchedCount, loading:loadingCount} = useSelector(state => state.fetchTaxonomiesCountReducer);\n    const {loading: settingsLoading, fetched: settings} = useSelector(state => state.fetchSettingsReducer);\n\n    // manage local state\n    const {page} = useParams();\n    const didMountRef = useRef(false);\n    const [fetchedSuccess, setFetchedSuccess] = useState(null);\n    const perPage = (settings.length > 0 && filterByLabel(settings, 'key', 'records_per_page') !== '') ? filterByLabel(settings, 'key', 'records_per_page').value : 20;\n    const totalPages = Math.ceil( fetchedCount / perPage );\n    const history = useHistory();\n\n    useEffect(() => {\n        metaTitle(translate(\"taxonomy_list.title\"));\n        changeCurrentAdminMenuLink('#/taxonomies');\n        dispatch(fetchTaxonomiesCount());\n        dispatch(fetchTaxonomies({\n            page: page ? page : 1,\n            perPage: perPage\n        }));\n    }, [page]);\n\n    // handle fetch outcome\n    useEffect(() => {\n        if (didMountRef.current){\n            if(!loading && !settingsLoading){\n                setFetchedSuccess(true);\n            }\n        } else {\n            didMountRef.current = true;\n        }\n    }, [loading]);\n\n    if(!fetchedSuccess){\n        return <Spinner/>;\n    }\n\n    const button =\n        <Link\n            className=\"acpt-btn acpt-btn-primary\"\n            to=\"/register_taxonomy\"\n        >\n            Register new Taxonomy\n        </Link>;\n\n    return (\n        <Layout>\n            <ActionsBar\n                title=\"Registered Taxonomies\"\n                actions={button}\n            />\n            <main>\n                <Breadcrumbs crumbs={[\n                    {\n                        label: \"Registered Taxonomies\"\n                    }\n                ]} />\n                {fetched.length > 0 ?\n                    <div className=\"acpt-card\">\n                        <div className=\"acpt-card__header\">\n                            <div className=\"acpt-card__inner\">\n                                {fetchedCount} record(s) found\n                            </div>\n                        </div>\n                        <div className=\"acpt-card__body\">\n                            <div className=\"acpt-table-responsive\">\n                                <table className=\"acpt-table\">\n                                    <thead>\n                                    <tr>\n                                        <th className=\"grey backend with-border\" colSpan={5}>Backend UI</th>\n                                        <th className=\"grey frontend\" colSpan={1}>Frontend UI</th>\n                                    </tr>\n                                    <tr>\n                                        <th>\n                                            Slug\n                                            &nbsp;\n                                            <Tippy title=\"Taxonomy slug. The post name/slug. Used for various queries for taxonomy content.\">\n                                                <span className=\"helper\">\n                                                    <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n                                                </span>\n                                            </Tippy>\n                                        </th>\n                                        <th>Type</th>\n                                        <th>\n                                            Meta boxes\n                                            &nbsp;\n                                            <Tippy title=\"Associated meta boxes\">\n                                                <span className=\"helper\">\n                                                    <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n                                                </span>\n                                            </Tippy>\n                                        </th>\n                                        <th>\n                                            Associated post types\n                                            &nbsp;\n                                            <Tippy title=\"Associate custom post types here\">\n                                                <span className=\"helper\">\n                                                    <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n                                                </span>\n                                            </Tippy>\n                                        </th>\n                                        <th className=\"with-border\">\n                                            Post count\n                                            &nbsp;\n                                            <Tippy title=\"Published posts count associated with the taxonomy\">\n                                                <span className=\"helper\">\n                                                    <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n                                                </span>\n                                            </Tippy>\n                                        </th>\n                                        <th className=\"text-center\">\n                                            Single template\n                                            &nbsp;\n                                            <Tippy title=\"The single template for taxonomy term\">\n                                                <span className=\"helper\">\n                                                    <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n                                                </span>\n                                            </Tippy>\n                                        </th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    {fetched.map((element) => <TaxonomyListElement id={element.id} key={element.id} element={element} />)}\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                        {totalPages > 1 && (\n                            <div className=\"acpt-card__footer\" style={{border: \"none\"}}>\n                                <div className=\"acpt-card__inner\">\n                                    <Pagination currentPage={page ? page : 1} perPage={perPage} records={fetchedCount}/>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                    :\n                    <div className=\"acpt-alert acpt-alert-secondary\">\n                        No taxonomies found. <Link to=\"/register_taxonomy\">Register the first one</Link>!\n                    </div>\n                }\n            </main>\n        </Layout>\n    );\n};\n\nexport default TaxonomyList;\n\n\n\n// import React, {useEffect, useRef, useState} from 'react';\n// import {changeCurrentAdminMenuLink, metaTitle} from \"../../../utils/misc\";\n// import Breadcrumbs from \"../../reusable/Breadcrumbs\";\n// import {useDispatch, useSelector} from \"react-redux\";\n// import {Link, useParams} from \"react-router-dom\";\n// import Spinner from \"../../reusable/Loader/Spinner\";\n// import {fetchTaxonomiesCount} from \"../../../redux/thunks/fetchTaxonomiesCount\";\n// import {fetchTaxonomies} from \"../../../redux/thunks/fetchTaxonomies\";\n// import Pagination from \"../../reusable/Pagination\";\n// import TaxonomyListElement from \"./TaxonomyListElement\";\n// import {Icon} from \"@iconify/react\";\n// import Tippy from \"../../reusable/Tippy\";\n// import {translate} from \"../../../localization\";\n// import Copyright from \"../../reusable/Copyright\";\n// import {filterByLabel} from \"../../../utils/objects\";\n//\n// const TaxonomyList = () => {\n//\n//     // manage global state\n//     const dispatch = useDispatch();\n//     const {fetched, loading} = useSelector(state => state.fetchTaxonomiesReducer);\n//     const {fetched: fetchedCount, loading:loadingCount} = useSelector(state => state.fetchTaxonomiesCountReducer);\n//     const {loading: settingsLoading, fetched: settings} = useSelector(state => state.fetchSettingsReducer);\n//\n//     // manage local state\n//     const {page} = useParams();\n//     const didMountRef = useRef(false);\n//     const [fetchedSuccess, setFetchedSuccess] = useState(null);\n//     const perPage = (settings.length > 0 && filterByLabel(settings, 'key', 'records_per_page') !== '') ? filterByLabel(settings, 'key', 'records_per_page').value : 20;\n//\n//     useEffect(() => {\n//         metaTitle(translate(\"taxonomy_list.title\"));\n//         changeCurrentAdminMenuLink('#/taxonomies');\n//         dispatch(fetchTaxonomiesCount());\n//         dispatch(fetchTaxonomies({\n//             page: page ? page : 1,\n//             perPage: perPage\n//         }));\n//     }, [page]);\n//\n//     // handle fetch outcome\n//     useEffect(() => {\n//         if (didMountRef.current){\n//             if(!loading && !settingsLoading){\n//                 setFetchedSuccess(true);\n//             }\n//         } else {\n//             didMountRef.current = true;\n//         }\n//     }, [loading]);\n//\n//     if(!fetchedSuccess){\n//         return <Spinner/>;\n//     }\n//\n//     return (\n//         <div>\n//             <Breadcrumbs crumbs={[\n//                 {\n//                     label: \"Registered Custom Post Types\",\n//                     link: \"/\"\n//                 },\n//                 {\n//                     label: \"Registered Taxonomies\"\n//                 }\n//             ]} />\n//             <h1 className=\"acpt-title\">\n//                 <Icon icon=\"bx:bx-purchase-tag\" color=\"#02c39a\" width=\"18px\" />\n//                 &nbsp;\n//                 Registered Taxonomies\n//             </h1>\n//             <div className=\"acpt-buttons\">\n//                 <Link\n//                     className=\"acpt-btn acpt-btn-primary-o\"\n//                     to=\"/register_taxonomy\">\n//                     <Icon icon=\"bx:bx-list-plus\" width=\"18px\" />\n//                     &nbsp;\n//                     Register new Taxonomy\n//                 </Link>\n//             </div>\n//             {fetched.length > 0 ?\n//                 <div className=\"acpt-card\">\n//                     <div className=\"acpt-card__header\">\n//                         <div className=\"acpt-card__inner\">\n//                             {fetchedCount} record(s) found\n//                         </div>\n//                     </div>\n//                     <div className=\"acpt-card__body\">\n//                         <div className=\"acpt-table-responsive\">\n//                             <table className=\"acpt-table\">\n//                                 <thead>\n//                                     <tr>\n//                                         <th className=\"grey backend with-border\" colSpan={5}>Registered taxonomies</th>\n//                                         <th className=\"grey frontend\" colSpan={1}>Associated</th>\n//                                     </tr>\n//                                     <tr>\n//                                         <th>\n//                                             Slug\n//                                             &nbsp;\n//                                             <Tippy title=\"Taxonomy slug. The post name/slug. Used for various queries for taxonomy content.\">\n//                                                 <span className=\"helper\">\n//                                                     <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n//                                                 </span>\n//                                             </Tippy>\n//                                         </th>\n//                                         <th/>\n//                                         <th>\n//                                             Singular\n//                                             &nbsp;\n//                                             <Tippy title=\"Singular label. Used when a singular label is needed\">\n//                                                 <span className=\"helper\">\n//                                                     <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n//                                                 </span>\n//                                             </Tippy>\n//                                         </th>\n//                                         <th>\n//                                             Plural\n//                                             &nbsp;\n//                                             <Tippy title=\"Plural label. Used for the taxonomy admin menu item\">\n//                                                 <span className=\"helper\">\n//                                                     <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n//                                                 </span>\n//                                             </Tippy>\n//                                         </th>\n//                                         <th className=\"with-border\">\n//                                             Post count\n//                                             &nbsp;\n//                                             <Tippy title=\"Published posts count associated with the taxonomy\">\n//                                                 <span className=\"helper\">\n//                                                     <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n//                                                 </span>\n//                                             </Tippy>\n//                                         </th>\n//                                         <th>\n//                                             Custom post types\n//                                             &nbsp;\n//                                             <Tippy title=\"Associate custom post types here\">\n//                                                 <span className=\"helper\">\n//                                                     <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n//                                                 </span>\n//                                             </Tippy>\n//                                         </th>\n//                                     </tr>\n//                                 </thead>\n//                                 <tbody>\n//                                 {fetched.map((element) => <TaxonomyListElement id={element.id} key={element.id} element={element} />)}\n//                                 </tbody>\n//                             </table>\n//                         </div>\n//                     </div>\n//                     <div className=\"acpt-card__footer\" style={{border: \"none\"}}>\n//                         <div className=\"acpt-card__inner\">\n//                             <Pagination currentPage={page ? page : 1} perPage={perPage} records={fetchedCount}/>\n//                         </div>\n//                     </div>\n//                 </div>\n//                 :\n//                 <div className=\"acpt-alert acpt-alert-secondary\">\n//                     No taxonomies found. <Link to=\"/register_taxonomy\">Register the first one</Link>!\n//                 </div>\n//             }\n//             <Copyright/>\n//         </div>\n//     );\n// };\n//\n// export default TaxonomyList;","import React from 'react';\n\nconst CustomPostTypeLabel = ({element}) => {\n\n    // Note: can be used also for Taxonomy\n\n    return (\n        <React.Fragment>\n            {element.isNative\n                ?\n                <span className={`acpt-badge acpt-badge-native`}>\n                    <span className=\"label\">\n                        Native\n                    </span>\n                </span>\n                :\n                <span className={`acpt-badge acpt-badge-${element.isWooCommerce === true ? 'woocommerce' : 'custom' }`}>\n                    <span className=\"label\">\n                        {element.isWooCommerce === true ? 'WooCommerce' : 'Custom' }\n                    </span>\n                </span>\n            }\n        </React.Fragment>\n    );\n};\n\nexport default CustomPostTypeLabel;","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport {Icon} from \"@iconify/react\";\n\nconst Breadcrumb = ({label, link, isLast}) => {\n\n    return (\n        <React.Fragment>\n            <li className={isLast ? 'current' : ''}>\n                {link ?\n                    <Link to={link}>\n                        {label}\n                    </Link>\n                    :\n                    label\n                }\n            </li>\n            {!isLast && (\n                <span className=\"separator\">\n                    <Icon icon=\"bx:bx-chevron-right\" color=\"#aaa\" width=\"18px\" />\n                </span>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default Breadcrumb;","import React from 'react';\nimport Breadcrumb from \"./Breadcrumb\";\n\nconst Breadcrumbs = ({crumbs}) => {\n    return (\n        <div className=\"acpt-breadcrumbs\">\n            {crumbs.length > 0 && (\n                <ul>\n                    {crumbs.map((crumb, index) => (\n                        <Breadcrumb\n                            label={crumb.label}\n                            link={crumb.link}\n                            isLast={(index+1) === crumbs.length}\n                            key={index}\n                        />\n                    ))}\n                </ul>\n            )}\n        </div>\n    );\n};\n\nexport default Breadcrumbs;","import React from 'react';\n\nconst MetaBoxMiniTable = ({postType, taxonomy, elements}) => {\n\n    const manageLink = (postType) ? `#/meta/${postType}` : `#/meta-taxonomy/${taxonomy}`;\n\n    return (\n        <div className=\"acpt-table-responsive\">\n            <table className=\"acpt-minitable\">\n                <thead>\n                <tr>\n                    <th>Meta box</th>\n                    <th>Fields count</th>\n                </tr>\n                </thead>\n                <tbody>\n                {elements.map((element)=>(\n                    <tr>\n                        <td>{element.name}</td>\n                        <td>\n                            <span className=\"acpt-badge\">\n                                <span className=\"label\">\n                                    {element.count}\n                                </span>\n                            </span>\n                        </td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n            <div className=\"minitable-buttons\">\n                <a href={manageLink} >\n                    Manage\n                </a>\n            </div>\n        </div>\n    );\n};\n\nexport default MetaBoxMiniTable;","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nconst Pagination = ({currentPage, perPage, records}) => {\n\n    const totalPages = Math.ceil( records / perPage );\n    const rows = [];\n    for (let i = 1; i <= totalPages; i++) {\n        rows.push(i);\n    }\n\n    if(rows.length < 2){\n        return <React.Fragment/>;\n    }\n\n    return (\n        <ul className=\"acpt-pagination\">\n            {rows.map((row) => (\n                <li>\n                    {row == currentPage\n                        ?\n                        <span>\n                            {row}\n                        </span>\n                        :\n                        <Link to={`/${row}`}>\n                            {row}\n                        </Link>\n                    }\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default Pagination;","\n/**\n * Translate a string from locale files\n *\n * @param string\n * @return {*}\n */\nexport const translate = (string, args) => {\n    const lang = (global.settings && global.settings.language) ? global.settings.language : 'en';\n    const json = require('./locales/'+lang+'.js').translations;\n    const strings = string.split(\".\");\n    let translation = getTranslatedString(json, strings);\n\n    if(args !== null && typeof args !== 'undefined'){\n        for (const key in args) {\n            translation = translation.replace(\"{{\"+key+\"}}\", args[key]);\n        }\n    }\n\n    return (typeof translation !== 'undefined') ? translation : string;\n};\n\nconst getTranslatedString = (json, strings) => {\n\n    let object = json;\n\n    strings.map((s)=>{\n        object = object[s];\n    });\n\n    return object;\n};","export const translations = {\n    \"404\": {\n        \"title\": \"Page not found\",\n    },\n    \"create\": {\n        \"title\": \"Register a new Custom Post Type\",\n    },\n    \"edit\": {\n        \"title\": \"Edit a new Custom Post Type\",\n    },\n    \"list\": {\n        \"title\": \"Registered Custom Post Types\",\n    },\n    \"view\": {\n        \"title\": \"Custom Post Type global settings\",\n    },\n    \"taxonomy_list\": {\n        \"title\": \"Registered Taxonomies\"\n    },\n    \"taxonomy_create\": {\n        \"title\": \"Register a new Taxonomy\",\n    },\n    \"taxonomy_edit\": {\n        \"title\": \"Edit a Taxonomy\",\n    },\n    \"taxonomy_view\": {\n        \"title\": \"Taxonomy settings\",\n    },\n    \"general\": {\n        \"labels\": {\n            \"all_items\": \"All {{r}}\",\n            \"add\": \"Add\",\n            \"add_new_item\": \"Add new {{r}}\",\n            \"back_to_items\": \"Back to {{r}}\",\n            \"edit\": \"Edit\",\n            \"new\": \"New\",\n            \"not_found\": \"No {{r}} found\",\n            \"search\": \"Search\",\n            \"view\": \"View\",\n            \"parent_item_colon\":\"Parent item\",\n            \"featured_image\":\"Featured image\",\n            \"set_featured_image\":\"Set featured image\",\n            \"remove_featured_image\":\"Remove featured image\",\n            \"use_featured_image\":\"Use featured image\",\n            \"most_used\": \"Most used {{r}}\",\n            \"archives\":\"Archives\",\n            \"insert_into_item\":\"Insert\",\n            \"uploaded_to_this_item\":\"Upload\",\n            \"filter_items_list\":\"Filter {{r}} list\",\n            \"items_list_navigation\":\"Navigation list {{r}}\",\n            \"items_list\":\"List {{r}}\",\n            \"filter_by_date\":\"Filter by date\",\n            \"item_published\":\"{{r}} published\",\n            \"item_published_privately\":\"{{r}} published privately\",\n            \"item_reverted_to_draft\":\"{{r}} reverted to draft\",\n            \"item_scheduled\":\"{{r}} scheduled\",\n            \"item_updated\":\"{{r}} updated\",\n            \"popular_items\": \"Popular {{r}}\",\n            \"update_item\": \"Update {{r}}\",\n            \"no_terms\": \"No {{r}}\",\n            \"parent_item\": \"Parent {{r}}\",\n            \"new_item_name\": \"New {{r}}\",\n            \"filter_by_item\": \"Filter by {{r}}\",\n            \"separate_items_with_commas\": \"Separate {{r}} with commas\",\n            \"add_or_remove_items\": \"Add or remove {{r}}\",\n            \"choose_from_most_used\": \"Choose from most used {{r}}\",\n            \"search_items\": \"Search {{r}}\",\n        }\n    }\n};","import {wpAjaxRequest} from \"../../utils/ajax\";\nimport {fetchTaxonomiesFailure, fetchTaxonomiesInProgress, fetchTaxonomiesSuccess} from \"../actions/fetchTaxonomiesActions\";\n\nexport const fetchTaxonomies = (meta) => async (dispatch, getState) => {\n    try {\n        dispatch(fetchTaxonomiesInProgress(meta));\n        const fetched = await wpAjaxRequest('fetchTaxonomiesAction', meta ? meta : {} );\n        dispatch(fetchTaxonomiesSuccess(fetched));\n    } catch ( e ) {\n        dispatch(fetchTaxonomiesFailure(e));\n    }\n};\n","import {wpAjaxRequest} from \"../../utils/ajax\";\nimport {fetchTaxonomiesCountFailure, fetchTaxonomiesCountInProgress, fetchTaxonomiesCountSuccess} from \"../actions/fetchTaxonomiesCountActions\";\n\nexport const fetchTaxonomiesCount = () => async (dispatch, getState) => {\n    try {\n        dispatch(fetchTaxonomiesCountInProgress());\n        const fetched = await wpAjaxRequest('fetchTaxonomiesCountAction' );\n        dispatch(fetchTaxonomiesCountSuccess(fetched));\n    } catch ( e ) {\n        dispatch(fetchTaxonomiesCountFailure(e));\n    }\n};","/**\n * Change document's <title>\n * @param title\n */\nexport const metaTitle = (title) => {\n    const originalDocumentTitle = document.title.split(\"‹\");\n    document.title = `${title} ‹ ${originalDocumentTitle[1]}`;\n};\n\n/**\n * Add current class to admin menu link\n * @param link\n */\nexport const changeCurrentAdminMenuLink = (link) => {\n\n    const menuWrapper = document.querySelector('#toplevel_page_advanced-custom-post-type-lite .wp-submenu');\n\n    menuWrapper.childNodes.forEach((currentValue, currentIndex, listObj) => {\n        const links = currentValue.getElementsByTagName('a');\n\n        for(let i = 0; i < links.length; i++) {\n            let elem = links[i];\n            let href = elem.getAttribute(\"href\");\n            let toCompare = 'admin.php?page=advanced-custom-post-type-lite'+link;\n\n            if( toCompare === href ){\n                currentValue.classList.add(\"current\");\n            } else {\n                currentValue.classList.remove(\"current\");\n            }\n        }\n    });\n};\n\nexport const refreshPage = (timeout = 0) => {\n    setTimeout(function () {\n        window.location.reload();\n    }, timeout);\n};"],"sourceRoot":""}