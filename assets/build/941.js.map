{"version":3,"sources":["webpack://advanced-custom-post-type-lite/./assets/src/App/pages/TaxonomyList/BulkActions/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/TaxonomyList/Modal/DeleteTaxonomyModal.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/TaxonomyList/TaxonomyListElement.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/TaxonomyList/index.js"],"names":["BulkActions","control","register","watchedElements","name","count","Object","entries","key","value","styleVariants","WHITE","DeleteTaxonomyModal","taxonomy","dispatch","navigate","modalOpen","setModalOpen","handleDeleteTaxonomy","then","payload","res","success","toast","error","catch","err","buttons","DANGER","SECONDARY","e","preventDefault","propTypes","PropTypes","string","isRequired","TaxonomyListElement","record","formId","slug","width","isNative","customPostTypes","length","metaTypes","TAXONOMY","object","TaxonomyList","globals","document","settings","parent","ref","methods","mode","state","fetchTaxonomies","data","loading","page","perPage","totalPages","Math","ceil","areAllSelected","matches","current","checked","showBulkActions","onSubmit","reset","belongsTo","action","resetField","console","actions","PRIMARY","handleSubmit","label","records","is_rtl","filter","r","map","setValue","currentTarget","id","parseInt"],"mappings":"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","file":"941.js","sourcesContent":["import React from 'react';\nimport {useFormContext, useWatch} from \"react-hook-form\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Button from \"../../../components/Button\";\nimport {styleVariants} from \"../../../constants/styles\";\n\nconst BulkActions = () => {\n\n    // manage form state\n    const { control, register } = useFormContext();\n    const watchedElements = useWatch({\n        control,\n        name: \"elements\"\n    });\n\n    /**\n     *\n     * @return {number}\n     */\n    const count = () => {\n\n        let count = 0;\n\n        for (const [key, value] of Object.entries(watchedElements)) {\n            if(value === true){\n                count++;\n            }\n        }\n\n        return count;\n    };\n\n    return (\n        <div\n            className=\"flex-between s-8 mb-24\"\n            data-cy=\"bulk-actions\"\n        >\n            <span>\n                {count()} {useTranslation(\"Selected items\")}\n            </span>\n            <div className=\"i-flex-center s-8\">\n                <select\n                    name=\"action\"\n                    data-cy=\"taxonomy-bulk-actions\"\n                    className=\"form-control sm\"\n                    {...register(\"action\")}\n                >\n                    <option value=\"\">{useTranslation(\"Select\")}</option>\n                    <option value=\"delete\">{useTranslation(\"Delete\")}</option>\n                </select>\n                <Button\n                    testId=\"taxonomy-bulk-actions\"\n                    style={styleVariants.WHITE}\n                    size=\"sm\"\n                >\n                    {useTranslation(\"Execute\")}\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default BulkActions;","import React, {useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport Modal from \"../../../components/Modal\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Button from \"../../../components/Button\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport {useDispatch} from \"react-redux\";\nimport {useNavigate} from \"react-router-dom\";\nimport {deleteTaxonomy} from \"../../../redux/reducers/deleteTaxonomySlice\";\nimport {toast} from \"react-hot-toast\";\nimport {refreshPage} from \"../../../utils/misc\";\n\nconst DeleteTaxonomyModal = ({taxonomy}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n\n    // manage redirect\n    const navigate = useNavigate();\n\n    // mange local state\n    const [modalOpen, setModalOpen] = useState(false);\n    \n    const handleDeleteTaxonomy = () => {\n        dispatch(deleteTaxonomy(taxonomy))\n            .then(res => {\n                const payload = res.payload;\n\n                if(payload.success){\n                    navigate('/taxonomies');\n                    setModalOpen(!modalOpen);\n                    toast.success(useTranslation(\"Taxonomy successfully deleted. The browser will refresh after 5 seconds.\"));\n                    refreshPage(5000);\n                } else {\n                    toast.error(payload.error);\n                }\n            })\n            .catch(err => {\n                toast.error(err);\n            })\n        ;\n    };\n\n    const buttons = [\n        <Button\n            style={styleVariants.DANGER}\n            onClick={() => {\n                handleDeleteTaxonomy();\n            }}\n        >\n            {useTranslation(\"Yes, delete it\")}\n        </Button>,\n        <Button\n            style={styleVariants.SECONDARY}\n            onClick={() => {\n                setModalOpen(!modalOpen);\n            }}\n        >\n            {useTranslation(\"Return back to list\")}\n        </Button>,\n    ];\n\n    return (\n        <React.Fragment>\n            <Modal title={useTranslation('Delete Taxonomy')} buttons={buttons} visible={modalOpen}>\n                <div>\n                    {useTranslation(\"You are going to delete this taxonomy. Are you sure?\")}\n                </div>\n            </Modal>\n            <a\n                href=\"#\"\n                onClick={e => {\n                    e.preventDefault();\n                    setModalOpen(!modalOpen);\n                }}\n            >\n                {useTranslation(\"Delete\")}\n            </a>\n        </React.Fragment>\n        \n    );\n};\n\nDeleteTaxonomyModal.propTypes = {\n    taxonomy: PropTypes.string.isRequired,\n};\n\nexport default DeleteTaxonomyModal;","import React, {memo} from 'react';\nimport PropTypes from 'prop-types';\nimport ExportCodeModal from \"../../components/Modal/ExportCodeModal\";\nimport {metaTypes} from \"../../constants/metaTypes\";\nimport useTranslation from \"../../hooks/useTranslation\";\nimport ElementTypeBadge from \"../../components/ElementTypeBadge\";\nimport {isset} from \"../../utils/objects\";\nimport {Link} from \"react-router-dom\";\nimport DeleteTaxonomyModal from \"./Modal/DeleteTaxonomyModal\";\nimport {useFormContext} from \"react-hook-form\";\nimport FieldGroupsModal from \"../../components/Modal/FieldGroupsModal\";\n\nconst TaxonomyListElement = memo(({record}) => {\n\n    // manage form state\n    const { register } = useFormContext();\n    const formId = `elements.${record.slug}`;\n\n    return (\n        <React.Fragment>\n            <tr>\n                <td style={{\n                    width: \"24px\"\n                }}>\n                    {!record.isNative && (\n                        <label\n                            className=\"checkbox\"\n                            htmlFor={formId}\n                            data-cy={`select-${record.slug}`}\n                        >\n                            <input\n                                type=\"checkbox\"\n                                id={formId}\n                                name={formId}\n                                defaultChecked={false}\n                                {...register(formId)}\n                            />\n                            <span/>\n                        </label>\n                    )}\n                </td>\n                <td>\n                    {record.slug}\n                </td>\n                <td>\n                    <ElementTypeBadge element={record}/>\n                </td>\n                <td>\n                    {isset(record, \"customPostTypes\") &&  record.customPostTypes.length > 0 ?\n                        <Link to={`/assoc-post-taxonomy/${record.slug}`}>\n                            {useTranslation(\"Manage\")}\n                        </Link>\n                        :\n                        <Link to={`/assoc-post-taxonomy/${record.slug}`}>\n                            {useTranslation(\"Associate\")}\n                        </Link>\n                    }\n                </td>\n                <td>\n                    <div className=\"i-flex-center s-8\">\n                        <Link to={`/register_meta?belongsTo=${metaTypes.TAXONOMY}&find=${record.slug}`}>\n                            {useTranslation(\"Create\")}\n                        </Link>\n                        <FieldGroupsModal\n                            find={record.slug}\n                            belongsTo={metaTypes.TAXONOMY}\n                        />\n                    </div>\n                </td>\n                <td>\n                    {!record.isNative && (\n                        <div className=\"i-flex-center s-8\">\n                            <a href={`#/view_taxonomy/${record.slug}`}>\n                                {useTranslation(\"View\")}\n                            </a>\n                            <a href={`#/edit_taxonomy/${record.slug}`}>\n                                {useTranslation(\"Edit\")}\n                            </a>\n                            <DeleteTaxonomyModal taxonomy={record.slug} />\n                            <ExportCodeModal\n                                belongsTo={metaTypes.TAXONOMY}\n                                find={record.slug}\n                            />\n                        </div>\n                    )}\n                </td>\n            </tr>\n        </React.Fragment>\n    );\n});\n\nTaxonomyListElement.propTypes = {\n    record: PropTypes.object.isRequired\n};\n\nexport default TaxonomyListElement;","import React, {useEffect, useRef} from 'react';\nimport Layout from \"../../layout/Layout\";\nimport useTranslation from \"../../hooks/useTranslation\";\nimport {changeCurrentAdminMenuLink, metaTitle, refreshPage} from \"../../utils/misc\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Link, useParams} from \"react-router-dom\";\nimport {filterByLabel} from \"../../utils/objects\";\nimport {fetchTaxonomies} from \"../../redux/reducers/fetchTaxonomiesSlice\";\nimport Loader from \"../../components/Loader\";\nimport ButtonLink from \"../../components/ButtonLink\";\nimport {styleVariants} from \"../../constants/styles\";\nimport Alert from \"../../components/Alert\";\nimport Tooltip from \"../../components/Tooltip\";\nimport Pagination from \"../../components/Pagination\";\nimport TaxonomyListElement from \"./TaxonomyListElement\";\nimport {FormProvider, useForm, useWatch} from \"react-hook-form\";\nimport {wpAjaxRequest} from \"../../utils/ajax\";\nimport {toast} from \"react-hot-toast\";\nimport BulkActions from \"./BulkActions\";\nimport {metaTypes} from \"../../constants/metaTypes\";\nimport {useAutoAnimate} from \"@formkit/auto-animate/react\";\nimport {scrollToTop} from \"../../utils/scroll\";\n\nconst TaxonomyList = () => {\n\n    const globals = document.globals;\n    const settings = globals.settings;\n\n    // auto-animate\n    const [parent] = useAutoAnimate();\n\n    // ref\n    const ref = useRef();\n\n    // form init\n    const methods = useForm({\n        mode: 'all'\n    });\n\n    const watchedElements = useWatch({\n        control: methods.control,\n        name: \"elements\"\n    });\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {data, loading} = useSelector(state => state.fetchTaxonomies);\n\n    // manage local state\n    const {page} = useParams();\n    const perPage = (settings.length > 0 && filterByLabel(settings, 'key', 'records_per_page') !== '') ? filterByLabel(settings, 'key', 'records_per_page').value : 20;\n    const totalPages = Math.ceil( data.count / perPage );\n\n    useEffect(() => {\n        metaTitle(useTranslation(\"Registered Taxonomies\"));\n        changeCurrentAdminMenuLink('#/taxonomies');\n        dispatch(fetchTaxonomies({\n            page: page ? page : 1,\n            perPage: perPage\n        }));\n    }, [page]);\n\n    useEffect(() => {\n\n        /**\n         *\n         * @return {boolean}\n         */\n        const areAllSelected = () => {\n\n            if(!watchedElements){\n                return false;\n            }\n\n            let matches = 0;\n            for (const [key, value] of Object.entries(watchedElements)) {\n                if(value === true){\n                    matches++;\n                }\n            }\n\n            return matches === Object.entries(watchedElements).length;\n        };\n\n        if(areAllSelected()){\n            ref.current.checked = true;\n        } else {\n            if(ref.current){\n                ref.current.checked = false;\n            }\n        }\n\n    }, [watchedElements]);\n\n    /**\n     *\n     * @return {boolean}\n     */\n    const showBulkActions = () => {\n\n        if(!watchedElements){\n            return false;\n        }\n\n        for (const [key, value] of Object.entries(watchedElements)) {\n            if(value === true){\n                return true;\n            }\n        }\n\n        return false;\n    };\n\n    const onSubmit = (data) => {\n        methods.reset();\n        data.belongsTo = metaTypes.TAXONOMY;\n        wpAjaxRequest('bulkActionsAction', data)\n            .then(res => {\n                if(res.success === true){\n\n                    // flush message\n                    switch (data.action) {\n                        case \"delete\":\n                            toast.success(useTranslation(\"Taxonomy successfully deleted. The browser will refresh after 5 seconds.\"));\n                            methods.resetField(\"elements\");\n                            scrollToTop();\n\n                            // refresh items\n                            dispatch(fetchTaxonomies({\n                                page: page ? page : 1,\n                                perPage: perPage\n                            }));\n\n                            refreshPage(5000);\n                            break;\n                    }\n                } else {\n                    toast.error(res.error);\n                }\n            })\n            .catch(err => {\n                console.error(err);\n                toast.error(useTranslation(\"Unknown error, please retry later\"));\n            })\n        ;\n    };\n\n    const actions = [\n        <ButtonLink style={styleVariants.PRIMARY} to=\"/register_taxonomy\">{useTranslation(\"Register new Taxonomy\")}</ButtonLink>,\n    ];\n\n    if(loading){\n        return (\n            <Loader/>\n        );\n    }\n\n    return (\n        <FormProvider {...methods}>\n            <form onSubmit={methods.handleSubmit(onSubmit)}>\n                <Layout\n                    title={useTranslation(\"Registered Taxonomies\")}\n                    actions={actions}\n                    crumbs={[\n                        {\n                            label: useTranslation(\"Registered Taxonomies\")\n                        }\n                    ]}\n                >\n                    <div ref={parent}>\n                        {showBulkActions() && (\n                            <BulkActions />\n                        )}\n                    </div>\n                    {data.records && data.records.length > 0 ? (\n                        <div className=\"responsive\">\n                            <table\n                                data-cy=\"cpt-table\"\n                                className={`acpt-table with-shadow ${globals.is_rtl ? 'rtl' : ''}`}\n                            >\n                                <thead>\n                                <tr>\n                                    <th style={{\n                                        width: \"24px\"\n                                    }}>\n                                        <label\n                                            data-cy=\"select-all\"\n                                            className=\"checkbox\"\n                                            htmlFor=\"all\"\n                                        >\n                                            <input\n                                                ref={ref}\n                                                type=\"checkbox\"\n                                                id=\"all\"\n                                                defaultChecked={false}\n                                                onClick={e => {\n                                                    data.records.filter(r => r.isNative === false).map((r) => {\n                                                        methods.setValue(`elements.${r.slug}`, e.currentTarget.checked);\n                                                    });\n                                                }}\n                                            />\n                                            <span/>\n                                        </label>\n                                    </th>\n                                    <th>\n                                        <Tooltip\n                                            tip={useTranslation(\"Taxonomy slug. The post name/slug. Used for various queries for taxonomy content.\")}\n                                            label={useTranslation(\"Slug\")}\n                                        />\n                                    </th>\n                                    <th>\n                                        {useTranslation(\"Type\")}\n                                    </th>\n                                    <th>\n                                        <Tooltip\n                                            tip={useTranslation(\"Associate custom post types here\")}\n                                            label={useTranslation(\"Associated post types\")}\n                                        />\n                                    </th>\n                                    <th>\n                                        {useTranslation(\"Field groups\")}\n                                    </th>\n                                    <th>\n                                        {useTranslation(\"Actions\")}\n                                    </th>\n                                </tr>\n                                </thead>\n                                <tbody>\n                                {data.records && data.records.map((record) => (\n                                    <TaxonomyListElement key={record.id} record={record}/>\n                                ))}\n                                </tbody>\n                                {totalPages > 1 && (\n                                    <tfoot>\n                                    <tr>\n                                        <td colSpan={7}>\n                                            <Pagination\n                                                currentPage={page ? parseInt(page) : 1}\n                                                totalPages={totalPages}\n                                                baseLink=\"/taxonomies\"\n                                            />\n                                        </td>\n                                    </tr>\n                                    </tfoot>\n                                )}\n                            </table>\n                        </div>\n                    ) : (\n                        <Alert style={styleVariants.SECONDARY}>\n                            {useTranslation(\"No taxonomies found.\")} <Link to=\"/register_taxonomy\">{useTranslation(\"Register the first one\")}</Link>!\n                        </Alert>\n                    )}\n                </Layout>\n            </form>\n        </FormProvider>\n    );\n};\n\nTaxonomyList.propTypes = {};\n\nexport default TaxonomyList;"],"sourceRoot":""}