/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkadvanced_custom_post_type_lite"] = self["webpackChunkadvanced_custom_post_type_lite"] || []).push([[482],{

/***/ 9012:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _react = __webpack_require__(7294);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactRouterDom = __webpack_require__(3727);\n\nvar _reactSortableHoc = __webpack_require__(3350);\n\nvar _reactRedux = __webpack_require__(4494);\n\nvar _metaStateActions = __webpack_require__(8527);\n\nvar _useUnsavedChangesWarning = __webpack_require__(9755);\n\nvar _useUnsavedChangesWarning2 = _interopRequireDefault(_useUnsavedChangesWarning);\n\nvar _misc = __webpack_require__(3154);\n\nvar _fetchMeta = __webpack_require__(4553);\n\nvar _Spinner = __webpack_require__(7410);\n\nvar _Spinner2 = _interopRequireDefault(_Spinner);\n\nvar _Breadcrumbs = __webpack_require__(5827);\n\nvar _Breadcrumbs2 = _interopRequireDefault(_Breadcrumbs);\n\nvar _metaSubmit = __webpack_require__(4717);\n\nvar _reactToastify = __webpack_require__(9249);\n\nvar _deleteAllMeta = __webpack_require__(7209);\n\nvar _Layout = __webpack_require__(3067);\n\nvar _Layout2 = _interopRequireDefault(_Layout);\n\nvar _ActionsBar = __webpack_require__(3700);\n\nvar _ActionsBar2 = _interopRequireDefault(_ActionsBar);\n\nvar _metaTypes = __webpack_require__(895);\n\nvar _Meta = __webpack_require__(975);\n\nvar _Meta2 = _interopRequireDefault(_Meta);\n\nvar _Modal = __webpack_require__(2651);\n\nvar _Modal2 = _interopRequireDefault(_Modal);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar CustomPostTypeMeta = function CustomPostTypeMeta() {\n\n    // manage global state\n    var _useParams = (0, _reactRouterDom.useParams)(),\n        postType = _useParams.postType;\n\n    var dispatch = (0, _reactRedux.useDispatch)();\n\n    var _useSelector = (0, _reactRedux.useSelector)(function (state) {\n        return state.metaStateReducer;\n    }),\n        boxes = _useSelector.boxes,\n        fields = _useSelector.fields,\n        values = _useSelector.values,\n        isSaved = _useSelector.isSaved,\n        isValid = _useSelector.isValid,\n        saveLoading = _useSelector.loading,\n        saveErrors = _useSelector.errors,\n        success = _useSelector.success;\n\n    var _useSelector2 = (0, _reactRedux.useSelector)(function (state) {\n        return state.fetchMetaReducer;\n    }),\n        loading = _useSelector2.loading,\n        fetched = _useSelector2.fetched;\n\n    // manage local state\n\n\n    var didMountRef = (0, _react.useRef)(false);\n\n    var _useUnsavedChangesWar = (0, _useUnsavedChangesWarning2.default)(),\n        _useUnsavedChangesWar2 = _slicedToArray(_useUnsavedChangesWar, 3),\n        Prompt = _useUnsavedChangesWar2[0],\n        setDirty = _useUnsavedChangesWar2[1],\n        setPristine = _useUnsavedChangesWar2[2];\n\n    var _useState = (0, _react.useState)(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        modalVisible = _useState2[0],\n        setModalVisible = _useState2[1];\n\n    // set page meta title\n\n\n    (0, _react.useEffect)(function () {\n        (0, _misc.metaTitle)('ACPT - meta' + (isSaved ? '' : '*'));\n        if (!isSaved) {\n            setDirty();\n        }\n    }, [isSaved]);\n\n    // fetching data and\n    // populate the UI\n    (0, _react.useEffect)(function () {\n        dispatch((0, _fetchMeta.fetchMeta)(_metaTypes.metaTypes.CUSTOM_POST_TYPE, postType));\n    }, [saveLoading]);\n\n    // sortable\n    var onSortEnd = function onSortEnd(_ref) {\n        var oldIndex = _ref.oldIndex,\n            newIndex = _ref.newIndex;\n\n        dispatch((0, _metaStateActions.setBoxes)((0, _reactSortableHoc.arrayMove)(boxes, oldIndex, newIndex)));\n    };\n\n    // handle data submit\n    var handleSubmit = function handleSubmit() {\n        dispatch((0, _metaSubmit.metaSubmit)(values));\n        dispatch((0, _metaStateActions.setStatusSaved)());\n        setPristine();\n    };\n\n    var handleDeleteAll = function handleDeleteAll() {\n        dispatch((0, _deleteAllMeta.deleteAllMeta)(_metaTypes.metaTypes.CUSTOM_POST_TYPE, postType));\n        dispatch((0, _metaStateActions.setStatusSaved)());\n        setPristine();\n    };\n\n    // handle form submission outcome\n    (0, _react.useEffect)(function () {\n        if (didMountRef.current) {\n            if (!saveLoading) {\n                if (success) {\n                    setPristine();\n                    _reactToastify.toast.success(\"Custom post type meta successfully saved\");\n                }\n\n                if (saveErrors.length > 0) {\n                    saveErrors.map(function (error) {\n                        _reactToastify.toast.error(error);\n                    });\n                }\n            }\n        } else {\n            didMountRef.current = true;\n        }\n    }, [saveLoading]);\n\n    if (loading) {\n        return wp.element.createElement(_Spinner2.default, null);\n    }\n\n    var renderDeleteButton = wp.element.createElement(\n        _react2.default.Fragment,\n        null,\n        wp.element.createElement(\n            _Modal2.default,\n            { title: 'Confirm deleting all', visible: modalVisible },\n            wp.element.createElement(\n                'p',\n                null,\n                'Are you sure?'\n            ),\n            wp.element.createElement(\n                'p',\n                null,\n                wp.element.createElement(\n                    'a',\n                    {\n                        href: '#',\n                        className: 'acpt-btn acpt-btn-primary',\n                        onClick: function onClick(e) {\n                            e.preventDefault();\n                            handleDeleteAll();\n                        }\n                    },\n                    'Yes'\n                ),\n                '\\xA0',\n                wp.element.createElement(\n                    'a',\n                    {\n                        href: '#',\n                        className: 'acpt-btn acpt-btn-primary-o',\n                        onClick: function onClick(e) {\n                            e.preventDefault();\n                            setModalVisible(!modalVisible);\n                        }\n                    },\n                    'No'\n                )\n            )\n        ),\n        wp.element.createElement(\n            'button',\n            {\n                onClick: function onClick(e) {\n                    e.preventDefault();\n                    setModalVisible(true);\n                },\n                type: 'submit',\n                className: 'acpt-btn acpt-btn-danger'\n            },\n            'Delete all'\n        )\n    );\n\n    var buttons = wp.element.createElement(\n        _react2.default.Fragment,\n        null,\n        wp.element.createElement(\n            'a',\n            {\n                href: '#',\n                onClick: function onClick(e) {\n                    e.preventDefault();\n                    dispatch((0, _metaStateActions.createBox)(_metaTypes.metaTypes.CUSTOM_POST_TYPE, postType));\n                },\n                className: 'acpt-btn acpt-btn-primary-o'\n            },\n            'Add meta box'\n        ),\n        boxes.length > 0 ? wp.element.createElement(\n            _react2.default.Fragment,\n            null,\n            wp.element.createElement(\n                'button',\n                {\n                    disabled: !isValid,\n                    onClick: function onClick(e) {\n                        e.preventDefault();\n                        handleSubmit();\n                    },\n                    type: 'submit',\n                    className: 'acpt-btn acpt-btn-primary'\n                },\n                'Save'\n            ),\n            renderDeleteButton\n        ) : wp.element.createElement(\n            _react2.default.Fragment,\n            null,\n            fetched.length > 0 && renderDeleteButton\n        )\n    );\n\n    return wp.element.createElement(\n        _Layout2.default,\n        null,\n        wp.element.createElement(_ActionsBar2.default, {\n            title: postType + ' meta boxes',\n            actions: buttons\n        }),\n        wp.element.createElement(\n            'main',\n            null,\n            wp.element.createElement(_Breadcrumbs2.default, { crumbs: [{\n                    label: \"Registered Custom Post Types\",\n                    link: \"/\"\n                }, {\n                    label: postType + ' meta boxes'\n                }] }),\n            Prompt,\n            wp.element.createElement(_Meta2.default, {\n                belongsTo: _metaTypes.metaTypes.CUSTOM_POST_TYPE,\n                find: postType,\n                boxes: boxes,\n                fields: fields,\n                onSortEnd: onSortEnd,\n                values: values\n            })\n        )\n    );\n};\n\nexports.default = CustomPostTypeMeta;\n\n// import React, {useEffect, useRef, useState} from 'react';\n// import {Link, useHistory, useParams} from 'react-router-dom'\n// import CustomPostTypeListElement from \"./CustomPostTypeListElement\";\n// import Spinner from \"../../reusable/Loader/Spinner\";\n// import {useDispatch, useSelector} from \"react-redux\";\n// import {fetchPostTypes} from \"../../../redux/thunks/fetchPostTypes\";\n// import {fetchPostTypesCount} from \"../../../redux/thunks/fetchPostTypesCount\";\n// import {changeCurrentAdminMenuLink, metaTitle, refreshPage} from \"../../../utils/misc\";\n// import {deletePostTypeTemplate} from \"../../../redux/thunks/deletePostTypeTemplate\";\n// import {toast} from \"react-toastify\";\n// import {syncPosts} from \"../../../redux/thunks/syncPosts\";\n// import {filterByLabel} from \"../../../utils/objects\";\n// import Layout from \"../../reusable/Layout\";\n// import ActionsBar from \"../../../components/reusable/Layout/ActionsBar\";\n// import Breadcrumbs from \"../../../components/reusable/Layout/Breadcrumbs\";\n// import Tippy from \"../../../components/reusable/Tippy\";\n// import {Icon} from '@iconify/react';\n// import Pagination from \"../../../components/reusable/Pagination\";\n//\n// const CustomPostTypeList = () => {\n//\n//     // manage global state\n//     const dispatch = useDispatch();\n//     const {fetched, loading} = useSelector(state => state.fetchPostTypesReducer);\n//     const {fetched: fetchedCount, loading:loadingCount} = useSelector(state => state.fetchPostTypesCountReducer);\n//     const {errors: deleteTemplateErrors, success: deleteTemplateSuccess, loading: deleteTemplateLoading} = useSelector(state => state.deletePostTypeTemplateReducer);\n//     const {errors: syncPostsErrors, success: syncPostsSuccess, loading: syncPostsLoading} = useSelector(state => state.syncPostsReducer);\n//     const {loading: settingsLoading, fetched: settings} = useSelector(state => state.fetchSettingsReducer);\n//\n//     // manage local state\n//     const {page} = useParams();\n//     const didMountRef = useRef(false);\n//     const [fetchedSuccess, setFetchedSuccess] = useState(null);\n//     const [thereIsWooCommerce, setThereIsWooCommerce] = useState(false);\n//     const perPage = (settings.length > 0 && filterByLabel(settings, 'key', 'records_per_page') !== '') ? filterByLabel(settings, 'key', 'records_per_page').value : 20;\n//     const history = useHistory();\n//\n//     useEffect(() => {\n//         metaTitle(\"Registered Custom Post Types\");\n//         changeCurrentAdminMenuLink('');\n//         dispatch(fetchPostTypesCount());\n//         dispatch(fetchPostTypes({\n//             page: page ? page : 1,\n//             perPage: perPage\n//         }));\n//     }, [page]);\n//\n//     // handle fetch outcome\n//     useEffect(() => {\n//         if (didMountRef.current){\n//             if(!loading && !settingsLoading){\n//                 setFetchedSuccess(true);\n//\n//                 let isWooCommerce = 0;\n//\n//                 fetched.map((post)=>{\n//                     if(post.isWooCommerce){\n//                         isWooCommerce++;\n//                     }\n//                 });\n//\n//                 (isWooCommerce > 0) && setThereIsWooCommerce(true);\n//             }\n//         } else {\n//             didMountRef.current = true;\n//         }\n//     }, [loading]);\n//\n//     // handle delete template outcome\n//     useEffect(() => {\n//         if (didMountRef.current){\n//             if(!deleteTemplateLoading){\n//                 if(deleteTemplateSuccess){\n//                     history.push('/');\n//                     toast.success(\"Template was successfully deleted. The browser will refresh after 5 seconds...\");\n//                     refreshPage(5000);\n//                 }\n//\n//                 if(deleteTemplateErrors.length > 0){\n//                     deleteTemplateErrors.map((error) => {\n//                         toast.error(error);\n//                     });\n//                 }\n//             }\n//         } else {\n//             didMountRef.current = true;\n//         }\n//     }, [deleteTemplateLoading]);\n//\n//     // handle sync posts\n//     useEffect(() => {\n//         if (didMountRef.current){\n//             if(!syncPostsLoading){\n//                 if(syncPostsSuccess){\n//                     history.push('/');\n//                     toast.success(\"Successfully post sync. The browser will refresh after 5 seconds...\");\n//                     refreshPage(5000);\n//                 }\n//\n//                 if(syncPostsErrors.length > 0){\n//                     syncPostsErrors.map((error) => {\n//                         toast.error(error);\n//                     });\n//                 }\n//             }\n//         } else {\n//             didMountRef.current = true;\n//         }\n//     }, [syncPostsLoading]);\n//\n//     const handleDeleteTemplate = (name, type) => {\n//         dispatch(deletePostTypeTemplate(name, type));\n//     };\n//\n//     const handleSyncPosts = () => {\n//         dispatch(syncPosts());\n//     };\n//\n//     if(!fetchedSuccess){\n//         return <Spinner/>;\n//     }\n//\n//     const actions =\n//         <React.Fragment>\n//             <Link\n//                 className=\"acpt-btn acpt-btn-primary\"\n//                 to=\"/register\">\n//                 Register new Post Type\n//             </Link>\n//             <a\n//                 onClick={e => {\n//                     e.preventDefault();\n//                     handleSyncPosts();\n//                 }}\n//                 className=\"acpt-btn acpt-btn-primary-o\"\n//                 href=\"#\"\n//             >\n//                 Sync with post types\n//             </a>\n//         </React.Fragment>\n//     ;\n//\n//     return (\n//         <Layout>\n//             <ActionsBar\n//                 title=\"Registered Custom Post Types\"\n//                 actions={actions}\n//             />\n//             <main>\n//                 <Breadcrumbs crumbs={[\n//                     {\n//                         label: \"Registered Custom Post Types\",\n//                     }\n//                 ]} />\n//                 {fetched.length > 0 ?\n//                     <div className=\"acpt-card\">\n//                         <div className=\"acpt-card__header borderless\">\n//                             <div className=\"acpt-card__inner\">\n//                                 {fetchedCount} record(s) found\n//                             </div>\n//                         </div>\n//                         <div className=\"acpt-card__body\">\n//                             <div className=\"acpt-table-responsive\">\n//                                 <table className=\"acpt-table\">\n//                                     <thead>\n//                                     <tr>\n//                                         <th className=\"grey backend with-border\" colSpan={thereIsWooCommerce ? 7 : 6 }>Backend UI</th>\n//                                         <th className=\"grey frontend\" colSpan={2}>Frontend UI</th>\n//                                     </tr>\n//                                     <tr>\n//                                         <th/>\n//                                         <th>\n//                                             Name\n//                                         </th>\n//                                         <th/>\n//                                         <th>\n//                                             Meta boxes\n//                                             &nbsp;\n//                                             <Tippy title=\"Associated meta boxes\">\n//                                                 <span className=\"helper\">\n//                                                     <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n//                                                 </span>\n//                                             </Tippy>\n//                                         </th>\n//                                         {thereIsWooCommerce === true && (\n//                                             <th>\n//                                                 Product data\n//                                                 &nbsp;\n//                                                 <Tippy title=\"Associated WooCommerce product data\">\n//                                                     <span className=\"helper\">\n//                                                         <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n//                                                     </span>\n//                                                 </Tippy>\n//                                             </th>\n//                                         )}\n//                                         <th>\n//                                             Associated taxonomies\n//                                             &nbsp;\n//                                             <Tippy title=\"Associated taxonomies with the post\">\n//                                                 <span className=\"helper\">\n//                                                     <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n//                                                 </span>\n//                                             </Tippy>\n//                                         </th>\n//                                         <th className=\"with-border\">\n//                                             Post count\n//                                             &nbsp;\n//                                             <Tippy title=\"Published posts count\">\n//                                                 <span className=\"helper\">\n//                                                     <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n//                                                 </span>\n//                                             </Tippy>\n//                                         </th>\n//                                         <th className=\"text-center\">\n//                                             Archive template\n//                                             &nbsp;\n//                                             <Tippy title=\"The archive template for this custom post type\">\n//                                                 <span className=\"helper\">\n//                                                     <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n//                                                 </span>\n//                                             </Tippy>\n//                                         </th>\n//                                         <th className=\"text-center\">\n//                                             Single template\n//                                             &nbsp;\n//                                             <Tippy title=\"The single template for this custom post type\">\n//                                                 <span className=\"helper\">\n//                                                     <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n//                                                 </span>\n//                                             </Tippy>\n//                                         </th>\n//                                     </tr>\n//                                     </thead>\n//                                     <tbody>\n//                                     {fetched.map((element) => <CustomPostTypeListElement id={element.id} thereIsWooCommerce={thereIsWooCommerce} key={element.id} element={element} handeDeleteTemplate={handleDeleteTemplate} />)}\n//                                     </tbody>\n//                                 </table>\n//                             </div>\n//                         </div>\n//                         <div className=\"acpt-card__footer\" style={{border: \"none\"}}>\n//                             <div className=\"acpt-card__inner\">\n//                                 <Pagination currentPage={page ? page : 1} perPage={perPage} records={fetchedCount}/>\n//                             </div>\n//                         </div>\n//                     </div>\n//                     :\n//                     <div className=\"acpt-alert acpt-alert-secondary\">\n//                         No custom post types found. <Link to=\"/register\">Register the first one</Link>!\n//                     </div>\n//                 }\n//             </main>\n//         </Layout>\n//     );\n// };\n//\n// export default CustomPostTypeList;\n\n//# sourceURL=webpack://advanced-custom-post-type-lite/./assets/src/App/components/pages/CustomPostTypeList/index.js?");

/***/ })

}]);