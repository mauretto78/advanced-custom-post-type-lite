{"version":3,"sources":["webpack://advanced-custom-post-type-lite/./assets/src/App/constants/woocommerce_fields.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/WooCommerce/BulkActions/ElementSelector.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/WooCommerce/BulkActions/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/WooCommerce/ProductDataFields/ListView/QuickNavigation/QuickNavigationField.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/WooCommerce/ProductDataFields/ListView/QuickNavigation/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/WooCommerce/ProductDataFields/ListView/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/WooCommerce/ProductDataFields/Modal/DeleteAllFieldsModal.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/WooCommerce/ProductDataFields/Modal/DeleteProductDataFieldModal.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/WooCommerce/ProductDataFields/Modal/DeleteProductDataFieldOptionModal.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/WooCommerce/ProductDataFields/ProductDataField/ProductDataFieldHeader.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/WooCommerce/ProductDataFields/ProductDataField/ProductDataFieldOptionsList/ProductDataFieldOption.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/WooCommerce/ProductDataFields/ProductDataField/ProductDataFieldOptionsList/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/WooCommerce/ProductDataFields/ProductDataField/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/WooCommerce/ProductDataFields/TabularView/ProductDataFieldSortableTab.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/WooCommerce/ProductDataFields/TabularView/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/WooCommerce/ProductDataFields/index.js"],"names":["CHECKBOX","RADIO","SELECT","TEXT","TEXTAREA","WooCommerceFieldsList","value","label","ElementSelector","element","dispatch","state","productDataFieldsState","selectedElements","isSelected","filter","el","id","length","top","selected","e","target","checked","propTypes","PropTypes","object","isRequired","BulkActions","view","setFieldTab","control","setValue","getValues","watchedFields","name","ref","action","setAction","executeAction","map","fieldIndex","findIndex","b","watchedField","duplicatedField","push","field","deletedField","fields","f","current","styleVariants","WHITE","preventDefault","oneOf","func","QuickNavigationField","index","watchedBoxName","SECONDARY","number","QuickNavigation","documentGlobals","document","globals","is_rtl","array","ListView","setView","setActiveTab","move","handleDragEnd","event","active","over","oldIndex","newIndex","sortedFields","WARNING","string","DeleteAllFieldsModal","modalOpen","setModalOpen","buttons","SUCCESS","DANGER","DeleteProductDataFieldModal","remove","DeleteProductDataFieldOptionModal","optionIndex","formId","ProductDataFieldHeader","listeners","attributes","errors","formState","watchedName","watchedType","watchedIsRequired","append","closedElements","isClosed","page","error","message","fieldType","type","handleToggleClose","then","ProductDataFieldOption","fieldId","option","register","watchedValue","watchedLabel","setNodeRef","transform","style","CSS","Translate","toString","linkedOption","setLinkedOption","required","maxLength","ProductDataFieldOptionsList","options","handleAddOption","ProductDataField","fieldHasOptions","defaultValue","description","ProductDataFieldSortableTab","activeTab","onClick","TabularView","handleTabChange","ProductDataFields","fetchProductDataFields","loading","fetchError","setFetchError","navigate","methods","mode","res","payload","catch","console","err","handleAddField","newFieldId","newField","isFormValid","pages","onSubmit","data","success","toast","actions","PRIMARY","handleSubmit","link"],"mappings":"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","file":"778.js","sourcesContent":["import React from \"react\";\n\nexport const CHECKBOX = 'Checkbox';\nexport const RADIO = 'Radio';\nexport const SELECT = 'Select';\nexport const TEXT = 'Text';\nexport const TEXTAREA = 'Textarea';\n\n// export const WooCommerceFieldsList = [\n//     { value: TEXT, label: <div className=\"vertical-center\"><Icon icon=\"bx:bx-text\" width=\"18px\" /> &nbsp; Text</div> },\n//     { value: TEXTAREA, label: <div className=\"vertical-center\"><Icon icon=\"bx:bx-pen\" width=\"18px\" /> &nbsp; Textarea</div> },\n//     { value: SELECT, label: <div className=\"vertical-center\"><Icon icon=\"bx:bx-select-multiple\" width=\"18px\" /> &nbsp; Select</div> },\n//     { value: CHECKBOX, label: <div className=\"vertical-center\"><Icon icon=\"bx:bx-checkbox-checked\" width=\"18px\" /> &nbsp; Checkbox</div> },\n//     { value: RADIO, label: <div className=\"vertical-center\"><Icon icon=\"bx:bx-radio-circle-marked\" width=\"18px\" /> &nbsp; Radio</div> },\n// ];\n\nexport const WooCommerceFieldsList = [\n    { value: TEXT, label: \"Text\" },\n    { value: TEXTAREA, label: \"Textarea\" },\n    { value: SELECT, label: \"Select\" },\n    { value: CHECKBOX, label: \"Checkbox\" },\n    { value: RADIO, label: \"Radio\" },\n];","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {selectElement} from \"../../../redux/reducers/productDataFieldsStateSlice\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Tooltip from \"../../../components/Tooltip\";\n\nconst ElementSelector = ({element}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {selectedElements} = useSelector(state => state.productDataFieldsState);\n    /**\n     *\n     * @return {boolean}\n     */\n    const isSelected = () => {\n        const filter = selectedElements.filter(el => el.id === element.id );\n\n        return filter.length > 0\n    };\n\n    return (\n        <Tooltip\n            label={\n                <label className=\"checkbox\" htmlFor={`select-${element.id}`} style={{top: \"3px\"}}>\n                    <input\n                        id={`select-${element.id}`}\n                        type=\"checkbox\"\n                        checked={isSelected()}\n                        onChange={e => {\n                            dispatch(selectElement({\n                                    element: element,\n                                    selected: e.target.checked,\n                                }\n                            ));\n                        }}\n                    />\n                    <span/>\n                </label>\n            }\n            icon={false}\n            tip={useTranslation(isSelected() ? \"Deselect this element\" : \"Select this element\")}\n        />\n    );\n};\n\nElementSelector.propTypes = {\n    element: PropTypes.object.isRequired,\n};\n\nexport default ElementSelector;\n\n","import React, {useRef, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport Button from \"../../../components/Button\";\nimport {\n    addField,\n    deleteField,\n    deselectAllElements\n} from \"../../../redux/reducers/productDataFieldsStateSlice\";\nimport PropTypes from \"prop-types\";\nimport {useFormContext, useWatch} from \"react-hook-form\";\nimport {cloneWCField} from \"../../../utils/cloners\";\n\nconst BulkActions = ({view, setFieldTab}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {selectedElements} = useSelector(state => state.productDataFieldsState);\n\n    // manage form state\n    const { control, setValue, getValues } = useFormContext();\n    const watchedFields = useWatch({\n        control,\n        name: \"fields\"\n    });\n\n    // manage local state\n    const ref = useRef(null);\n    const [action, setAction] = useState(null);\n\n    const executeAction = () => {\n        selectedElements.map((element) => {\n\n            const fieldIndex =  watchedFields.findIndex((b) => b.id === element.id);\n            const watchedField = watchedFields[fieldIndex];\n\n            switch (action) {\n\n                // duplicate\n                case \"duplicate\":\n                    const duplicatedField = cloneWCField(watchedField);\n\n                    watchedFields.push(duplicatedField);\n                    setValue(\"fields\", watchedFields);\n                    dispatch(addField({field: duplicatedField}));\n\n                    break;\n\n                // delete\n                case \"delete\":\n                    const deletedField = {...watchedField};\n                    const fields = getValues(\"fields\").filter(f => f.id !== element.id);\n                    setValue(\"fields\", fields);\n\n                    if(setFieldTab){\n                        setFieldTab(0);\n                    }\n\n                    dispatch(deleteField({field: deletedField}));\n\n                    break;\n            }\n        });\n\n        if(action === 'delete' || action === 'duplicate'){\n            dispatch(deselectAllElements());\n        }\n\n        ref.current.value = \"\";\n    };\n\n    return (\n        <React.Fragment>\n            {selectedElements.length > 0 && (\n                <div className={`flex-between mb-24`}>\n                    <div>\n                        {selectedElements.length} {useTranslation(\"Selected items\")}\n                    </div>\n                    <div className=\"i-flex-center s-8\">\n                        <select\n                            ref={ref}\n                            className=\"form-control sm\"\n                            onChange={e => {\n                                setAction(e.target.value !== \"\" ? e.target.value : null);\n                            }}\n                        >\n                            <option value=\"\">{useTranslation(\"Select\")}</option>\n                            <option value=\"duplicate\">{useTranslation(\"Duplicate\")}</option>\n                            <option value=\"delete\">{useTranslation(\"Delete\")}</option>\n                        </select>\n                        <Button\n                            style={styleVariants.WHITE}\n                            size=\"sm\"\n                            disabled={action === null}\n                            onClick={(e)=>{\n                                e.preventDefault();\n                                executeAction();\n                            }}\n                        >\n                            {useTranslation(\"Execute\")}\n                        </Button>\n                    </div>\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nBulkActions.propTypes = {\n    view: PropTypes.oneOf([\n        \"tab\",\n        \"list\"\n    ]).isRequired,\n    setFieldTab: PropTypes.func,\n};\n\nexport default BulkActions;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport {useFormContext, useWatch} from \"react-hook-form\";\nimport {scrollToId} from \"../../../../../utils/scroll\";\nimport {styleVariants} from \"../../../../../constants/styles\";\nimport Badge from \"../../../../../components/Badge\";\n\nconst QuickNavigationField = ({field, index}) => {\n\n    const { control } = useFormContext();\n    const watchedBoxName = useWatch({\n        control,\n        name: `fields.${index}.name`\n    });\n\n    return (\n        <React.Fragment>\n            <div className=\"tree-el flex-between s-8\" style={{\"--level\": 0}}>\n                <span\n                    className=\"text-ellipsis cursor-pointer\"\n                    onClick={(e) => {\n                        e.preventDefault();\n                        scrollToId(`lazy-${field.id}`);\n                    }}\n                >\n                    {watchedBoxName ? watchedBoxName : field.name}\n                </span>\n                <Badge style={styleVariants.SECONDARY}>\n                    F\n                </Badge>\n            </div>\n        </React.Fragment>\n    );\n};\n\nQuickNavigationField.propTypes = {\n    field: PropTypes.object.isRequired,\n    index: PropTypes.number.isRequired,\n};\n\nexport default QuickNavigationField;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport QuickNavigationField from \"./QuickNavigationField\";\nimport useTranslation from \"../../../../../hooks/useTranslation\";\n\nconst QuickNavigation = ({fields}) => {\n\n    const documentGlobals = document.globals;\n    const globals = documentGlobals.globals;\n\n    if(fields.length === 0){\n        return null;\n    }\n\n    return (\n        <div className=\"b-rounded with-shadow bg-white p-24\">\n            <h3 className=\"mb-24 flex-between s-8\">\n                <span className=\"text-ellipsis cursor-pointer\">\n                    {useTranslation(\"product data fields\")}\n                </span>\n            </h3>\n            <div className={`tree ${globals.is_rtl === true ? `rtl` : ``}`}>\n                {fields.map((field, index) => (\n                    <QuickNavigationField\n                        index={index}\n                        field={field}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nQuickNavigation.propTypes = {\n    fields: PropTypes.array.isRequired,\n};\n\nexport default QuickNavigation;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport useTranslation from \"../../../../hooks/useTranslation\";\nimport SwitchView from \"../../../../components/SwitchView\";\nimport Alert from \"../../../../components/Alert\";\nimport {styleVariants} from \"../../../../constants/styles\";\nimport SortableList from \"../../../../components/SortableList\";\nimport ProductDataField from \"../ProductDataField\";\nimport {useDispatch} from \"react-redux\";\nimport {useFieldArray, useFormContext} from \"react-hook-form\";\nimport {arrayMove} from \"@dnd-kit/sortable\";\nimport {setFields} from \"../../../../redux/reducers/productDataFieldsStateSlice\";\nimport QuickNavigation from \"./QuickNavigation\";\nimport BulkActions from \"../../BulkActions\";\n\nconst ListView = ({fields, view, setView, setActiveTab}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n\n    // manage form state\n    const { control } = useFormContext();\n    const { move } = useFieldArray({\n        control,\n        name: \"fields\",\n    });\n\n    const handleDragEnd = (event) => {\n        const {active, over} = event;\n\n        if(active.id === over.id){\n            return;\n        }\n\n        const oldIndex = fields.findIndex((field) => field.id === active.id);\n        const newIndex = fields.findIndex((field) => field.id === over.id);\n        const sortedFields = arrayMove(fields, oldIndex, newIndex);\n        move(oldIndex, newIndex);\n\n        dispatch(setFields(sortedFields));\n    };\n\n    return (\n        <div className=\"container\">\n            <div className=\"col-3 flex-column s-24 hidden-xs sticky\" style={{\n                top: \"200px\"\n            }}>\n                <QuickNavigation fields={fields}/>\n            </div>\n            <div className=\"col-9\">\n                <div className=\"flex-between mb-24 s-8 for-xs\">\n                    <h3>\n                        {useTranslation(\"Manage product data fields\")}\n                    </h3>\n                    <div className=\"i-flex-center s-8\">\n                        <SwitchView\n                            localStorageKey=\"wc_fields_manage_view\"\n                            setView={setView}\n                            view={view}\n                        />\n                    </div>\n                </div>\n                <BulkActions\n                    view=\"list\"\n                />\n                {fields.length > 0 ? (\n                    <SortableList\n                        onDragEnd={handleDragEnd}\n                        items={fields}\n                    >\n                        <div className=\"flex-column s-24\">\n                            {fields.map((field, index)=> (\n                                <ProductDataField\n                                    index={index}\n                                    key={field.id}\n                                    view=\"list\"\n                                    field={field}\n                                />\n                            ))}\n                        </div>\n                    </SortableList>\n                ) : (\n                    <Alert style={styleVariants.WARNING}>\n                        {useTranslation('No fields already created. Create the first one now by clicking the button \"Add field\"!')}\n                    </Alert>\n                )}\n            </div>\n        </div>\n    );\n};\n\nListView.propTypes = {\n    view: PropTypes.string.isRequired,\n    setView: PropTypes.func.isRequired,\n    fields: PropTypes.array.isRequired,\n    setActiveTab: PropTypes.func.isRequired,\n};\n\nexport default ListView;","import React, {useState} from \"react\";\nimport useTranslation from \"../../../../hooks/useTranslation\";\nimport Modal from \"../../../../components/Modal\";\nimport Button from \"../../../../components/Button\";\nimport {styleVariants} from \"../../../../constants/styles\";\nimport {useDispatch} from \"react-redux\";\nimport {useFormContext} from \"react-hook-form\";\nimport {deleteAllFields} from \"../../../../redux/reducers/productDataFieldsStateSlice\";\n\nconst DeleteAllFieldsModal = () => {\n\n    // manage global state\n    const dispatch = useDispatch();\n\n    // manage form state\n    const { setValue } = useFormContext();\n\n    // manage local state\n    const [modalOpen, setModalOpen] = useState(false);\n    \n    const buttons = [\n        <Button style={styleVariants.SUCCESS} onClick={(e) => {\n            e.preventDefault();\n            dispatch(deleteAllFields());\n            setValue(\"fields\", []);\n            setModalOpen(!modalOpen);\n        }}>\n            {useTranslation(\"Yes\")}\n        </Button>,\n        <Button style={styleVariants.DANGER} onClick={(e) => {\n            e.preventDefault();\n            setModalOpen(!modalOpen);\n        }}>\n            {useTranslation(\"No\")}\n        </Button>,\n    ];\n\n    return (\n        <React.Fragment>\n            <Modal\n                title={useTranslation('Confirm deleting all')}\n                visible={modalOpen}\n                buttons={buttons}\n            >\n                {useTranslation(\"Are you sure?\")}\n            </Modal>\n            <Button\n                style={styleVariants.DANGER}\n                onClick={(e) => {\n                    e.preventDefault();\n                    setModalOpen(!modalOpen);\n                }}\n            >\n                {useTranslation(\"Delete all\")}\n            </Button>\n        </React.Fragment>\n    );\n};\n\n\nexport default DeleteAllFieldsModal;\n","import React, {useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport {useDispatch} from \"react-redux\";\nimport {useFieldArray, useFormContext} from \"react-hook-form\";\nimport Button from \"../../../../components/Button\";\nimport {styleVariants} from \"../../../../constants/styles\";\nimport useTranslation from \"../../../../hooks/useTranslation\";\nimport Modal from \"../../../../components/Modal\";\nimport {deleteField} from \"../../../../redux/reducers/productDataFieldsStateSlice\";\nimport {Icon} from \"@iconify/react\";\n\nconst DeleteProductDataFieldModal = ({field, index}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n\n    // manage form state\n    const { control } = useFormContext();\n    const { remove } = useFieldArray({\n        control,\n        name: \"fields\",\n    });\n\n    // manage local state\n    const [modalOpen, setModalOpen] = useState(false);\n\n    const buttons = [\n        <Button style={styleVariants.SUCCESS} onClick={(e) => {\n            e.preventDefault();\n            dispatch(deleteField({field}));\n            remove(index);\n            setModalOpen(!modalOpen);\n        }}>\n            {useTranslation(\"Yes\")}\n        </Button>,\n        <Button style={styleVariants.DANGER} onClick={(e) => {\n            e.preventDefault();\n            setModalOpen(!modalOpen);\n        }}>\n            {useTranslation(\"No\")}\n        </Button>,\n    ];\n\n    return (\n        <React.Fragment>\n            <Modal\n                title={useTranslation('Confirm deleting option')}\n                visible={modalOpen}\n                buttons={buttons}\n            >\n                {useTranslation(\"Are you sure?\")}\n            </Modal>\n            <a\n                href=\"#\"\n                onClick={e => {\n                    e.preventDefault();\n                    setModalOpen(!modalOpen);;\n                }}\n            >\n                <Icon icon=\"bx-trash\" width={18} />\n            </a>\n        </React.Fragment>\n    );\n};\n\nDeleteProductDataFieldModal.propTypes = {\n    index: PropTypes.number.isRequired,\n    field: PropTypes.object.isRequired\n};\n\nexport default DeleteProductDataFieldModal;","import React, {useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport {useDispatch} from \"react-redux\";\nimport {useFieldArray, useFormContext} from \"react-hook-form\";\nimport Button from \"../../../../components/Button\";\nimport {styleVariants} from \"../../../../constants/styles\";\nimport useTranslation from \"../../../../hooks/useTranslation\";\nimport Modal from \"../../../../components/Modal\";\nimport {deleteOption} from \"../../../../redux/reducers/productDataFieldsStateSlice\";\nimport {Icon} from \"@iconify/react\";\nimport Tooltip from \"../../../../components/Tooltip\";\n\nconst DeleteProductDataFieldOptionModal = ({fieldIndex, optionIndex}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n\n    const formId = () => {\n        return `fields.${fieldIndex}.options`;\n    };\n\n    // manage form state\n    const { control } = useFormContext();\n    const { remove } = useFieldArray({\n        control,\n        name: formId(),\n    });\n\n    // mange local state\n    const [modalOpen, setModalOpen] = useState(false);\n\n    const buttons = [\n        <Button style={styleVariants.SUCCESS} onClick={(e) => {\n            e.preventDefault();\n            dispatch(deleteOption({fieldIndex, optionIndex}));\n            remove(optionIndex);\n            setModalOpen(!modalOpen);\n        }}>\n            {useTranslation(\"Yes\")}\n        </Button>,\n        <Button style={styleVariants.DANGER} onClick={(e) => {\n            e.preventDefault();\n            setModalOpen(!modalOpen);\n        }}>\n            {useTranslation(\"No\")}\n        </Button>,\n    ];\n\n    return (\n        <span>\n            <Modal\n                title={useTranslation('Confirm deleting option')}\n                visible={modalOpen}\n                buttons={buttons}\n            >\n                {useTranslation(\"Are you sure?\")}\n            </Modal>\n            <a\n                href=\"#\"\n                onClick={(e) => {\n                    e.preventDefault();\n                    setModalOpen(!modalOpen);\n                }}\n            >\n                <Tooltip\n                    icon={false}\n                    tip={useTranslation(\"Delete\")}\n                    label={<Icon icon=\"bx-minus\"/>}\n                />\n            </a>\n        </span>\n    );\n};\n\nDeleteProductDataFieldOptionModal.propTypes = {\n    fieldIndex: PropTypes.number.isRequired,\n    optionIndex: PropTypes.number.isRequired\n};\n\nexport default DeleteProductDataFieldOptionModal;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {get, useFieldArray, useFormContext, useWatch} from \"react-hook-form\";\nimport {Icon} from \"@iconify/react\";\nimport useTranslation from \"../../../../hooks/useTranslation\";\nimport Tooltip from \"../../../../components/Tooltip\";\nimport {saveIsClosed} from \"../../../../utils/localStorage\";\nimport {addField, hideElement, showElement} from \"../../../../redux/reducers/productDataFieldsStateSlice\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport MetaFieldType from \"../../../../components/MetaFieldType\";\nimport ButtonSwitch from \"../../../../components/Forms/ButtonSwitch\";\nimport DeleteProductDataFieldModal from \"../Modal/DeleteProductDataFieldModal\";\nimport {cloneWCField} from \"../../../../utils/cloners\";\nimport {delay} from \"../../../../utils/misc\";\nimport {scrollToId} from \"../../../../utils/scroll\";\nimport ElementSelector from \"../../BulkActions/ElementSelector\";\n\nconst ProductDataFieldHeader = ({field, view, listeners, attributes, index, formId}) => {\n\n    // manage form state\n    const { formState: {errors}, control } = useFormContext();\n    const watchedName = useWatch({\n        control,\n        name: formId(\"name\")\n    });\n\n    const watchedType = useWatch({\n        control,\n        name: formId(\"type\")\n    });\n\n    const watchedIsRequired = useWatch({\n        control,\n        name: formId(\"isRequired\")\n    });\n\n    const { append } = useFieldArray({\n        control,\n        name: \"fields\"\n    });\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {closedElements} = useSelector(state => state.productDataFieldsState);\n\n    /**\n     *\n     * @return {boolean}\n     */\n    const isClosed = () => {\n        const filter = closedElements.filter(e => e === page.id);\n\n        return filter.length === 1;\n    };\n\n    /**\n     *\n     * @return {string|*}\n     */\n    const name = () => {\n        const id = formId(\"name\");\n        const error = get(errors, id);\n\n        if(error){\n            return (\n                <span className=\"invalid-feedback\">\n                    {useTranslation(error.message)}\n                </span>\n            );\n        }\n\n        return watchedName ? watchedName : field.name;\n    };\n\n    /**\n     *\n     * @return {*}\n     */\n    const fieldType = () => {\n        return watchedType ? watchedType : field.type;\n    };\n\n    /**\n     * Toggle close box\n     */\n    const handleToggleClose = () => {\n        saveIsClosed(field.id);\n\n        if((isClosed())){\n            dispatch(showElement({id: field.id}));\n        } else {\n            dispatch(hideElement({id: field.id}));\n        }\n    };\n\n    return (\n        <div className=\"flex-between s-8 for-xs\">\n            <span className=\"i-flex-center s-8\">\n                {view === 'list' && (\n                    <span className=\"cursor-move top-2 handle\" {...attributes} {...listeners}>\n                        <Icon icon=\"bx:dots-vertical-rounded\" color=\"#777\" width={18} />\n                    </span>\n                )}\n                <ElementSelector\n                    element={{\n                        id: field.id,\n                    }}\n                />\n                <h3>\n                    {name()}\n                </h3>\n                <span className=\"color-gray\">\n                    <MetaFieldType fieldType={fieldType()} css=\"top-2\" />\n                </span>\n                 <span className=\"i-flex-center s-8\">\n                     <Tooltip\n                         label={\n                             <React.Fragment>\n                                 <ButtonSwitch\n                                     control={control}\n                                     defaultValue={typeof watchedIsRequired  === \"boolean\" ? watchedIsRequired : field.isRequired}\n                                     errors={errors}\n                                     icon=\"foundation:asterisk\"\n                                     id={formId(\"isRequired\")}\n                                 />\n                             </React.Fragment>\n                         }\n                         tip={useTranslation(\"Field required\")}\n                         icon={false}\n                     />\n                 </span>\n            </span>\n            <span className=\"i-flex-center s-8\">\n                <Tooltip\n                    label={\n                        <a\n                            href=\"#\"\n                            onClick={e => {\n                                e.preventDefault();\n                                const duplicatedField = cloneWCField(field);\n                                dispatch(addField({field: duplicatedField}));\n                                append(duplicatedField);\n\n                                delay(1).then(()=>{\n                                    scrollToId(duplicatedField.id);\n                                });\n                            }}\n                        >\n                            <Icon icon=\"bx:duplicate\" width={18} />\n                        </a>\n                    }\n                    tip={useTranslation(\"Duplicate this meta field\")}\n                    icon={false}\n                />\n                <Tooltip\n                    label={\n                        <DeleteProductDataFieldModal\n                            index={index}\n                            field={field}\n                        />\n                    }\n                    tip={useTranslation(\"Delete this meta field\")}\n                    icon={false}\n                />\n                {view === 'list' && (\n                    <Tooltip\n                        label={\n                            <a\n                                href=\"#\"\n                                onClick={e => {\n                                    e.preventDefault();\n                                    handleToggleClose();\n                                }}\n                            >\n                                <Icon icon=\"bx:expand-alt\" width={18} />\n                            </a>\n                        }\n                        tip={useTranslation(\"Hide/show this meta field\")}\n                        icon={false}\n                    />\n                )}\n            </span>\n        </div>\n    );\n};\n\nProductDataFieldHeader.propTypes = {\n    index: PropTypes.number.isRequired,\n    field: PropTypes.object.isRequired,\n    listeners: PropTypes.func,\n    attributes: PropTypes.func,\n    formId: PropTypes.func.isRequired,\n    view: PropTypes.oneOf([\n        \"list\",\n        \"tabular\"\n    ]).isRequired,\n};\n\nexport default ProductDataFieldHeader;","import React, {memo, useState} from 'react';\nimport PropTypes from \"prop-types\";\nimport {useFormContext, useWatch} from \"react-hook-form\";\nimport {useSortable} from \"@dnd-kit/sortable\";\nimport {CSS} from \"@dnd-kit/utilities\";\nimport InputHidden from \"../../../../../components/Forms/InputHidden\";\nimport {Icon} from \"@iconify/react\";\nimport Input from \"../../../../../components/Forms/Input\";\nimport useTranslation from \"../../../../../hooks/useTranslation\";\nimport DeleteProductDataFieldOptionModal from \"../../Modal/DeleteProductDataFieldOptionModal\";\n\nconst ProductDataFieldOption = memo(({index, fieldIndex, fieldId, option}) => {\n\n    // manage form state\n    const formId = (value) => {\n        return `fields.${fieldIndex}.options.${index}.${value}`;\n    };\n\n    const { register, formState: {errors}, control, setValue } = useFormContext();\n    const watchedValue = useWatch({\n        control,\n        name: formId(\"value\")\n    });\n    const watchedLabel = useWatch({\n        control,\n        name: formId(\"label\")\n    });\n\n    // DND-kit\n    const {attributes, listeners, setNodeRef, transform} = useSortable({id: option.id});\n    const style = {\n        transform: CSS.Translate.toString(transform)\n    };\n\n    // manage local state\n    const [linkedOption, setLinkedOption] = useState(option.label === option.value);\n\n    /**\n     *\n     * @return {string|*}\n     */\n    const value = () => {\n        if(watchedValue){\n            return watchedValue;\n        }\n\n        if(option.value){\n            return option.value;\n        }\n\n        return null;\n    };\n\n    /**\n     *\n     * @return {null|*}\n     */\n    const label = () => {\n        if(watchedLabel){\n            return watchedLabel;\n        }\n\n        if(option.label){\n            return option.label;\n        }\n\n        return null;\n    };\n\n    return (\n        <div className=\"i-flex-center s-8\" style={style} ref={setNodeRef}>\n            <InputHidden\n                id={formId(\"id\")}\n                value={option.id}\n                register={register}\n            />\n            <span className=\"cursor-move top-2 handle\" {...attributes} {...listeners}>\n                <Icon icon=\"bx:dots-vertical-rounded\" color=\"#777\" width={18} />\n            </span>\n            <span className=\"i-flex-center s-24 w-100\">\n                <span className=\"w-100\">\n                    <Input\n                        id={formId(\"label\")}\n                        register={register}\n                        errors={errors}\n                        defaultValue={label()}\n                        onChangeCapture={e => {\n                            if(linkedOption){\n                                setValue(formId(\"value\"), e.target.value);\n                            }\n                        }}\n                        onClick={e => {\n                            if(option.label && e.target.value === 'option'){\n                                setValue(formId(\"label\"), null);\n                            }\n                        }}\n                        validate={{\n                            required: useTranslation(\"This field is mandatory\"),\n                            maxLength: {\n                                value: 255,\n                                message: \"max length is 255\"\n                            }\n                        }}\n                    />\n                </span>\n                <span>\n                    <button\n                        type=\"button\"\n                        className={`acpt-btn-switch ${linkedOption ? 'active' : ''}`}\n                        onClick={e => {\n                            e.preventDefault();\n                            setLinkedOption(!linkedOption);\n                        }}\n                    >\n                        <Icon icon=\"bx:bx-link\" width=\"18px\"/>\n                    </button>\n                </span>\n                <span className=\"w-100\">\n                    <Input\n                        id={formId(\"value\")}\n                        register={register}\n                        errors={errors}\n                        defaultValue={value()}\n                        onChangeCapture={e => {\n                            if(linkedOption){\n                                setValue(formId(\"label\"), e.target.value);\n                            }\n                        }}\n                        onClick={e => {\n                            if(option.value && e.target.value === 'option'){\n                                setValue(formId(\"value\"), null);\n                            }\n                        }}\n                        validate={{\n                            required: useTranslation(\"This field is mandatory\"),\n                            maxLength: {\n                                value: 255,\n                                message: \"max length is 255\"\n                            }\n                        }}\n                    />\n                </span>\n                <DeleteProductDataFieldOptionModal\n                    fieldIndex={fieldIndex}\n                    optionIndex={index}\n                />\n            </span>\n        </div>\n    );\n});\n\nProductDataFieldOption.propTypes = {\n    fieldId: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    fieldIndex: PropTypes.number.isRequired,\n    option: PropTypes.object.isRequired,\n};\n\nexport default ProductDataFieldOption;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {useDispatch} from \"react-redux\";\nimport {useFieldArray, useFormContext} from \"react-hook-form\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {addOption} from \"../../../../../redux/reducers/productDataFieldsStateSlice\";\nimport useTranslation from \"../../../../../hooks/useTranslation\";\nimport Alert from \"../../../../../components/Alert\";\nimport {styleVariants} from \"../../../../../constants/styles\";\nimport SortableList from \"../../../../../components/SortableList\";\nimport ProductDataFieldOption from \"./ProductDataFieldOption\";\n\nconst ProductDataFieldOptionsList = ({fieldId, fieldIndex, options}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n\n    // manage form state\n    const formId = () => {\n        return `fields.${fieldIndex}.options`;\n    };\n\n    // manage form state\n    const { control } = useFormContext();\n    const { move } = useFieldArray({\n        control,\n        name: formId(),\n    });\n\n    const handleDragEnd = (event) => {\n        const {active, over} = event;\n\n        if(active.id === over.id){\n            return;\n        }\n\n        const oldIndex = options.findIndex((option) => option.id === active.id);\n        const newIndex = options.findIndex((option) => option.id === over.id);\n        move(oldIndex, newIndex);\n    };\n\n    /**\n     * Add new option\n     */\n    const handleAddOption = () => {\n\n        const option = {\n            id: uuidv4(),\n            fieldId: fieldId,\n            label: 'option',\n            value: 'option'\n        };\n\n        dispatch(addOption({fieldIndex, option}));\n    };\n\n    return (\n        <div>\n            <fieldset className=\"acpt-fieldset\">\n                <legend>{useTranslation(\"Option list\")}</legend>\n                {options && options.length > 0 ? (\n                    <SortableList\n                        onDragEnd={handleDragEnd}\n                        items={options}\n                    >\n                        <div className=\"flex-column s-24\">\n                            {options && options.map((option, index) => (\n                                <ProductDataFieldOption\n                                    index={index}\n                                    fieldIndex={fieldIndex}\n                                    fieldId={fieldId}\n                                    option={option}\n                                />\n                            ))}\n                        </div>\n                    </SortableList>\n                ) : (\n                    <Alert style={styleVariants.WARNING}>\n                        {useTranslation('No options already created. Create the first one now by clicking the button \"Add option\"!')}\n                    </Alert>\n                )}\n                <a\n                    href=\"#\"\n                    className=\"mt-24\"\n                    onClick={e => {\n                        e.preventDefault();\n                        handleAddOption();\n                    }}\n                >\n                    {useTranslation(\"Add option\")}\n                </a>\n            </fieldset>\n        </div>\n    );\n};\n\nProductDataFieldOptionsList.propTypes = {\n    fieldId: PropTypes.string.isRequired,\n    fieldIndex: PropTypes.number.isRequired,\n    options: PropTypes.array.isRequired,\n};\n\nexport default ProductDataFieldOptionsList;","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {useSortable} from \"@dnd-kit/sortable\";\nimport {CSS} from \"@dnd-kit/utilities\";\nimport {useFormContext, useWatch} from \"react-hook-form\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport InputHidden from \"../../../../components/Forms/InputHidden\";\nimport Label from \"../../../../components/Forms/Label\";\nimport useTranslation from \"../../../../hooks/useTranslation\";\nimport Input from \"../../../../components/Forms/Input\";\nimport ProductDataFieldHeader from \"./ProductDataFieldHeader\";\nimport Select from \"../../../../components/Forms/Select\";\nimport {CHECKBOX, RADIO, SELECT, WooCommerceFieldsList} from \"../../../../constants/woocommerce_fields\";\nimport ProductDataFieldOptionsList from \"./ProductDataFieldOptionsList\";\nimport LazyElement from \"../../../../components/LazyElement\";\n\nconst ProductDataField = ({field, index, view}) => {\n\n    // DND-kit\n    const {attributes, listeners, setNodeRef, transform} = useSortable({id: field.id});\n    const style = {\n        transform: CSS.Translate.toString(transform)\n    };\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {closedElements} = useSelector(state => state.productDataFieldsState);\n\n    // manage form state\n    const { register, formState: {errors}, control, setValue } = useFormContext();\n\n    /**\n     *\n     * @param value\n     * @return {string}\n     */\n    const formId = (value) => {\n        return `fields.${index}.${value}`;\n    };\n\n    const watchedType = useWatch({\n        control,\n        name: formId(\"type\")\n    });\n\n    const fieldType = () => {\n        return watchedType ? watchedType : field.type;\n    };\n\n    const fieldHasOptions = (fieldType) => {\n        return (\n            fieldType === SELECT ||\n            fieldType === RADIO\n        );\n    };\n\n    /**\n     *\n     * @return {boolean}\n     */\n    const isClosed = () => {\n        const filter = closedElements.filter(e => e === field.id);\n\n        return filter.length === 1;\n    };\n\n    return (\n        <LazyElement\n            id={field.id}\n            element={\n                <div id={field.id} className={`bg-white b-rounded ${view === 'list' ? \"p-24\" : \"\"}`} ref={view === 'list' ? setNodeRef : null} style={view === 'list' ? style : null}>\n                    <InputHidden\n                        id={formId(\"id\")}\n                        value={field.id}\n                        register={register}\n                    />\n                    <div className={(view === 'tabular' || (!isClosed() && view === 'list')) ? 'mb-24' : ''}>\n                        <ProductDataFieldHeader\n                            index={index}\n                            formId={formId}\n                            view={view}\n                            field={field}\n                            attributes={attributes}\n                            listeners={listeners}\n                        />\n                    </div>\n                    <div className={`${isClosed() ? 'hidden' : ''}`}>\n                        <div className=\"flex-column s-24\">\n                            <div className=\"container align-end\">\n                                <div className=\"col-6\">\n                                    <Label\n                                        isRequired={true}\n                                        id={formId(\"name\")}\n                                        label={useTranslation(\"Name\")}\n                                    />\n                                    <Input\n                                        id={formId(\"name\")}\n                                        register={register}\n                                        errors={errors}\n                                        placeholder={useTranslation(\"Name\")}\n                                        defaultValue={field.name}\n                                        onClick={e => {\n                                            if(field.name && e.target.value === 'field'){\n                                                setValue(formId(\"name\"), null);\n                                            }\n                                        }}\n                                        validate={{\n                                            required: useTranslation(\"This field is mandatory\"),\n                                            maxLength: {\n                                                value: 255,\n                                                message: \"max length is 255\"\n                                            }\n                                        }}\n                                    />\n                                </div>\n                                <div className=\"col-6\">\n                                    <Label\n                                        isRequired={true}\n                                        id={formId(\"type\")}\n                                        label={useTranslation(\"Field type\")}\n                                    />\n                                    <Select\n                                        register={register}\n                                        errors={errors}\n                                        id={formId(\"type\")}\n                                        values={WooCommerceFieldsList}\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"container align-end\">\n                                <div className=\"col-6\">\n                                    <Label\n                                        isRequired={false}\n                                        id={formId(\"defaultValue\")}\n                                        label={useTranslation(\"Default value\")}\n                                    />\n                                    <Input\n                                        id={formId(\"defaultValue\")}\n                                        register={register}\n                                        errors={errors}\n                                        placeholder={useTranslation(\"Default value\")}\n                                        defaultValue={field.defaultValue}\n                                        validate={{\n                                            maxLength: {\n                                                value: 255,\n                                                message: \"max length is 255\"\n                                            }\n                                        }}\n                                    />\n                                </div>\n                                <div className=\"col-6\">\n                                    <Label\n                                        isRequired={false}\n                                        id={formId(\"description\")}\n                                        label={useTranslation(\"A brief description\")}\n                                    />\n                                    <Input\n                                        id={formId(\"description\")}\n                                        register={register}\n                                        errors={errors}\n                                        placeholder={useTranslation(\"A brief description\")}\n                                        defaultValue={field.description}\n                                        validate={{\n                                            maxLength: {\n                                                value: 255,\n                                                message: \"max length is 255\"\n                                            }\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                            {fieldHasOptions(fieldType()) && (\n                                <ProductDataFieldOptionsList\n                                    fieldId={field.id}\n                                    fieldIndex={index}\n                                    options={field.options ? field.options : []}\n                                />\n                            )}\n                        </div>\n                    </div>\n                </div>\n            }\n        />\n    );\n};\n\nProductDataField.propTypes = {\n    view: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    field: PropTypes.object.isRequired,\n};\n\nexport default ProductDataField;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport {useSortable} from \"@dnd-kit/sortable\";\nimport {CSS} from \"@dnd-kit/utilities\";\nimport {Icon} from \"@iconify/react\";\nimport {useFormContext, useWatch} from \"react-hook-form\";\nimport ElementSelector from \"../../BulkActions/ElementSelector\";\n\nconst ProductDataFieldSortableTab = ({index, field, activeTab = 0, onClick}) => {\n\n    // manage form state\n    const { control } = useFormContext();\n    const watchedName = useWatch({\n        control,\n        name: `fields.${index}.name`\n    });\n\n    // DND-kit\n    const {attributes, listeners, setNodeRef, transform} = useSortable({id: field.id});\n    const style = {\n        transform: CSS.Translate.toString(transform)\n    };\n\n    return (\n        <div\n            id={field.id}\n            className={`flex-between s-8 tab ${activeTab === index ? 'active' : ''}`}\n            ref={setNodeRef}\n            style={style}\n            onClick={() => {\n                if(onClick){\n                    onClick(index);\n                }\n            }}\n        >\n            <span className=\"cursor-move top-2 handle\" {...attributes} {...listeners}>\n                <Icon icon=\"bx:dots-vertical-rounded\" color=\"#777\" width={18} />\n            </span>\n            <ElementSelector\n                element={{\n                    id: field.id,\n                }}\n            />\n            <span className=\"text-ellipsis\">\n                {watchedName ? watchedName : field.name}\n            </span>\n        </div>\n    );\n};\n\nProductDataFieldSortableTab.propTypes = {\n    index: PropTypes.number.isRequired,\n    field: PropTypes.object.isRequired,\n    activeTab: PropTypes.number,\n    onClick: PropTypes.func,\n};\n\nexport default ProductDataFieldSortableTab;\n","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {useDispatch} from \"react-redux\";\nimport {useFieldArray, useFormContext} from \"react-hook-form\";\nimport {arrayMove} from \"@dnd-kit/sortable\";\nimport {setFields} from \"../../../../redux/reducers/productDataFieldsStateSlice\";\nimport useTranslation from \"../../../../hooks/useTranslation\";\nimport SwitchView from \"../../../../components/SwitchView\";\nimport Alert from \"../../../../components/Alert\";\nimport {styleVariants} from \"../../../../constants/styles\";\nimport ProductDataField from \"../ProductDataField\";\nimport SortableList from \"../../../../components/SortableList\";\nimport ProductDataFieldSortableTab from \"./ProductDataFieldSortableTab\";\nimport BulkActions from \"../../BulkActions\";\n\nconst TabularView = ({fields, view, setView, activeTab, setActiveTab}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n\n    // manage form state\n    const { control } = useFormContext();\n    const { move } = useFieldArray({\n        control,\n        name: \"fields\",\n    });\n\n    const handleDragEnd = (event) => {\n        const {active, over} = event;\n\n        if(active.id === over.id){\n            return;\n        }\n\n        const oldIndex = fields.findIndex((field) => field.id === active.id);\n        const newIndex = fields.findIndex((field) => field.id === over.id);\n        const sortedFields = arrayMove(fields, oldIndex, newIndex);\n        move(oldIndex, newIndex);\n        setActiveTab(newIndex);\n\n        dispatch(setFields(sortedFields));\n    };\n\n    const handleTabChange = (index) => {\n        setActiveTab(index);\n    };\n\n    return (\n        <React.Fragment>\n            <div className=\"flex-between mb-24\">\n                <h3>\n                    {useTranslation(\"Manage product data fields\")}\n                </h3>\n                <SwitchView\n                    localStorageKey=\"wc_fields_manage_view\"\n                    setView={setView}\n                    view={view}\n                />\n            </div>\n            <BulkActions\n                view=\"tab\"\n                setFieldTab={setActiveTab}\n            />\n            {fields.length > 0 ? (\n                <div className=\"acpt-horizontal-tabs\">\n                    <div className=\"tablist\">\n                        <SortableList\n                            onDragEnd={handleDragEnd}\n                            items={fields}\n                        >\n                            {fields.map((field, index) => {\n                                return (\n                                    <ProductDataFieldSortableTab\n                                        index={index}\n                                        field={field}\n                                        activeTab={activeTab}\n                                        onClick={handleTabChange}\n                                    />\n                                )\n                            })}\n                        </SortableList>\n                    </div>\n                    {fields.map((field, index) => (\n                        <React.Fragment>\n                            {index === activeTab && (\n                                <div className=\"tab-panel\">\n                                    <ProductDataField\n                                        field={field}\n                                        index={index}\n                                        view={view}\n                                    />\n                                </div>\n                            )}\n                        </React.Fragment>\n                    ))}\n                </div>\n            ) : (\n                <Alert style={styleVariants.WARNING}>\n                    {useTranslation('No fields already created. Create the first one now by clicking the button \"Add field\"!')}\n                </Alert>\n            )}\n        </React.Fragment>\n    );\n};\n\nTabularView.propTypes = {\n    view: PropTypes.string.isRequired,\n    setView: PropTypes.func.isRequired,\n    fields: PropTypes.array.isRequired,\n    activeTab: PropTypes.number.isRequired,\n    setActiveTab: PropTypes.func.isRequired,\n};\n\nexport default TabularView;","import React, {useEffect, useState} from 'react';\nimport {FormProvider, useForm} from \"react-hook-form\";\nimport Button from \"../../../components/Button\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Layout from \"../../../layout/Layout\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {savedView} from \"../../../utils/localStorage\";\nimport DeleteAllFieldsModal from \"./Modal/DeleteAllFieldsModal\";\nimport {isEmpty} from \"../../../utils/objects\";\nimport ListView from \"./ListView\";\nimport TabularView from \"./TabularView\";\nimport Loader from \"../../../components/Loader\";\nimport PageNotFound from \"../../404\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {changeCurrentAdminMenuLink, delay, metaTitle} from \"../../../utils/misc\";\nimport {scrollToId} from \"../../../utils/scroll\";\nimport {TEXT} from \"../../../constants/woocommerce_fields\";\nimport {toast} from \"react-hot-toast\";\nimport {useNavigate, useParams} from \"react-router-dom\";\nimport {saveWooCommerceProductDataFields} from \"../../../redux/reducers/saveWooCommerceProductDataFieldsSlice\";\nimport InputHidden from \"../../../components/Forms/InputHidden\";\nimport {addField, hydrateState} from \"../../../redux/reducers/productDataFieldsStateSlice\";\nimport {fetchProductDataFields} from \"../../../redux/reducers/fetchProductDataFieldsSlice\";\n\nconst ProductDataFields = ({}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {loading} = useSelector(state => state.fetchProductDataFields);\n    const {fields} = useSelector(state => state.productDataFieldsState);\n\n    // manage local state\n    const {id} = useParams();\n    const [fetchError, setFetchError] = useState(false);\n    const [view, setView] = useState(savedView(\"wc_fields_manage_view\"));\n    const [activeTab, setActiveTab] = useState(0);\n\n    // manage redirect\n    const navigate = useNavigate();\n\n    // form init\n    const methods = useForm({\n        mode: 'all'\n    });\n\n    useEffect(() => {\n        metaTitle(useTranslation(\"Manage product data fields\"));\n        changeCurrentAdminMenuLink('#/');\n        dispatch(fetchProductDataFields(id))\n            .then(res => {\n                dispatch(hydrateState(res.payload));\n\n                // Set initial values\n                res.payload && res.payload.map((field, index) => {\n                    methods.setValue(`fields.${index}`, field);\n                });\n            })\n            .catch(err => {\n                console.error(err);\n                setFetchError(true);\n            })\n        ;\n    }, []);\n\n    const handleAddField = () => {\n\n        const newFieldId = uuidv4();\n        const newField = {\n            id: newFieldId,\n            name: 'field',\n            type: TEXT,\n            isRequired: false,\n            description: null,\n            defaultValue: null,\n            options: [],\n        };\n\n        dispatch(addField({field: newField}));\n        setActiveTab(fields.length);\n\n        delay(1).then(()=>{\n            scrollToId(newFieldId);\n        });\n    };\n\n    /**\n     *\n     * @return {boolean}\n     */\n    const isFormValid = () => {\n        if(methods.formState.errors && methods.formState.errors.pages){\n            return false;\n        }\n\n        return true;\n    };\n\n    const onSubmit = (data) => {\n        dispatch(saveWooCommerceProductDataFields(data))\n            .then(res => {\n                const payload = res.payload;\n\n                if(payload.success){\n                    navigate(`/product-data/product/fields/${id}`);\n                    toast.success(useTranslation(\"WooCommerce product data fields successfully saved\"));\n                } else {\n                    toast.error(payload.error);\n                }\n            })\n            .catch(err => {\n                toast.error(err);\n            })\n        ;\n    };\n\n    const actions = [\n        <Button\n            style={styleVariants.SECONDARY}\n            onClick={(e) => {\n                e.preventDefault();\n                handleAddField();\n            }}\n        >\n            {useTranslation(\"Add field\")}\n        </Button>,\n        <Button\n            disabled={!isFormValid()}\n            style={styleVariants.PRIMARY}\n        >\n            {useTranslation(\"Save\")}\n        </Button>,\n        <DeleteAllFieldsModal />,\n    ];\n\n    if(loading){\n        return (\n            <Loader/>\n        );\n    }\n\n    if(fetchError){\n        return <PageNotFound />;\n    }\n\n    return (\n        <FormProvider {...methods}>\n            <form onSubmit={methods.handleSubmit(onSubmit)}>\n                <Layout\n                    title={useTranslation(\"Manage option pages\")}\n                    actions={actions}\n                    crumbs={[\n                        {\n                            label: useTranslation(\"Registered Custom Post Types\"),\n                            link: \"/\"\n                        },\n                        {\n                            label: useTranslation(\"WooCommerce product data\"),\n                            link: \"/product-data/product\"\n                        },\n                        {\n                            label: useTranslation(\"product data fields\")\n                        }\n                    ]}\n                >\n                    <InputHidden\n                        register={methods.register}\n                        id=\"productDataId\"\n                        value={id}\n                    />\n                    {view === 'list' ? (\n                        <ListView\n                            setActiveTab={setActiveTab}\n                            view={view}\n                            setView={setView}\n                            fields={!isEmpty(fields) ? fields : []}\n                        />\n                    ) : (\n                        <TabularView\n                            activeTab={activeTab}\n                            setActiveTab={setActiveTab}\n                            view={view}\n                            setView={setView}\n                            fields={!isEmpty(fields) ? fields : []}\n                        />\n                    )}\n                </Layout>\n            </form>\n        </FormProvider>\n    );\n};\n\nexport default ProductDataFields;"],"sourceRoot":""}