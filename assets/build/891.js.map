{"version":3,"sources":["webpack://advanced-custom-post-type-lite/./assets/src/App/components/pages/AssocTaxonomyToCustomPostType/AssocTaxonomyElement.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/pages/AssocTaxonomyToCustomPostType/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/reusable/CustomPostType/CustomPostTypeLabel.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/reusable/Layout/Breadcrumbs/Breadcrumb.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/reusable/Layout/Breadcrumbs/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/redux/thunks/assocTaxonomyToPostType.js","webpack://advanced-custom-post-type-lite/./assets/src/App/redux/thunks/fetchPostTypes.js","webpack://advanced-custom-post-type-lite/./assets/src/App/redux/thunks/fetchTaxonomies.js","webpack://advanced-custom-post-type-lite/./assets/src/App/utils/misc.js"],"names":["AssocTaxonomyElement","id","element","postType","defaultChecked","dispatch","handleOnChange","slug","singular","plural","postCount","checked","e","target","AssocTaxonomyToCustomPostType","state","assocTaxonomyToPostReducer","successAssocTaxonomyToPost","success","loadingAssocTaxonomyToPost","loading","assocTaxonomyToPostErrors","errors","fetchTaxonomiesReducer","fetchedTaxonomies","fetched","loadingTaxonomies","fetchPostTypesReducer","fetchedPosts","loadingPosts","didMountRef","fetchedSuccess","setFetchedSuccess","current","f","map","item","push","taxonomies","toast","length","error","label","link","CustomPostTypeLabel","isNative","isWooCommerce","Breadcrumb","isLast","Breadcrumbs","crumbs","crumb","index","assocTaxonomyToPostType","getState","res","console","log","fetchPostTypes","meta","fetchTaxonomies","metaTitle","title","originalDocumentTitle","document","split","changeCurrentAdminMenuLink","menuWrapper","querySelector","childNodes","forEach","currentValue","currentIndex","listObj","links","getElementsByTagName","i","elem","href","getAttribute","toCompare","classList","add","remove","refreshPage","timeout","setTimeout","window","location","reload"],"mappings":"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","file":"891.js","sourcesContent":["import React from 'react';\nimport {assocTaxonomyToPostType} from \"../../../redux/thunks/assocTaxonomyToPostType\";\nimport {useDispatch} from \"react-redux\";\nimport CustomPostTypeLabel from \"../../reusable/CustomPostType/CustomPostTypeLabel\";\n\nconst AssocTaxonomyElement = ({id, element, postType, defaultChecked}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n\n    const handleOnChange = (element) => {\n        dispatch(assocTaxonomyToPostType(postType, [element]));\n    };\n\n    return(\n        <tr>\n            <td>\n                <strong>{element.slug}</strong>\n            </td>\n            <td>\n                <CustomPostTypeLabel element={element} />\n            </td>\n            <td>\n                {element.singular}\n            </td>\n            <td>\n                {element.plural}\n            </td>\n            <td className=\"with-border\">\n                <span className=\"acpt-badge\">\n                    <span className=\"label\">\n                        {element.postCount}\n                    </span>\n                </span>\n            </td>\n            <td>\n                <label className=\"switch\">\n                    <input\n                        id={element.id}\n                        type=\"checkbox\"\n                        defaultChecked={defaultChecked}\n                        onChange={e => handleOnChange({\n                            id: element.id,\n                            checked: e.target.checked\n                        })}\n                    />\n                    <span className=\"slider round\"/>\n                </label>\n            </td>\n        </tr>\n    )\n};\n\nexport default AssocTaxonomyElement;","import React, {useEffect, useRef, useState} from 'react';\nimport {Link, useParams} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {metaTitle} from \"../../../utils/misc\";\nimport {fetchTaxonomies} from \"../../../redux/thunks/fetchTaxonomies\";\nimport Spinner from \"../../reusable/Loader/Spinner\";\nimport Breadcrumbs from \"../../reusable/Layout/Breadcrumbs\";\nimport AssocTaxonomyElement from \"./AssocTaxonomyElement\";\nimport {fetchPostTypes} from \"../../../redux/thunks/fetchPostTypes\";\nimport {filterById, isEmpty} from \"../../../utils/objects\";\nimport {toast} from \"react-toastify\";\nimport {Icon} from \"@iconify/react\";\nimport Tippy from \"../../reusable/Tippy\";\nimport Layout from \"../../reusable/Layout\";\nimport ActionsBar from \"../../reusable/Layout/ActionsBar\";\n\nconst AssocTaxonomyToCustomPostType = () => {\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {success: successAssocTaxonomyToPost, loading: loadingAssocTaxonomyToPost, errors: assocTaxonomyToPostErrors} = useSelector(state => state.assocTaxonomyToPostReducer);\n    const {fetched: fetchedTaxonomies, loading: loadingTaxonomies} = useSelector(state => state.fetchTaxonomiesReducer);\n    const {fetched: fetchedPosts, loading: loadingPosts} = useSelector(state => state.fetchPostTypesReducer);\n\n    // manage local state\n    const {postType} = useParams();\n    const didMountRef = useRef(false);\n    const [fetchedSuccess, setFetchedSuccess] = useState(null);\n\n    useEffect(() => {\n        metaTitle(\"Registered Taxonomies\");\n        dispatch(fetchTaxonomies());\n        dispatch(fetchPostTypes({\n            postType:postType\n        }));\n    }, []);\n\n    // handle fetch outcome\n    useEffect(() => {\n        if (didMountRef.current){\n            if(!loadingTaxonomies && !loadingPosts){\n                setFetchedSuccess(true);\n\n                const f = [];\n                fetchedTaxonomies.map((item)=>{\n                    f.push({\n                        id: item.id,\n                        checked: !isEmpty(filterById(fetchedPosts[0].taxonomies, item.id)),\n                    });\n                });\n            }\n        } else {\n            didMountRef.current = true;\n        }\n    }, [loadingTaxonomies, loadingPosts]);\n\n    // handle assoc outcome\n    useEffect(() => {\n        if (didMountRef.current){\n            if(!loadingAssocTaxonomyToPost){\n                if(successAssocTaxonomyToPost){\n                    toast.success(\"Custom post type was associated to selected taxonomies\");\n                }\n\n                if(assocTaxonomyToPostErrors.length > 0){\n                    assocTaxonomyToPostErrors.map((error) => {\n                        toast.error(error);\n                    });\n                }\n            }\n        } else {\n            didMountRef.current = true;\n        }\n    }, [loadingAssocTaxonomyToPost]);\n\n    if(!fetchedSuccess){\n        return <Spinner/>;\n    }\n\n    return (\n        <Layout>\n            <ActionsBar\n                title={`Associate taxonomies to ${postType}`}\n            />\n            <main>\n                <Breadcrumbs crumbs={[\n                    {\n                        label: \"Registered Custom Post Types\",\n                        link: \"/\"\n                    },\n                    {\n                        label: postType,\n                        link: `/view/${postType}`\n                    },\n                    {\n                        label: `Associate taxonomies to ${postType}`\n                    }\n                ]} />\n                {fetchedTaxonomies.length > 0 ?\n                    <div className=\"acpt-card\">\n                        <div className=\"acpt-card__header\">\n                            <div className=\"acpt-card__inner\">\n                                {fetchedTaxonomies.length} taxonomies registered\n                            </div>\n                        </div>\n                        <div className=\"acpt-card__body\">\n                            <div className=\"acpt-table-responsive\">\n                                <table className=\"acpt-table\">\n                                    <thead>\n                                    <tr>\n                                        <th className=\"grey backend with-border\" colSpan={5}>Taxonomy data</th>\n                                        <th className=\"grey frontend\" colSpan={1}>Actions</th>\n                                    </tr>\n                                    <tr>\n                                        <th>\n                                            Slug\n                                            &nbsp;\n                                            <Tippy title=\"Taxonomy slug. The post name/slug. Used for various queries for taxonomy content.\">\n                                                <span className=\"helper\">\n                                                    <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n                                                </span>\n                                            </Tippy>\n                                        </th>\n                                        <th/>\n                                        <th>\n                                            Singular\n                                            &nbsp;\n                                            <Tippy title=\"Singular label. Used when a singular label is needed\">\n                                                <span className=\"helper\">\n                                                    <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n                                                </span>\n                                            </Tippy>\n                                        </th>\n                                        <th>\n                                            Plural\n                                            &nbsp;\n                                            <Tippy title=\"Plural label. Used for the taxonomy admin menu item\">\n                                                <span className=\"helper\">\n                                                    <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n                                                </span>\n                                            </Tippy>\n                                        </th>\n                                        <th className=\"with-border\">\n                                            Post count\n                                            &nbsp;\n                                            <Tippy title=\"Published posts count associated with the taxonomy\">\n                                                <span className=\"helper\">\n                                                    <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n                                                </span>\n                                            </Tippy>\n                                        </th>\n                                        <th>\n                                            Associate\n                                            &nbsp;\n                                            <Tippy title=\"Associate custom post types here\">\n                                                <span className=\"helper\">\n                                                    <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n                                                </span>\n                                            </Tippy>\n                                        </th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    {fetchedTaxonomies.map((element) =>\n                                        <AssocTaxonomyElement\n                                            postType={postType}\n                                            id={element.id}\n                                            key={element.id}\n                                            element={element}\n                                            defaultChecked={!isEmpty(filterById(fetchedPosts[0].taxonomies, element.id))}\n                                        />)}\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n                    :\n                    <div className=\"acpt-alert acpt-alert-secondary\">\n                        No taxonomies found. <Link to=\"/register_taxonomy\">Register the first one</Link>!\n                    </div>\n                }\n            </main>\n        </Layout>\n    );\n};\n\nexport default AssocTaxonomyToCustomPostType;\n\n\n// import React, {useEffect, useRef, useState} from 'react';\n// import {Link, useParams} from \"react-router-dom\";\n// import {useDispatch, useSelector} from \"react-redux\";\n// import {metaTitle} from \"../../../utils/misc\";\n// import {fetchTaxonomies} from \"../../../redux/thunks/fetchTaxonomies\";\n// import Spinner from \"../../reusable/Loader/Spinner\";\n// import Breadcrumbs from \"../../reusable/Breadcrumbs\";\n// import AssocTaxonomyElement from \"./AssocTaxonomyElement\";\n// import {fetchPostTypes} from \"../../../redux/thunks/fetchPostTypes\";\n// import {filterById, isEmpty} from \"../../../utils/objects\";\n// import {toast} from \"react-toastify\";\n// import {Icon} from \"@iconify/react\";\n// import Tippy from \"../../reusable/Tippy\";\n// import Copyright from \"../../reusable/Copyright\";\n//\n// const AssocTaxonomyToCustomPostType = () => {\n//\n//     // manage global state\n//     const dispatch = useDispatch();\n//     const {success: successAssocTaxonomyToPost, loading: loadingAssocTaxonomyToPost, errors: assocTaxonomyToPostErrors} = useSelector(state => state.assocTaxonomyToPostReducer);\n//     const {fetched: fetchedTaxonomies, loading: loadingTaxonomies} = useSelector(state => state.fetchTaxonomiesReducer);\n//     const {fetched: fetchedPosts, loading: loadingPosts} = useSelector(state => state.fetchPostTypesReducer);\n//\n//     // manage local state\n//     const {postType} = useParams();\n//     const didMountRef = useRef(false);\n//     const [fetchedSuccess, setFetchedSuccess] = useState(null);\n//\n//     useEffect(() => {\n//         metaTitle(\"Registered Taxonomies\");\n//         dispatch(fetchTaxonomies());\n//         dispatch(fetchPostTypes({\n//             postType:postType\n//         }));\n//     }, []);\n//\n//     // handle fetch outcome\n//     useEffect(() => {\n//         if (didMountRef.current){\n//             if(!loadingTaxonomies && !loadingPosts){\n//                 setFetchedSuccess(true);\n//\n//                 const f = [];\n//                 fetchedTaxonomies.map((item)=>{\n//                     f.push({\n//                         id: item.id,\n//                         checked: !isEmpty(filterById(fetchedPosts[0].taxonomies, item.id)),\n//                     });\n//                 });\n//             }\n//         } else {\n//             didMountRef.current = true;\n//         }\n//     }, [loadingTaxonomies, loadingPosts]);\n//\n//     // handle assoc outcome\n//     useEffect(() => {\n//         if (didMountRef.current){\n//             if(!loadingAssocTaxonomyToPost){\n//                 if(successAssocTaxonomyToPost){\n//                     toast.success(\"Custom post type was associated to selected taxonomies\");\n//                 }\n//\n//                 if(assocTaxonomyToPostErrors.length > 0){\n//                     assocTaxonomyToPostErrors.map((error) => {\n//                         toast.error(error);\n//                     });\n//                 }\n//             }\n//         } else {\n//             didMountRef.current = true;\n//         }\n//     }, [loadingAssocTaxonomyToPost]);\n//\n//     if(!fetchedSuccess){\n//         return <Spinner/>;\n//     }\n//\n//     return (\n//         <div>\n//             <Breadcrumbs crumbs={[\n//                 {\n//                     label: \"Registered Custom Post Types\",\n//                     link: \"/\"\n//                 },\n//                 {\n//                     label: \"Registered Taxonomies\",\n//                     link: \"/taxonomies\"\n//                 },\n//                 {\n//                     label: postType,\n//                     link: `/view/${postType}`\n//                 },\n//                 {\n//                     label: `Associate taxonomies to ${postType}`\n//                 }\n//             ]} />\n//             <h1 className=\"acpt-title\">\n//                 <Icon icon=\"bx:bx-repost\" color=\"#02c39a\" width=\"18px\"/>\n//                 &nbsp;\n//                 Associate taxonomies to {postType}\n//             </h1>\n//             {fetchedTaxonomies.length > 0 ?\n//                 <div className=\"acpt-card\">\n//                     <div className=\"acpt-card__header\">\n//                         <div className=\"acpt-card__inner\">\n//                             {fetchedTaxonomies.length} taxonomies registered\n//                         </div>\n//                     </div>\n//                     <div className=\"acpt-card__body\">\n//                         <div className=\"acpt-table-responsive\">\n//                             <table className=\"acpt-table\">\n//                                 <thead>\n//                                     <tr>\n//                                         <th className=\"grey backend with-border\" colSpan={5}>Taxonomy data</th>\n//                                         <th className=\"grey frontend\" colSpan={1}>Actions</th>\n//                                     </tr>\n//                                     <tr>\n//                                         <th>\n//                                             Slug\n//                                             &nbsp;\n//                                             <Tippy title=\"Taxonomy slug. The post name/slug. Used for various queries for taxonomy content.\">\n//                                                 <span className=\"helper\">\n//                                                     <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n//                                                 </span>\n//                                             </Tippy>\n//                                         </th>\n//                                         <th/>\n//                                         <th>\n//                                             Singular\n//                                             &nbsp;\n//                                             <Tippy title=\"Singular label. Used when a singular label is needed\">\n//                                                 <span className=\"helper\">\n//                                                     <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n//                                                 </span>\n//                                             </Tippy>\n//                                         </th>\n//                                         <th>\n//                                             Plural\n//                                             &nbsp;\n//                                             <Tippy title=\"Plural label. Used for the taxonomy admin menu item\">\n//                                                 <span className=\"helper\">\n//                                                     <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n//                                                 </span>\n//                                             </Tippy>\n//                                         </th>\n//                                         <th className=\"with-border\">\n//                                             Post count\n//                                             &nbsp;\n//                                             <Tippy title=\"Published posts count associated with the taxonomy\">\n//                                                 <span className=\"helper\">\n//                                                     <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n//                                                 </span>\n//                                             </Tippy>\n//                                         </th>\n//                                         <th>\n//                                             Associate\n//                                             &nbsp;\n//                                             <Tippy title=\"Associate custom post types here\">\n//                                                 <span className=\"helper\">\n//                                                     <Icon icon=\"bx:bx-help-circle\" width=\"18px\"/>\n//                                                 </span>\n//                                             </Tippy>\n//                                         </th>\n//                                     </tr>\n//                                 </thead>\n//                                 <tbody>\n//                                     {fetchedTaxonomies.map((element) =>\n//                                         <AssocTaxonomyElement\n//                                             //onChange={handleChange}\n//                                             postType={postType}\n//                                             id={element.id}\n//                                             key={element.id}\n//                                             element={element}\n//                                             defaultChecked={!isEmpty(filterById(fetchedPosts[0].taxonomies, element.id))}\n//                                         />)}\n//                                 </tbody>\n//                             </table>\n//                         </div>\n//                     </div>\n//                 </div>\n//                 :\n//                 <div className=\"acpt-alert acpt-alert-secondary\">\n//                     No taxonomies found. <Link to=\"/register_taxonomy\">Register the first one</Link>!\n//                 </div>\n//             }\n//             <Copyright/>\n//         </div>\n//     );\n// };\n//\n// export default AssocTaxonomyToCustomPostType;","import React from 'react';\n\nconst CustomPostTypeLabel = ({element}) => {\n\n    // Note: can be used also for Taxonomy\n\n    return (\n        <React.Fragment>\n            {element.isNative\n                ?\n                <span className={`acpt-badge acpt-badge-native`}>\n                    <span className=\"label\">\n                        Native\n                    </span>\n                </span>\n                :\n                <span className={`acpt-badge acpt-badge-${element.isWooCommerce === true ? 'woocommerce' : 'custom' }`}>\n                    <span className=\"label\">\n                        {element.isWooCommerce === true ? 'WooCommerce' : 'Custom' }\n                    </span>\n                </span>\n            }\n        </React.Fragment>\n    );\n};\n\nexport default CustomPostTypeLabel;","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport {Icon} from \"@iconify/react\";\n\nconst Breadcrumb = ({label, link, isLast}) => {\n\n    return (\n        <React.Fragment>\n            <li className={isLast ? 'current' : ''}>\n                {link ?\n                    <Link to={link}>\n                        {label}\n                    </Link>\n                    :\n                    label\n                }\n            </li>\n            {!isLast && (\n                <span className=\"separator\">\n                    <Icon icon=\"bx:bx-chevron-right\" color=\"#aaa\" width=\"18px\" />\n                </span>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default Breadcrumb;","import React from 'react';\nimport Breadcrumb from \"./Breadcrumb\";\n\nconst Breadcrumbs = ({crumbs}) => {\n    return (\n        <div className=\"acpt-breadcrumbs\">\n            {crumbs.length > 0 && (\n                <ul>\n                    {crumbs.map((crumb, index) => (\n                        <Breadcrumb\n                            label={crumb.label}\n                            link={crumb.link}\n                            isLast={(index+1) === crumbs.length}\n                            key={index}\n                        />\n                    ))}\n                </ul>\n            )}\n        </div>\n    );\n};\n\nexport default Breadcrumbs;","import {wpAjaxRequest} from \"../../utils/ajax\";\nimport {assocTaxonomyToPostFailure, assocTaxonomyToPostInProgress, assocTaxonomyToPostSuccess} from \"../actions/assocTaxonomyToPostActions\";\n\nexport const assocTaxonomyToPostType = (postType, taxonomies) => async (dispatch, getState) => {\n    try {\n        dispatch(assocTaxonomyToPostInProgress());\n        const res = await wpAjaxRequest(\"assocTaxonomyToPostTypeAction\", {postType:postType, taxonomies:taxonomies});\n        (res.success === true) ? dispatch(assocTaxonomyToPostSuccess()) : dispatch(assocTaxonomyToPostFailure(res.error)) ;\n    } catch (e) {\n        console.log(e);\n        dispatch(assocTaxonomyToPostFailure(e));\n    }\n};","import {wpAjaxRequest} from \"../../utils/ajax\";\nimport {fetchPostTypesFailure, fetchPostTypesInProgress, fetchPostTypesSuccess} from \"../actions/fetchCustomPostTypesActions\";\n\nexport const fetchPostTypes = (meta) => async (dispatch, getState) => {\n    try {\n        dispatch(fetchPostTypesInProgress(meta));\n        const fetched = await wpAjaxRequest('fetchCustomPostTypesAction', meta ? meta : {} );\n        dispatch(fetchPostTypesSuccess(fetched));\n    } catch ( e ) {\n        dispatch(fetchPostTypesFailure(e));\n    }\n};\n","import {wpAjaxRequest} from \"../../utils/ajax\";\nimport {fetchTaxonomiesFailure, fetchTaxonomiesInProgress, fetchTaxonomiesSuccess} from \"../actions/fetchTaxonomiesActions\";\n\nexport const fetchTaxonomies = (meta) => async (dispatch, getState) => {\n    try {\n        dispatch(fetchTaxonomiesInProgress(meta));\n        const fetched = await wpAjaxRequest('fetchTaxonomiesAction', meta ? meta : {} );\n        dispatch(fetchTaxonomiesSuccess(fetched));\n    } catch ( e ) {\n        dispatch(fetchTaxonomiesFailure(e));\n    }\n};\n","/**\n * Change document's <title>\n * @param title\n */\nexport const metaTitle = (title) => {\n    const originalDocumentTitle = document.title.split(\"‹\");\n    document.title = `${title} ‹ ${originalDocumentTitle[1]}`;\n};\n\n/**\n * Add current class to admin menu link\n * @param link\n */\nexport const changeCurrentAdminMenuLink = (link) => {\n\n    const menuWrapper = document.querySelector('#toplevel_page_advanced-custom-post-type-lite .wp-submenu');\n\n    menuWrapper.childNodes.forEach((currentValue, currentIndex, listObj) => {\n        const links = currentValue.getElementsByTagName('a');\n\n        for(let i = 0; i < links.length; i++) {\n            let elem = links[i];\n            let href = elem.getAttribute(\"href\");\n            let toCompare = 'admin.php?page=advanced-custom-post-type-lite'+link;\n\n            if( toCompare === href ){\n                currentValue.classList.add(\"current\");\n            } else {\n                currentValue.classList.remove(\"current\");\n            }\n        }\n    });\n};\n\nexport const refreshPage = (timeout = 0) => {\n    setTimeout(function () {\n        window.location.reload();\n    }, timeout);\n};"],"sourceRoot":""}