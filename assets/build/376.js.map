{"version":3,"sources":["webpack://advanced-custom-post-type-lite/./assets/src/App/components/CopyElement/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/Forms/BelongCondition.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/Forms/BelongConditions.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/Forms/InputDebounced.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/Forms/SelectMulti.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/Tabs/Tab.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/Tabs/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/constants/metaTypes.js","webpack://advanced-custom-post-type-lite/./assets/src/App/hooks/useConfirmTabClose.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/BulkActions/ElementSelector.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/BulkActions/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/ListView/QuickNavigation/QuickNavigationBlock.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/ListView/QuickNavigation/QuickNavigationBox.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/ListView/QuickNavigation/QuickNavigationField.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/ListView/QuickNavigation/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/ListView/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/MetaBox/HorizontalSortableMetaFields/HorizontalSortableMetaFieldTab.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/MetaBox/HorizontalSortableMetaFields/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/MetaBox/MetaBoxHeader.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/MetaBox/VerticalSortableMetaFields/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/MetaBox/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/MetaField/MetaFieldHeader.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/MetaField/Tabs/BasicTab/MetaOptionList/MetaOption.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/MetaField/Tabs/BasicTab/MetaOptionList/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/MetaField/Tabs/BasicTab/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/MetaField/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/MetaGroupHeader.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/MetaGroupSettings.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/Modal/CopyMetaBlocksModal.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/Modal/CopyMetaBoxModal.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/Modal/CopyMetaBoxesModal.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/Modal/CopyMetaFieldModal.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/Modal/CopyMetaFieldsModal.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/Modal/DeleteAllMetaBoxesModal.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/Modal/DeleteMetaBoxModal.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/Modal/DeleteMetaFieldModal.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/Modal/DeleteMetaOptionModal.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/Modal/MetaFieldShortCodeModal.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/TabularView/BoxSortableTab.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/TabularView/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Meta/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/utils/debounce.js","webpack://advanced-custom-post-type-lite/./assets/src/App/utils/validation.js"],"names":["CopyElement","text","testId","e","preventDefault","toast","success","propTypes","PropTypes","string","isRequired","BelongCondition","id","control","register","errors","belong","handleDeleteBelong","values","isLast","index","resetField","setValue","clearErrors","format","state","fetchMeta","group","data","formId","value","watchedBelongsTo","name","watchedOperator","watchedFind","belongsTo","findValues","belongs","findDefaultValues","split","label","options","metaTypes","CUSTOM_POST_TYPE","TAXONOMY","OPTION_PAGE","USER","operators","logics","isDisabled","validate","required","number","object","func","bool","oneOf","BelongConditions","handleAddBelong","conditions","parent","length","map","belongIndex","styleVariants","WARNING","SECONDARY","array","append","unregister","InputDebounced","type","size","placeholder","defaultValue","description","step","min","max","readOnly","onClick","onChangeCapture","disabled","debounceTime","field","onChange","onBlur","ref","fieldState","invalid","isTouched","isDirty","error","target","message","innerRef","SelectMulti","maxItems","currentValues","setCurrentValues","dropdownOpen","setDropdownOpen","searchTerm","setSearchTerm","renderItems","renderLabel","filterValue","filter","v","filterOptValue","o","toString","stopPropagation","val","newArray","renderClearAll","renderDropdown","renderListElements","elements","element","findIndex","Tab","title","children","Tabs","handleClick","defaultActiveTab","activeTab","setActiveTab","handleSetActiveTable","child","props","arrayOf","META","useConfirmTabClose","isUnsafeTabClose","confirmationMessage","handleBeforeUnload","event","returnValue","window","addEventListener","removeEventListener","ElementSelector","elementType","dispatch","metaState","selectedElements","isSelected","el","top","selected","checked","BulkActions","view","setFieldTab","setBoxTab","setBlockTab","selectedElementsType","getValues","watchedBoxes","action","setAction","copyBoxesModalVisible","setCopyBoxesModalVisible","copyFieldsModalVisible","setCopyFieldsModalVisible","copyBlocksModalVisible","setCopyBlocksModalVisible","executeAction","boxIndex","b","watchedBox","duplicatedBox","push","block","boxId","duplicatedBlock","parentFieldId","savedValues","duplicatedField","parentBlockId","blocks","f","blockId","fields","fieldId","current","WHITE","QuickNavigationBlock","level","fieldIndex","blockIndex","parentField","watchedBlockName","boxes","DANGER","childIndex","QuickNavigationBox","box","watchedBoxName","documentGlobals","document","globals","isClosed","setIsClosed","is_rtl","QuickNavigationField","watchedFieldName","QuickNavigation","ListView","setView","closedElements","newGroupId","settingsVisible","setSettingsVisible","move","handleDragEnd","active","over","oldIndex","newIndex","sortedBoxes","showHideAllFields","ids","height","HorizontalSortableMetaFieldTab","isActive","parentFieldIndex","watchedFieldType","attributes","listeners","setNodeRef","transform","style","CSS","Translate","canCopyTheField","isSaved","maxWidth","HorizontalSortableMetaFields","addFieldEnabled","handleOnClick","onDragEnd","sortedFields","handleAddField","fieldTypes","TEXT","showInArchive","quickEdit","filterableInAdmin","sort","advancedOptions","validationRules","visibilityConditions","hasManyRelation","parentId","isATextualField","isFilterable","MetaBoxHeader","formState","watchedName","watchedLabel","formVisible","setFormVisible","autoSlug","setAutoSlug","checkIfNameIsValid","slugified","otherBoxNames","i","includes","boxName","res","exists","handleToggleClose","canCopyTheBox","onChangeLabel","maxLength","alphanumericallyValid","then","VerticalSortableMetaFields","MetaBox","MetaFieldHeader","watchedType","watchedField","watchedShowInArchive","watchedFilterableInAdmin","watchedQuickEdit","watchedIsRequired","fieldType","showTheShortcode","REPEATER","FLEXIBLE","MetaOption","option","handleIsDefault","watchedValue","watchedIsDefault","linkedOption","setLinkedOption","isDefault","MetaOptionList","isMulti","handleAddOption","optionId","BasicTab","reset","watchedFields","nestingLevel","handleFieldTypeChange","updatedField","POST","relations","otherFieldNames","fieldName","SELECT_MULTI","CHECKBOX","MetaField","MetaGroupHeader","groupId","MetaGroupSettings","findBelongsValues","find","remove","newBelong","operator","logic","belongId","groupLabel","displayOptions","fieldGroupsDisplay","STANDARD","ACCORDION","HORIZONTAL_TABS","VERTICAL_TABS","display","CopyMetaBlocksModal","blockIds","modalOpen","setModalOpen","setGroup","setBoxes","setFields","targetFieldId","setTargetFieldId","deleteBlocks","setDeleteBlocks","handleGroupChange","catch","console","err","handleBoxChange","filteredFields","handleFieldChange","handleSubmit","blockIdsArray","delete","meta","g","PRIMARY","CopyMetaBoxModal","deleteBox","setDeleteBox","targetGroupId","CopyMetaBoxesModal","boxIds","deleteBoxes","setDeleteBoxes","boxIdsArray","CopyMetaFieldModal","targetEntityType","setTargetEntityType","targetEntityId","setTargetEntityId","deleteField","setDeleteField","nestableFields","CopyMetaFieldsModal","fieldIds","deleteFields","setDeleteFields","fieldIdsArray","DeleteAllMetaBoxesModal","buttons","SUCCESS","DeleteMetaBoxModal","DeleteMetaFieldModal","DeleteMetaOptionModal","optionIndex","MetaFieldShortCodeModal","formIdArray","loading","isLoading","shortCodes","setShortCodes","metaKey","setMetaKey","watchedBelongs","watchedFieldRootName","watchedParentBlock","watchedParentField","indexInfo","blockIndexInfo","fieldRootName","parentBlockName","parentFieldName","shortcodes","shortCode","BoxSortableTab","DISABLED","TabularView","activeBoxTab","setActiveBoxTab","handleTabChange","Meta","saveMeta","saveError","saveSuccess","saveLoading","searchParams","setSearchParams","isSubmitting","setIsSubmitted","hasUnsavedChanges","setHasUnsavedChanges","fetchError","setFetchError","navigate","methods","mode","handleAddBox","newBoxId","newBox","UIName","payload","get","newGroupName","newGroupLabel","newUuid","isSaveButtonEnabled","onSubmit","keepValues","keepIsSubmitted","actions","link","debounce","wait","immediate","timeout","previous","args","result","context","later","passed","now","setTimeout","apply","debounced","restArguments","_args","cancel","clearTimeout","Date","getTime","startIndex","Math","arguments","rest","Array","call","matches","match","isPostTypeNameValid","post_name","asyncIsPostTypeNameValid","postType","isTaxonomySlugValid","slug","asyncIsTaxonomySlugValid","isAValidValueForThisType","COLOR","validColor","CURRENCY","validCurrency","DATE","validDate","EMAIL","validEmail","WEIGHT","LENGTH","NUMBER","validNumber","PHONE","validPhone","RADIO","SELECT","validSelect","TOGGLE","validToggle","URL","validURL","str","re","test","pattern","RegExp","forEach","validWPGraphQLName","validateGoogleMapsApiKey","key","regx"],"mappings":"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","file":"376.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Icon} from \"@iconify/react\";\nimport {copyToTheClipboard} from \"../../utils/misc\";\nimport {toast} from \"react-hot-toast\";\nimport useTranslation from \"../../hooks/useTranslation\";\n\nconst CopyElement = ({text, testId}) => {\n\n    return (\n        <div className=\"acpt-copy-element\">\n            <input\n                data-cy={testId ? \"copy-element-\"+testId : null}\n                className=\"form-control\"\n                type=\"text\"\n                readOnly={true}\n                value={text}\n            />\n            <a\n                href=\"#\"\n                className=\"copy-element-link\"\n                onClick={e => {\n                    e.preventDefault();\n                    copyToTheClipboard(text);\n                    toast.success(useTranslation(\"Copied to clipboard\"));\n                }}\n            >\n                <Icon icon=\"bx:copy\" width={18} />\n            </a>\n        </div>\n    );\n};\n\nCopyElement.propTypes = {\n    testId: PropTypes.string,\n    text: PropTypes.string.isRequired,\n};\n\nexport default CopyElement;","import React, {useEffect} from \"react\";\nimport PropTypes from 'prop-types';\nimport Select from \"./Select\";\nimport useTranslation from \"../../hooks/useTranslation\";\nimport InputHidden from \"./InputHidden\";\nimport {Icon} from \"@iconify/react\";\nimport {metaTypes} from \"../../constants/metaTypes\";\nimport {useWatch} from \"react-hook-form\";\nimport {useSelector} from \"react-redux\";\nimport SelectMulti from \"./SelectMulti\";\nimport Tooltip from \"../Tooltip\";\n\nconst BelongCondition = ({id, control, register, errors, belong, handleDeleteBelong, values, isLast, index, resetField, setValue, clearErrors, format = 'all'}) => {\n\n    // manage global state\n    const {data: group} = useSelector(state => state.fetchMeta);\n\n    const formId = (value) => {\n        return `${id}.${index}.${value}`;\n    };\n\n    const watchedBelongsTo = useWatch({\n        control,\n        name: formId(\"belongsTo\")\n    });\n\n    const watchedOperator = useWatch({\n        control,\n        name: formId(\"operator\")\n    });\n\n    const watchedFind = useWatch({\n        control,\n        name: formId(\"find\")\n    });\n\n    useEffect(() => {\n        if(isLast){\n            resetField(formId(\"logic\"));\n        }\n    }, [isLast]);\n\n    useEffect(() => {\n        if(watchedBelongsTo !== belong.belongsTo){\n            resetField(formId(\"find\"));\n        }\n    }, [watchedBelongsTo]);\n\n    useEffect(() => {\n        if(!watchedOperator){\n            setValue(formId(\"operator\"), \"=\");\n        }\n    }, [watchedOperator]);\n\n    /**\n     *\n     * @return {*[]|*}\n     */\n    const findValues = () => {\n\n        if(watchedBelongsTo){\n            return values[watchedBelongsTo] ? values[watchedBelongsTo] : [];\n        }\n\n        if(group.belongs && group.belongs[index]){\n            return values[group.belongs[index].belongsTo] ? values[group.belongs[index].belongsTo] : [];\n        }\n\n        return [];\n    };\n\n    /**\n     *\n     * @return {string|array}\n     */\n    const findDefaultValues = () => {\n\n        if(watchedFind){\n            if(typeof watchedFind === 'string'){\n                return watchedFind.split(\",\");\n            }\n\n            return watchedFind;\n        }\n\n        return [];\n    };\n\n    /**\n     *\n     * @return {[{label: *, value: null}, {options: [{label: *, value: string}, {label: *, value: string}, {label: *, value: string}, {label: *, value: string}, {label: *, value: string}], label: *}, {options: [{label: *, value: string}, {label: *, value: string}], label: *}, {options: [{label: *, value: string}], label: *}, {options: [{label: *, value: string}, {label: *, value: string}], label: *}]|[{label: *, value: null}, {options: [{label: *, value: string}, {label: *, value: string}], label: *}, {options: [{label: *, value: string}, {label: *, value: string}], label: *}]}\n     */\n    const belongsTo = () => {\n\n        if(format === 'reduced'){\n            return [\n                {value: null, label: useTranslation(\"Select\")},\n                {\n                    label: useTranslation(\"Posts\"),\n                    options: [\n                        {value: metaTypes.CUSTOM_POST_TYPE, label: useTranslation(\"Post type\")},\n                        {value: \"POST_ID\", label: useTranslation(\"Post\")},\n                    ]\n                },\n                {\n                    label: useTranslation(\"Taxonomies\"),\n                    options: [\n                        {value: metaTypes.TAXONOMY, label: useTranslation(\"Taxonomy\")},\n                        {value: \"TERM_ID\", label: useTranslation(\"Term\")},\n                    ]\n                },\n            ];\n        }\n\n        return [\n            {value: null, label: useTranslation(\"Select\")},\n            {\n                label: useTranslation(\"Posts\"),\n                options: [\n                    {value: metaTypes.CUSTOM_POST_TYPE, label: useTranslation(\"Post type\")},\n                    {value: \"POST_ID\", label: useTranslation(\"Post\")},\n                    {value: \"POST_CAT\", label: useTranslation(\"Post category\")},\n                    {value: \"POST_TAX\", label: useTranslation(\"Post taxonomy\")},\n                    {value: \"POST_TEMPLATE\", label: useTranslation(\"Post template\")},\n                ]\n            },\n            {\n                label: useTranslation(\"Taxonomies\"),\n                options: [\n                    {value: metaTypes.TAXONOMY, label: useTranslation(\"Taxonomy\")},\n                    {value: \"TERM_ID\", label: useTranslation(\"Term\")},\n                ]\n            },\n            {\n                label: useTranslation(\"Option pages\"),\n                options: [\n                    {value: metaTypes.OPTION_PAGE, label: useTranslation(\"Option page\")},\n                ]\n            },\n            {\n                label: useTranslation(\"Users\"),\n                options: [\n                    {value: metaTypes.USER, label: useTranslation(\"All users\")},\n                    {value: \"USER_ID\", label: useTranslation(\"User\")},\n                ]\n            },\n        ];\n    };\n\n    const operators = [\n        {value: null, label: useTranslation(\"Select\")},\n        { value: \"=\", label: useTranslation('is equal to') },\n        { value: \"!=\", label: useTranslation('is not equal to') },\n        { value:\"IN\", label: useTranslation(\"is included in\") },\n        { value:\"NOT_IN\", label: useTranslation(\"is not included in\") },\n    ];\n\n    const logics = [\n        {value: null, label: useTranslation(\"Select\")},\n        {label:useTranslation(\"AND\"), value:\"AND\"},\n        {label:useTranslation(\"OR\"), value:\"OR\"},\n    ];\n\n    /**\n     *\n     * @return {boolean}\n     */\n    const isDisabled = () => {\n\n        if(watchedBelongsTo === metaTypes.USER){\n            return true;\n        }\n\n        return !watchedBelongsTo;\n    };\n\n    /**\n     *\n     * @return {{required: *}}\n     */\n    const validate = () => {\n        if(watchedBelongsTo === metaTypes.USER){\n            return {\n                required: false\n            };\n        }\n\n        return {\n            required: useTranslation(\"This field is mandatory\"),\n        };\n    };\n\n    return (\n        <div id={belong.id} className=\"i-flex-center s-8\">\n            <InputHidden\n                register={register}\n                id={formId(\"id\")}\n                value={belong.id}\n            />\n            <div className=\"w-100\">\n                <Select\n                    register={register}\n                    id={formId(\"belongsTo\")}\n                    values={belongsTo()}\n                    errors={errors}\n                    onChangeCapture={() => {\n                        resetField(formId(\"find\"));\n                        setValue(formId(\"find\"), []);\n                    }}\n                    validate={{\n                        required: useTranslation(\"This field is mandatory\"),\n                    }}\n                />\n            </div>\n            <div className=\"w-40\">\n                <Select\n                    muted={true}\n                    register={register}\n                    id={formId(\"operator\")}\n                    values={operators}\n                    defaultValue=\"=\"\n                    errors={errors}\n                    disabled={isDisabled()}\n                    validate={validate()}\n                />\n            </div>\n            <div className=\"w-100\">\n                {watchedOperator === 'IN' || watchedOperator === 'NOT_IN' ? (\n                    <SelectMulti\n                        register={register}\n                        id={formId(\"find\")}\n                        values={findValues()}\n                        errors={errors}\n                        disabled={isDisabled()}\n                        validate={validate()}\n                        setValue={setValue}\n                        clearErrors={clearErrors}\n                        defaultValue={findDefaultValues()}\n                    />\n                ) : (\n                    <Select\n                        register={register}\n                        id={formId(\"find\")}\n                        values={findValues()}\n                        errors={errors}\n                        disabled={isDisabled()}\n                        validate={validate()}\n                    />\n                )}\n            </div>\n            <div className=\"w-40\">\n                {!isLast && (\n                    <Select\n                        muted={true}\n                        register={register}\n                        id={formId(\"logic\")}\n                        values={logics}\n                        errors={errors}\n                        validate={{\n                            required: useTranslation(\"This field is mandatory\"),\n                        }}\n                    />\n                )}\n            </div>\n            <div>\n                <a\n                    href=\"#\"\n                    onClick={e => {\n                        e.preventDefault();\n                        handleDeleteBelong(index, belong.id);\n                    }}\n                >\n                    <Tooltip\n                        icon={false}\n                        tip={useTranslation(\"Delete\")}\n                        label={<Icon icon=\"bx-minus\"/>}\n                    />\n                </a>\n            </div>\n        </div>\n    );\n};\n\nBelongCondition.propTypes = {\n    id: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    belong: PropTypes.object.isRequired,\n    register: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n    isLast: PropTypes.bool.isRequired,\n    handleDeleteBelong: PropTypes.func.isRequired,\n    resetField: PropTypes.func.isRequired,\n    setValue: PropTypes.func.isRequired,\n    clearErrors: PropTypes.func.isRequired,\n    format: PropTypes.oneOf([\n        'all',\n        'reduced',\n    ]),\n};\n\nexport default BelongCondition;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport useTranslation from \"../../hooks/useTranslation\";\nimport Button from \"../Button\";\nimport {styleVariants} from \"../../constants/styles\";\nimport Alert from \"../Alert\";\nimport BelongCondition from \"./BelongCondition\";\nimport {isEmpty} from \"../../utils/objects\";\nimport {useAutoAnimate} from \"@formkit/auto-animate/react\";\n\nconst BelongConditions = ({id, control, register, handleAddBelong, handleDeleteBelong, conditions, values, errors, resetField, setValue, clearErrors, format='all'}) => {\n\n    // auto-animate\n    const [parent] = useAutoAnimate();\n\n    return (\n        <React.Fragment>\n            <div\n                className={`mb-12 ${!isEmpty(values) && conditions && conditions.length > 0 ? \"flex-column s-12\" : \"\"}`}\n                ref={parent}\n            >\n                {!isEmpty(values) && conditions && conditions.length > 0 ? (\n                    <React.Fragment>\n                        {conditions.map((belong, belongIndex) => (\n                            <BelongCondition\n                                id={id}\n                                format={format}\n                                register={register}\n                                errors={errors}\n                                control={control}\n                                belong={belong}\n                                index={belongIndex}\n                                handleDeleteBelong={handleDeleteBelong}\n                                values={values}\n                                isLast={belongIndex === (conditions.length-1)}\n                                resetField={resetField}\n                                setValue={setValue}\n                                clearErrors={clearErrors}\n                            />\n                        ))}\n                    </React.Fragment>\n                ) : (\n                    <Alert style={styleVariants.WARNING}>\n                        {useTranslation(\"No conditions are present, click on \\\"Add condition\\\" button to add the first one.\")}\n                    </Alert>\n                )}\n            </div>\n            <Button\n                type=\"button\"\n                style={styleVariants.SECONDARY}\n                onClick={() => {\n                    handleAddBelong()\n                }}\n            >\n                {useTranslation(\"Add condition\")}\n            </Button>\n        </React.Fragment>\n    )\n};\n\nBelongConditions.propTypes = {\n    id: PropTypes.string.isRequired,\n    values: PropTypes.array.isRequired,\n    append: PropTypes.func.isRequired,\n    register: PropTypes.func.isRequired,\n    unregister: PropTypes.func.isRequired,\n    resetField: PropTypes.func.isRequired,\n    conditions: PropTypes.array.isRequired,\n    errors: PropTypes.array.isRequired,\n    handleDeleteBelong: PropTypes.func.isRequired,\n    handleAddBelong: PropTypes.func.isRequired,\n    setValue: PropTypes.func.isRequired,\n    clearErrors: PropTypes.func.isRequired,\n    format: PropTypes.oneOf([\n        'all',\n        'reduced',\n    ]),\n};\n\nexport default BelongConditions;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Controller} from 'react-hook-form';\nimport useTranslation from \"../../hooks/useTranslation\";\nimport {debounce} from \"../../utils/debounce\";\n\nconst InputDebounced = ({type = 'text', size= 'default', placeholder, id, defaultValue, description, step, min, max, readOnly, onClick, onChangeCapture, validate, control, disabled = false, debounceTime = 1000}) => {\n\n    return (\n        <React.Fragment>\n            <Controller\n                render={({\n                     field: { onChange, onBlur, value, name, ref },\n                     fieldState: { invalid, isTouched, isDirty, error }\n                 }) => (\n                    <React.Fragment>\n                        <input\n                            type={type}\n                            disabled={disabled}\n                            min={min ? min : 0}\n                            max={max}\n                            step={step ? min : 1}\n                            readOnly={readOnly}\n                            aria-invalid={error ? \"true\" : \"false\"}\n                            id={name}\n                            name={name}\n                            ref={ref}\n                            placeholder={useTranslation(\"The field label, non latin characters are allowed\")}\n                            className={`form-control ${error ? 'has-errors': ''}`}\n                            onChange={debounce((e) => {\n                                onChangeCapture(e.target.value);\n                                onChange(e.target.value);\n                            }, debounceTime)}\n                            onBlur={onBlur}\n                            defaultValue={value}\n                            onClick={onClick}\n                        />\n                        {error && <div className=\"invalid-feedback\">{error.message}</div>}\n                    </React.Fragment>\n                )}\n                control={control}\n                id={id}\n                name={id}\n                defaultValue={defaultValue}\n                rules={validate}\n            />\n        </React.Fragment>\n    );\n};\n\nInputDebounced.propTypes = {\n    id: PropTypes.string.isRequired,\n    size: PropTypes.oneOf([\n        'default',\n        'sm',\n    ]),\n    innerRef: PropTypes.func,\n    placeholder: PropTypes.string,\n    defaultValue: PropTypes.string,\n    description: PropTypes.string,\n    readOnly: PropTypes.bool,\n    min: PropTypes.number,\n    max: PropTypes.number,\n    step: PropTypes.number,\n    onChangeCapture: PropTypes.func,\n    validate: PropTypes.func,\n    control: PropTypes.func.isRequired,\n    disabled: PropTypes.bool,\n    type: PropTypes.oneOf([\n        'text',\n        'email',\n        'number',\n        'tel',\n        'url',\n        'date',\n        'time',\n    ]),\n\n};\n\nexport default InputDebounced;","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {get} from 'react-hook-form';\nimport {isIterable} from '../../utils/objects';\nimport useTranslation from \"../../hooks/useTranslation\";\nimport {likeThat} from \"../../utils/strings\";\n\nconst SelectMulti = ({placeholder, id, disabled = false, defaultValue, description, values, validate, register, errors, setValue, clearErrors, maxItems}) => {\n\n    const error = get(errors, id);\n\n    const [currentValues, setCurrentValues] = useState((defaultValue && isIterable(defaultValue)) ? defaultValue : []);\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n    const [searchTerm, setSearchTerm] = useState('');\n\n    /**\n     *\n     * @return {*}\n     */\n    const renderItems = () => {\n        if(currentValues.length > 0){\n            return (\n                <React.Fragment>\n                    {currentValues.map((value) => {\n\n                        /**\n                         *\n                         * @return {*}\n                         */\n                        const renderLabel = () => {\n\n                            const filterValue = values.filter(v => {\n\n                                if(v.options){\n                                    const filterOptValue = v.options.filter(o => o.value.toString() === value.toString());\n\n                                    return filterOptValue.length === 1;\n                                }\n\n                                return v.value === value;\n                            });\n\n                            if(filterValue.length === 1){\n                                if(filterValue[0].options){\n                                    const filterOptValue = filterValue[0].options.filter(o => o.value.toString() === value.toString());\n\n                                    if(filterOptValue.length === 1){\n                                        return filterOptValue[0].label;\n                                    }\n                                }\n\n                                return filterValue[0].label;\n                            }\n\n                            return value;\n                        };\n\n                        return (\n                            <span className=\"item\">\n                                <span className=\"label\">\n                                    {renderLabel()}\n                                </span>\n                                <a\n                                    href=\"#\"\n                                    className=\"close-item\"\n                                    onClick={e => {\n                                        e.preventDefault();\n                                        e.stopPropagation();\n\n                                        if(!disabled){\n                                            setCurrentValues((val) => {\n                                                const newArray = val.filter(v => v !== value);\n\n                                                setValue(id, newArray);\n                                                setDropdownOpen(false);\n\n                                                if(error){\n                                                    clearErrors(id);\n                                                }\n\n                                                return newArray;\n                                            });\n                                        }\n                                    }}\n                                >\n                                    &times;\n                                </a>\n                            </span>\n                        );\n                    })}\n                </React.Fragment>\n            );\n        }\n\n        return <span>{placeholder ? placeholder : useTranslation('Select items')}</span>;\n    };\n\n    /**\n     *\n     * @return {*}\n     */\n    const renderClearAll = () =>  {\n        return (\n            <a\n                href=\"#\"\n                className=\"close\"\n                onClick={e => {\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    if(!disabled){\n                        setCurrentValues((val) => {\n                            setValue(id, []);\n                            clearErrors(id);\n                            setDropdownOpen(false);\n\n                            return [];\n                        });\n                    }\n                }}\n            >\n                &times;\n            </a>\n        );\n    };\n\n    /**\n     *\n     * @return {*}\n     */\n    const renderDropdown = () => {\n\n        if(maxItems && currentValues.length >= maxItems){\n            return null;\n        }\n\n        return (\n            <div className=\"select-items\">\n                <div className=\"search-box\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder={useTranslation(\"Filter items\")}\n                        defaultValue={searchTerm}\n                        onChange={e => {\n                            setSearchTerm(e.target.value);\n                        }}\n                    />\n                </div>\n                <ul\n                    tabIndex={0}\n                    className=\"select-items-list\"\n                >\n                    {renderListElements(values)}\n                </ul>\n            </div>\n        );\n    };\n\n    /**\n     *\n     * @param elements\n     */\n    const renderListElements = (elements) => {\n        return elements\n            .filter((element) => {\n                if(searchTerm !== '' && element.value && element.label){\n                    return (\n                        likeThat(element.value, searchTerm) ||\n                        likeThat(element.label, searchTerm)\n                    );\n                }\n\n                return true;\n            })\n            .filter((element) => {\n                if(element.value){\n                    return currentValues.findIndex(v => v === element.value) === -1;\n                }\n\n                return true;\n            })\n            .map((element, index) => {\n\n                if(element.options){\n                    return (\n                        <React.Fragment>\n                            <li className=\"optgroup\">\n                                {element.label}\n                            </li>\n                            {renderListElements(element.options)}\n                        </React.Fragment>\n                    );\n                }\n\n                return (\n                    <li\n                        key={index}\n                        tabIndex={index+1}\n                        className=\"select-item\"\n                        onClick={() => {\n                            setCurrentValues((val) => {\n                                const newArray = [...val, element.value];\n                                setValue(id, newArray);\n                                setDropdownOpen(!dropdownOpen);\n\n                                if(error){\n                                    clearErrors(id);\n                                }\n\n                                return newArray;\n                            });\n                        }}\n                    >\n                        {element.label}\n                    </li>\n                );\n            })\n    };\n\n    return (\n        <React.Fragment>\n            <div className=\"acpt-select-multi\">\n                <input\n                    id={id}\n                    name={id}\n                    type=\"hidden\"\n                    defaultValue={currentValues}\n                    {...register(id, validate)}\n                />\n                <div\n                    className={`placeholder ${error ? 'has-errors': ''} ${disabled ? 'disabled' : ''}`}\n                    onClick={() => {\n                        if(!disabled){\n                            setDropdownOpen(!dropdownOpen);\n                        }\n                    }}\n                >\n                    <div className=\"items\">{renderItems()}</div>\n                    {!dropdownOpen && currentValues.length > 0 && renderClearAll()}\n                    <div className=\"divider\"/>\n                    <div className=\"caret\"/>\n                </div>\n                {dropdownOpen && renderDropdown()}\n            </div>\n            {error && <div className=\"invalid-feedback\">{error.message}</div>}\n            {description && (\n                <div className=\"form-description\">{description}</div>\n            )}\n        </React.Fragment>\n    );\n};\n\nSelectMulti.propTypes = {\n    id: PropTypes.string.isRequired,\n    placeholder: PropTypes.string,\n    defaultValue: PropTypes.array,\n    description: PropTypes.string,\n    disabled: PropTypes.bool,\n    values: PropTypes.array.isRequired,\n    validate: PropTypes.func,\n    register: PropTypes.func.isRequired,\n    setValue: PropTypes.func.isRequired,\n    clearErrors: PropTypes.func.isRequired,\n    errors: PropTypes.array.isRequired,\n    maxItems: PropTypes.number\n};\n\nexport default SelectMulti;","import React from 'react';\nimport PropTypes from \"prop-types\";\n\nconst Tab = ({title, children}) => {\n    return (\n        <div>\n            {children}\n        </div>\n    );\n};\n\nTab.propTypes = {\n    title: PropTypes.string.isRequired,\n};\n\nexport default Tab;","import React, {useEffect, useState} from 'react';\nimport PropTypes from \"prop-types\";\nimport Tab from \"./Tab\";\nimport {randomAlphabeticString} from \"../../utils/strings\";\n\nconst Tabs = ({handleClick, defaultActiveTab = 0, children}) => {\n\n    // manage local state\n    const [activeTab, setActiveTab] = useState(defaultActiveTab);\n    const id = randomAlphabeticString();\n\n    const handleSetActiveTable = (index) => {\n        setActiveTab(index);\n\n        if(handleClick){\n            handleClick(index);\n        }\n    };\n\n    useEffect(()=>{\n        setActiveTab(defaultActiveTab);\n    },[defaultActiveTab]);\n\n    return (\n        <div className=\"acpt-tabs\" id={`tabs-${id}`}>\n            {children && children.length > 0 && (\n                <React.Fragment>\n                    <ul\n                        role=\"tablist\"\n                        className=\"tablist\"\n                    >\n                        {children.map((child, index) => {\n\n                            if(!child){\n                                return null;\n                            }\n\n                            return (\n                                <li\n                                    data-cy={`tab-${id}-${index+1}`}\n                                    id={`tab-${id}-${index+1}`}\n                                    aria-selected={activeTab === index}\n                                    aria-controls={`tabpanel-${id}-${index+1}`}\n                                    tabIndex={index+1}\n                                    role=\"tab\"\n                                    className={`acpt-accordion-tab ${activeTab === index ? 'active' : ''}`}\n                                    key={index}\n                                    onClick={e => handleSetActiveTable(index)}\n                                >\n                                    {(child.props && child.props.title) ? child.props.title : `Tab ${index+1}`}\n                                </li>\n                            );\n\n                        })}\n                    </ul>\n                    <div\n                        data-cy={`tabpanel-${id}-${activeTab+1}`}\n                        id={`tabpanel-${id}-${activeTab+1}`}\n                        className=\"tab-panel\"\n                        role=\"tabpanel\"\n                        tabIndex={activeTab+1}\n                        aria-labelledby={`tab-${id}-${activeTab+1}`}\n                    >\n                        {children[activeTab]}\n                    </div>\n                </React.Fragment>\n            )}\n        </div>\n    );\n};\n\nTabs.propTypes = {\n    handleClick: PropTypes.func,\n    defaultActiveTab: PropTypes.number,\n    children: PropTypes.arrayOf(Tab)\n};\n\nexport default Tabs;\n","export const metaTypes = {\n    CUSTOM_POST_TYPE: \"customPostType\",\n    META: \"meta\",\n    OPTION_PAGE: \"optionPage\",\n    TAXONOMY: \"taxonomy\",\n    USER: \"user\"\n};\n","import {useEffect} from \"react\";\n\nexport const useConfirmTabClose = (isUnsafeTabClose) => {\n\n    const confirmationMessage = 'You have unsaved changes. Continue?';\n\n    useEffect(() => {\n        const handleBeforeUnload = (event) => {\n            if (isUnsafeTabClose) {\n                event.returnValue = confirmationMessage;\n                return confirmationMessage;\n            }\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n        return () =>\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n    }, [isUnsafeTabClose]);\n};","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {selectElement} from \"../../../redux/reducers/metaStateSlice\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Tooltip from \"../../../components/Tooltip\";\n\nconst ElementSelector = ({element, elementType}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {selectedElements} = useSelector(state => state.metaState);\n    /**\n     *\n     * @return {boolean}\n     */\n    const isSelected = () => {\n        const filter = selectedElements.filter(el => el.id === element.id );\n\n        return filter.length > 0\n    };\n\n    return (\n        <Tooltip\n            label={\n                <label className=\"checkbox\" htmlFor={`select-${element.id}`} style={{top: \"3px\"}}>\n                    <input\n                        id={`select-${element.id}`}\n                        type=\"checkbox\"\n                        checked={isSelected()}\n                        onChange={e => {\n                            dispatch(selectElement({\n                                    element: element,\n                                    selected: e.target.checked,\n                                    type: elementType\n                                }\n                            ));\n                        }}\n                    />\n                    <span/>\n                </label>\n            }\n            icon={false}\n            tip={useTranslation(isSelected() ? \"Deselect this element\" : \"Select this element\")}\n        />\n    );\n};\n\nElementSelector.propTypes = {\n    element: PropTypes.object.isRequired,\n    elementType: PropTypes.oneOf([\n        \"box\",\n        \"block\",\n        \"field\"\n    ]).isRequired,\n};\n\nexport default ElementSelector;\n\n","import React, {useRef, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport Button from \"../../../components/Button\";\nimport {cloneBlock, cloneBox, cloneField} from \"../../../utils/cloners\";\nimport {\n    addBlock,\n    addBox,\n    addField,\n    deleteBlock,\n    deleteBox,\n    deleteField,\n    deselectAllElements\n} from \"../../../redux/reducers/metaStateSlice\";\nimport {useFormContext, useWatch} from \"react-hook-form\";\nimport {getFormId, hydrateElement} from \"../../../utils/fields\";\nimport PropTypes from \"prop-types\";\nimport CopyMetaBoxesModal from \"../Modal/CopyMetaBoxesModal\";\nimport CopyMetaFieldsModal from \"../Modal/CopyMetaFieldsModal\";\nimport CopyMetaBlocksModal from \"../Modal/CopyMetaBlocksModal\";\n\nconst BulkActions = ({view, setFieldTab, setBoxTab, setBlockTab}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {selectedElements, selectedElementsType} = useSelector(state => state.metaState);\n\n    // manage form state\n    const { control, setValue, getValues } = useFormContext();\n    const watchedBoxes = useWatch({\n        control,\n        name: \"boxes\"\n    });\n\n    // manage local state\n    const ref = useRef(null);\n    const [action, setAction] = useState(null);\n    const [copyBoxesModalVisible, setCopyBoxesModalVisible] = useState(false);\n    const [copyFieldsModalVisible, setCopyFieldsModalVisible] = useState(false);\n    const [copyBlocksModalVisible, setCopyBlocksModalVisible] = useState(false);\n\n    const executeAction = () => {\n        selectedElements.map((element) => {\n            switch (action) {\n\n                // copy\n                case \"copy\":\n                    if(selectedElementsType === 'box'){\n                        setCopyBoxesModalVisible(!copyBoxesModalVisible);\n                    } else if(selectedElementsType === 'block'){\n                        setCopyBlocksModalVisible(!copyBlocksModalVisible);\n                    } else {\n                        setCopyFieldsModalVisible(!copyFieldsModalVisible);\n                    }\n                    break;\n\n                // duplicate\n                case \"duplicate\":\n                    if(selectedElementsType === 'box'){\n                        const boxIndex =  watchedBoxes.findIndex((b) => b.id === element.id);\n                        const watchedBox = watchedBoxes[boxIndex];\n                        const duplicatedBox = cloneBox(watchedBox);\n\n                        watchedBoxes.push(duplicatedBox);\n                        setValue(\"boxes\", watchedBoxes);\n                        dispatch(addBox(duplicatedBox));\n                    } else if(selectedElementsType === 'block'){\n                        const block = hydrateElement(watchedBoxes, element.boxId, element.id);\n                        const duplicatedBlock = cloneBlock(element.boxId, element.parentFieldId, block);\n                        const formId = getFormId(watchedBoxes, element.boxId, element.id, false);\n                        const savedValues = getValues(formId);\n\n                        savedValues.push(duplicatedBlock);\n                        setValue(formId, savedValues);\n\n                        dispatch(addBlock({\n                            boxId: element.boxId,\n                            parentFieldId: element.parentFieldId,\n                            block: duplicatedBlock\n                        }));\n\n                    } else {\n                        const field = hydrateElement(watchedBoxes, element.boxId, element.id);\n                        const duplicatedField = cloneField(element.boxId, field);\n                        const formId = getFormId(watchedBoxes, element.boxId, element.id, false);\n                        const savedValues = getValues(formId);\n\n                        savedValues.push(duplicatedField);\n                        setValue(formId, savedValues);\n\n                        dispatch(addField({\n                            boxId: element.boxId,\n                            field: duplicatedField,\n                            parentFieldId: element.parentFieldId,\n                            parentBlockId: element.parentBlockId\n                        }));\n                    }\n\n                    break;\n\n                // delete\n                case \"delete\":\n                    if(selectedElementsType === 'box'){\n                        setValue(\"boxes\", watchedBoxes.filter(b => b.id !== element.id));\n\n                        if(setBoxTab){\n                            setBoxTab(0);\n                        }\n\n                        dispatch(deleteBox(element.id));\n                    } else if(selectedElementsType === 'block'){\n                        const formId = getFormId(watchedBoxes, element.boxId, element.id, false);\n                        const blocks = getValues(formId).filter(f => f.id !== element.id);\n\n                        setValue(formId, blocks);\n\n                        if(setBlockTab){\n                            setBlockTab(0);\n                        }\n\n                        dispatch(deleteBlock({\n                            boxId: element.boxId,\n                            parentFieldId: element.parentFieldId,\n                            blockId: element.id\n                        }));\n\n                    } else {\n                        const formId = getFormId(watchedBoxes, element.boxId, element.id, false);\n                        const fields = getValues(formId).filter(f => f.id !== element.id);\n\n                        setValue(formId, fields);\n\n                        if(setFieldTab){\n                            setFieldTab(0);\n                        }\n\n                        dispatch(deleteField({\n                            boxId: element.boxId,\n                            fieldId: element.id,\n                            parentFieldId: element.parentFieldId,\n                            parentBlockId: element.parentBlockId\n                        }));\n                    }\n\n                    break;\n            }\n        });\n\n        if(action === 'delete' || action === 'duplicate'){\n            dispatch(deselectAllElements());\n        }\n\n        ref.current.value = \"\";\n    };\n\n    return (\n        <React.Fragment>\n            <CopyMetaBoxesModal\n                boxIds={selectedElements}\n                modalOpen={copyBoxesModalVisible}\n                setModalOpen={setCopyBoxesModalVisible}\n            />\n            <CopyMetaFieldsModal\n                fieldIds={selectedElements}\n                modalOpen={copyFieldsModalVisible}\n                setModalOpen={setCopyFieldsModalVisible}\n            />\n            <CopyMetaBlocksModal\n                blockIds={selectedElements}\n                modalOpen={copyBlocksModalVisible}\n                setModalOpen={setCopyBlocksModalVisible}\n            />\n            {selectedElements.length > 0 && (\n                <div className={`flex-between ${view === 'tab' ? 'mb-24' : ''}`}>\n                    <div>\n                        {selectedElements.length} {useTranslation(\"Selected items\")}\n                    </div>\n                    <div className=\"i-flex-center s-8\">\n                        <select\n                            ref={ref}\n                            className=\"form-control sm\"\n                            onChange={e => {\n                                setAction(e.target.value !== \"\" ? e.target.value : null);\n                            }}\n                        >\n                            <option value=\"\">{useTranslation(\"Select\")}</option>\n                            <option value=\"copy\">{useTranslation(\"Copy\")}</option>\n                            <option value=\"duplicate\">{useTranslation(\"Duplicate\")}</option>\n                            <option value=\"delete\">{useTranslation(\"Delete\")}</option>\n                        </select>\n                        <Button\n                            style={styleVariants.WHITE}\n                            size=\"sm\"\n                            disabled={action === null}\n                            onClick={(e)=>{\n                                e.preventDefault();\n                                executeAction();\n                            }}\n                        >\n                            {useTranslation(\"Execute\")}\n                        </Button>\n                    </div>\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nBulkActions.propTypes = {\n    view: PropTypes.oneOf([\n        \"tab\",\n        \"list\"\n    ]).isRequired,\n    setBoxTab: PropTypes.func,\n    setFieldTab: PropTypes.func,\n    setBlockTab: PropTypes.func,\n};\n\nexport default BulkActions;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport Badge from \"../../../../components/Badge\";\nimport {styleVariants} from \"../../../../constants/styles\";\nimport {useFormContext, useWatch} from \"react-hook-form\";\nimport {scrollToId} from \"../../../../utils/scroll\";\nimport {getFormId} from \"../../../../utils/fields\";\nimport {useSelector} from \"react-redux\";\nimport QuickNavigationField from \"./QuickNavigationField\";\n\nconst QuickNavigationBlock = ({level, boxIndex, fieldIndex, blockIndex, boxId, parentField, block}) => {\n\n    // manage global state\n    const {group} = useSelector(state => state.metaState);\n\n    // manage form state\n    const { control } = useFormContext();\n    const watchedBlockName = useWatch({\n        control,\n        name: `${getFormId(group.boxes, boxId, parentField.id)}.blocks.${blockIndex}.name`\n    });\n\n    return (\n        <React.Fragment>\n            <div key={block.id} className={`tree-el flex-between s-8`} style={{\"--level\": level}}>\n                <span\n                    className={`cursor-pointer text-ellipsis`}\n                    onClick={(e) => {\n                        e.preventDefault();\n                        scrollToId(block.id);\n                    }}\n                >\n                    {watchedBlockName ? watchedBlockName : block.name}\n                </span>\n                <Badge style={styleVariants.DANGER}>\n                    B\n                </Badge>\n            </div>\n            {block.fields && block.fields.length > 0 && block.fields.map((child, childIndex) => (\n                <QuickNavigationField\n                    level={level+1}\n                    boxIndex={boxIndex}\n                    fieldIndex={childIndex}\n                    boxId={boxId}\n                    parentField={parentField}\n                    field={child}\n                />\n            ))}\n        </React.Fragment>\n    );\n};\n\nQuickNavigationBlock.propTypes = {\n    level: PropTypes.number.isRequired,\n    boxIndex: PropTypes.number.isRequired,\n    fieldIndex: PropTypes.number.isRequired,\n    blockIndex: PropTypes.number.isRequired,\n    boxId: PropTypes.string.isRequired,\n    block: PropTypes.object.isRequired,\n    parentField: PropTypes.object.isRequired,\n};\n\nexport default QuickNavigationBlock;","import React, {useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport QuickNavigationField from \"./QuickNavigationField\";\nimport {Icon} from \"@iconify/react\";\nimport {useFormContext, useWatch} from \"react-hook-form\";\nimport {scrollToId} from \"../../../../utils/scroll\";\n\nconst QuickNavigationBox = ({index, box}) => {\n\n    const { control } = useFormContext();\n    const watchedBoxName = useWatch({\n        control,\n        name: `boxes.${index}.name`\n    });\n\n    const documentGlobals = document.globals;\n    const globals = documentGlobals.globals;\n\n    const [isClosed, setIsClosed] = useState(false);\n\n    return (\n        <div key={box.id} className=\"b-rounded with-shadow bg-white p-24\">\n            <h3 className={`${(!isClosed && box.fields.length > 0) ? 'mb-24' : ''} flex-between s-8`}>\n                <span className=\"cursor-pointer top-2\" onClick={() => setIsClosed(!isClosed)}>\n                    <Icon width={18} icon={!isClosed ? 'bx:chevron-down' : 'bx:chevron-up'} color=\"#777\" />\n                </span>\n                <span\n                    className=\"text-ellipsis cursor-pointer\"\n                    onClick={(e) => {\n                        e.preventDefault();\n                        scrollToId(box.id);\n                    }}\n                >\n                    {watchedBoxName ? watchedBoxName : box.name}\n                </span>\n            </h3>\n            {!isClosed && box.fields && box.fields.length > 0 && (\n                <div className={`tree ${globals.is_rtl === true ? `rtl` : ``}`}>\n                    {box.fields.map((field, fieldIndex) => (\n                       <React.Fragment>\n                           <QuickNavigationField\n                               level={0}\n                               boxIndex={index}\n                               fieldIndex={fieldIndex}\n                               boxId={box.id}\n                               field={field}\n                           />\n                       </React.Fragment>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n};\n\nQuickNavigationBox.propTypes = {\n    index: PropTypes.number.isRequired,\n    box: PropTypes.object.isRequired,\n};\n\nexport default QuickNavigationBox;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport Badge from \"../../../../components/Badge\";\nimport {styleVariants} from \"../../../../constants/styles\";\nimport {useFormContext, useWatch} from \"react-hook-form\";\nimport {scrollToId} from \"../../../../utils/scroll\";\nimport {getFormId} from \"../../../../utils/fields\";\nimport {useSelector} from \"react-redux\";\nimport QuickNavigationBlock from \"./QuickNavigationBlock\";\n\nconst QuickNavigationField = ({level, boxIndex, fieldIndex, boxId, parentField, field}) => {\n\n    // manage global state\n    const {group} = useSelector(state => state.metaState);\n\n    // manage form state\n    const { control } = useFormContext();\n    const watchedFieldName = useWatch({\n        control,\n        name: `${getFormId(group.boxes, boxId, field.id)}.name`\n    });\n\n    return (\n        <React.Fragment>\n            <div key={field.id} className={`tree-el flex-between s-8`} style={{\"--level\": level}}>\n                <span\n                    className={`cursor-pointer text-ellipsis`}\n                    onClick={(e) => {\n                        e.preventDefault();\n                        scrollToId(`lazy-${field.id}`);\n                    }}\n                >\n                    {watchedFieldName ? watchedFieldName : field.name}\n                </span>\n                <Badge style={parentField ? styleVariants.WARNING : styleVariants.SECONDARY}>\n                    {parentField ? \"C\" : \"F\" }\n                </Badge>\n            </div>\n            {field.children && field.children.length > 0 && field.children.map((child, childIndex) => (\n                <QuickNavigationField\n                    level={level+1}\n                    boxIndex={boxIndex}\n                    fieldIndex={childIndex}\n                    boxId={boxId}\n                    parentField={field}\n                    field={child}\n                />\n            ))}\n            {field.blocks && field.blocks.map((block, blockIndex) => (\n                <QuickNavigationBlock\n                    boxIndex={boxIndex}\n                    block={block}\n                    blockIndex={blockIndex}\n                    boxId={boxId}\n                    level={level+1}\n                    parentField={field}\n                    fieldIndex={fieldIndex}\n                />\n            ))}\n        </React.Fragment>\n    );\n};\n\nQuickNavigationField.propTypes = {\n    level: PropTypes.number.isRequired,\n    fieldIndex: PropTypes.number.isRequired,\n    boxIndex: PropTypes.number.isRequired,\n    boxId: PropTypes.string.isRequired,\n    field: PropTypes.object.isRequired,\n    parentField: PropTypes.object,\n};\n\nexport default QuickNavigationField;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport QuickNavigationBox from \"./QuickNavigationBox\";\n\nconst QuickNavigation = ({boxes}) => {\n\n    if(typeof boxes === 'undefined' || boxes.length === 0){\n        return null;\n    }\n\n    return (\n        <React.Fragment>\n            {boxes && boxes.map((box, index) => (\n                <QuickNavigationBox\n                    index={index}\n                    box={box}\n                />\n            ))}\n        </React.Fragment>\n    );\n};\n\nQuickNavigation.propTypes = {\n    boxes: PropTypes.array.isRequired,\n};\n\nexport default QuickNavigation;","import React, {useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport QuickNavigation from \"./QuickNavigation\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Alert from \"../../../components/Alert\";\nimport MetaBox from \"../MetaBox\";\nimport {hideAll, setBoxes, showAll} from \"../../../redux/reducers/metaStateSlice\";\nimport {arrayMove} from \"@dnd-kit/sortable\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport SortableList from \"../../../components/SortableList\";\nimport {useFieldArray, useFormContext} from \"react-hook-form\";\nimport MetaGroupHeader from \"../MetaGroupHeader\";\nimport {isEmpty} from \"../../../utils/objects\";\nimport {v4 as uuidv4} from \"uuid\";\nimport SwitchView from \"../../../components/SwitchView\";\nimport {getElementIds} from \"../../../utils/fields\";\nimport {saveCloseAll, saveShowAll} from \"../../../utils/localStorage\";\nimport Button from \"../../../components/Button\";\nimport {Icon} from \"@iconify/react\";\nimport Tooltip from \"../../../components/Tooltip\";\nimport MetaGroupSettings from \"../MetaGroupSettings\";\nimport {useParams} from \"react-router-dom\";\nimport {useAutoAnimate} from \"@formkit/auto-animate/react\";\nimport BulkActions from \"../BulkActions\";\n\nconst ListView = ({boxes, view, setView}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {group, closedElements} = useSelector(state => state.metaState);\n\n    // manage local state\n    const newGroupId = uuidv4();\n    const {id} = useParams();\n    const [settingsVisible, setSettingsVisible] = useState(typeof id !== 'string');\n\n    // auto-animate\n    const [parent] = useAutoAnimate();\n\n    // manage form state\n    const { control } = useFormContext();\n    const { move } = useFieldArray({\n        control,\n        name: \"boxes\",\n    });\n\n    const handleDragEnd = (event) => {\n        const {active, over} = event;\n\n        if(active.id === over.id){\n            return;\n        }\n\n        const oldIndex = boxes.findIndex((box) => box.id === active.id);\n        const newIndex = boxes.findIndex((box) => box.id === over.id);\n        const sortedBoxes = arrayMove(boxes, oldIndex, newIndex);\n        move(oldIndex, newIndex);\n\n        dispatch(setBoxes(sortedBoxes));\n    };\n\n    // show hide all fields handlers\n    const showHideAllFields = () => {\n        const ids = getElementIds(group.boxes);\n        const isClosed = closedElements.length > 0;\n\n        if(isClosed){\n            saveShowAll(ids);\n            dispatch(showAll());\n        } else {\n            saveCloseAll(ids);\n            dispatch(hideAll());\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <div className=\"flex-between mb-24 s-8 for-xs\">\n                <MetaGroupHeader\n                    groupId={!isEmpty(group) ? group.id : newGroupId}\n                    settingsVisible={settingsVisible}\n                    setSettingsVisible={setSettingsVisible}\n                />\n                <div className=\"i-flex-center s-8\">\n                    <Tooltip\n                        label={\n                            <Button\n                                css={{\n                                    height: \"40px\"\n                                }}\n                                style={styleVariants.WHITE}\n                                size=\"xs\"\n                                onClick={(e)=>{\n                                    e.preventDefault();\n                                    showHideAllFields();\n                                }}\n                            >\n                                <Icon icon={closedElements.length > 0 ? 'ant-design:eye-outlined' : 'ant-design:eye-invisible-outlined'} width={18} />\n                            </Button>\n                        }\n                        tip={useTranslation(\"Show/hide all fields\")}\n                        icon={false}\n                    />\n                    <SwitchView\n                        localStorageKey={!isEmpty(group) ? group.id : newGroupId}\n                        setView={setView}\n                        view={view}\n                    />\n                </div>\n            </div>\n            <div className={!settingsVisible ? 'hidden' : ''}>\n                <MetaGroupSettings groupId={!isEmpty(group) ? group.id : newGroupId} />\n            </div>\n            <div className=\"container\">\n                <div className=\"col-3 flex-column s-24 hidden-xs sticky\" style={{\n                    top: \"200px\"\n                }}>\n                    <QuickNavigation boxes={boxes} />\n                </div>\n                <div className=\"col-9\">\n                    <div\n                        className=\"flex-column s-24\"\n                        ref={parent}\n                    >\n                        <BulkActions\n                            view=\"list\"\n                        />\n                        {boxes && boxes.length > 0 ? (\n                            <SortableList\n                                onDragEnd={handleDragEnd}\n                                items={boxes}\n                            >\n                                <React.Fragment>\n                                    {boxes.map((box, index)=> (\n                                        <MetaBox\n                                            index={index}\n                                            key={box.id}\n                                            view=\"list\"\n                                            box={box}\n                                        />\n                                    ))}\n                                </React.Fragment>\n                            </SortableList>\n                        ) : (\n                            <Alert style={styleVariants.WARNING}>\n                                {useTranslation('No meta box already created. Create the first one now by clicking the button \"Add meta box\"!')}\n                            </Alert>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nListView.propTypes = {\n    view: PropTypes.string.isRequired,\n    setView: PropTypes.func.isRequired,\n    boxes: PropTypes.array.isRequired,\n};\n\nexport default ListView;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport MetaFieldType from \"../../../../components/MetaFieldType\";\nimport {Icon} from \"@iconify/react\";\nimport {useFormContext, useWatch} from \"react-hook-form\";\nimport {useSortable} from \"@dnd-kit/sortable\";\nimport {CSS} from \"@dnd-kit/utilities\";\nimport {getFormId} from \"../../../../utils/fields\";\nimport {useSelector} from \"react-redux\";\nimport ElementSelector from \"../../BulkActions/ElementSelector\";\n\nconst HorizontalSortableMetaFieldTab = ({isActive, onClick, boxIndex, fieldIndex, boxId, field, parentFieldIndex, parentFieldId, parentBlockId}) => {\n\n    // manage global state\n    const {group, selectedElementsType} = useSelector(state => state.metaState);\n\n    /**\n     *\n     * @param value\n     * @return {string}\n     */\n    const formId = (value) => {\n        return `${getFormId(group.boxes, boxId, field.id)}.${value}`;\n    };\n\n    // manage form state\n    const { control } = useFormContext();\n    const watchedFieldName = useWatch({\n        control,\n        name: formId(\"name\")\n    });\n    const watchedFieldType = useWatch({\n        control,\n        name: formId(\"type\")\n    });\n\n    // DND-kit\n    const {attributes, listeners, setNodeRef, transform} = useSortable({id: field.id});\n    const style = {\n        transform: CSS.Translate.toString(transform)\n    };\n\n    /**\n     *\n     * @return {boolean}\n     */\n    const canCopyTheField = () => {\n\n            if(typeof field.isSaved !== 'undefined' && field.isSaved === false){\n                return false\n            }\n\n            return true;\n        };\n\n    return (\n        <React.Fragment>\n            <div\n                className={`acpt-btn-switch ${isActive ? 'active' : ''}`}\n                ref={setNodeRef}\n                style={style}\n                onClick={() => {\n                    onClick(fieldIndex);\n                }}\n            >\n                <div className=\"i-flex-center s-8\">\n                    <span className=\"cursor-move top-2 handle\" {...attributes} {...listeners}>\n                        <Icon icon=\"bx:dots-vertical-rounded\" color=\"#777\" width={18} />\n                    </span>\n                    {selectedElementsType !== 'box' && selectedElementsType !== 'block' && canCopyTheField() && (\n                        <ElementSelector\n                            elementType=\"field\"\n                            element={{\n                                id: field.id,\n                                boxId: boxId,\n                                parentFieldId: parentFieldId,\n                                parentBlockId: parentBlockId\n                            }}\n                        />\n                    )}\n                    <span\n                        className=\"text-ellipsis\"\n                        style={{\n                            maxWidth: \"200px\"\n                        }}\n                    >\n                        {watchedFieldName ? watchedFieldName : field.name}\n                    </span>\n                    <MetaFieldType fieldType={watchedFieldType ? watchedFieldType : field.type} css=\"top-2\" />\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nHorizontalSortableMetaFieldTab.propTypes = {\n    boxIndex: PropTypes.number.isRequired,\n    boxId: PropTypes.string.isRequired,\n    fieldIndex: PropTypes.string.isRequired,\n    field: PropTypes.object.isRequired,\n    parentFieldIndex: PropTypes.string,\n    parentFieldId: PropTypes.string,\n    parentBlockId: PropTypes.string,\n    isActive: PropTypes.bool.isRequired,\n    onClick: PropTypes.func.isRequired,\n};\n\nexport default HorizontalSortableMetaFieldTab;\n\n","import React, {useEffect, useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport HorizontalSortableMetaFieldTab from \"./HorizontalSortableMetaFieldTab\";\nimport SortableList from \"../../../../components/SortableList\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useFieldArray, useFormContext} from \"react-hook-form\";\nimport MetaField from \"../../MetaField\";\nimport {styleVariants} from \"../../../../constants/styles\";\nimport useTranslation from \"../../../../hooks/useTranslation\";\nimport Alert from \"../../../../components/Alert\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {fieldTypes} from \"../../../../constants/fields\";\nimport {addField, setFields} from \"../../../../redux/reducers/metaStateSlice\";\nimport Button from \"../../../../components/Button\";\nimport {arrayMove} from \"@dnd-kit/sortable\";\nimport {getFormId} from \"../../../../utils/fields\";\n\nconst HorizontalSortableMetaFields = ({boxIndex, boxId, fields, parentFieldIndex, parentFieldId, parentBlockId, addFieldEnabled = true}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {group} = useSelector(state => state.metaState);\n\n    const formId = () => {\n\n        if(parentBlockId){\n            return `${getFormId(group.boxes, boxId, parentBlockId)}.fields`;\n        }\n\n        if(parentFieldId){\n            return `${getFormId(group.boxes, boxId, parentFieldId)}.children`;\n        }\n\n        return `boxes.${boxIndex}.fields`;\n    };\n\n    // manage form state\n    const { control, getValues } = useFormContext();\n    const { move } = useFieldArray({\n        control,\n        name: formId(),\n    });\n\n    // manage local state\n    const [activeTab, setActiveTab] = useState(0);\n\n    useEffect(() => {\n        if(!fields[activeTab]){\n            setActiveTab(0);\n        }\n    },[fields]);\n\n    const handleOnClick = (index) => {\n        setActiveTab(index);\n    };\n\n    const onDragEnd = (event) => {\n        const {active, over} = event;\n\n        if(active.id === over.id){\n            return;\n        }\n\n        const oldIndex = fields.findIndex((field) => field.id === active.id);\n        const newIndex = fields.findIndex((field) => field.id === over.id);\n        const sortedFields = arrayMove(fields, oldIndex, newIndex);\n        move(oldIndex, newIndex);\n\n        setActiveTab(newIndex);\n        dispatch(setFields({boxId, parentFieldId, parentBlockId, sortedFields}));\n    };\n\n    const handleAddField = () => {\n\n        const field = {\n            id: uuidv4(),\n            boxId: boxId,\n            name: 'meta_box_field',\n            label: 'meta box field',\n            type: fieldTypes.TEXT,\n            defaultValue: \"\",\n            description: \"\",\n            isRequired: false,\n            showInArchive: false,\n            quickEdit: false,\n            filterableInAdmin: false,\n            sort: 1,\n            advancedOptions: [],\n            options: [],\n            blocks: [],\n            blockId: parentBlockId ? parentBlockId : null,\n            validationRules: [],\n            visibilityConditions: [],\n            hasManyRelation: [],\n            children: [],\n            parentId: parentFieldId ? parentFieldId : null,\n            isATextualField: true,\n            isFilterable: true,\n            isSaved: false,\n        };\n\n        dispatch(addField({boxId, parentFieldId, parentBlockId, field}));\n        setActiveTab(fields ? fields.length : 0);\n    };\n\n    return (\n        <React.Fragment>\n            {fields && fields.length > 0 ? (\n                <React.Fragment>\n                    <div className=\"flex-wrap i-flex-center s-8 mb-12\">\n                        <SortableList\n                            items={fields}\n                            onDragEnd={onDragEnd}\n                            mode=\"horizontal\"\n                        >\n                            {fields && fields.map((field, fieldIndex) => (\n                                <HorizontalSortableMetaFieldTab\n                                    isActive={activeTab === fieldIndex}\n                                    onClick={handleOnClick}\n                                    boxIndex={boxIndex}\n                                    boxId={boxId}\n                                    fieldIndex={fieldIndex}\n                                    field={field}\n                                    parentFieldIndex={parentFieldIndex}\n                                    parentFieldId={parentFieldId}\n                                    parentBlockId={parentBlockId}\n                                    key={field.id}\n                                />\n                            ))}\n                        </SortableList>\n                        <Button\n                            type=\"button\"\n                            style={styleVariants.SECONDARY}\n                            size=\"sm\"\n                            onClick={e => {\n                                e.preventDefault();\n                                handleAddField();\n                            }}\n                        >\n                            +\n                        </Button>\n                    </div>\n                    <div>\n                        {fields && fields.map((field, fieldIndex) => (\n                            <React.Fragment>\n                                {fieldIndex === activeTab && (\n                                    <div className=\"with-border b-rounded\">\n                                        <MetaField\n                                            setActiveTab={setActiveTab}\n                                            fieldIndex={fieldIndex}\n                                            field={field}\n                                            view=\"tabular\"\n                                            boxIndex={boxIndex}\n                                            boxId={boxId}\n                                            parentFieldIndex={parentFieldIndex}\n                                            parentFieldId={parentFieldId}\n                                            parentBlockId={parentBlockId}\n                                        />\n                                    </div>\n                                )}\n                            </React.Fragment>\n                        ))}\n                    </div>\n                </React.Fragment>\n            ) : (\n                <React.Fragment>\n                    <Alert style={styleVariants.WARNING}>\n                        {useTranslation('No field box already created. Create the first one now by clicking the button \"Add field box\"!')}\n                    </Alert>\n                    {addFieldEnabled && (\n                        <a\n                            className=\"acpt-btn acpt-btn-secondary acpt-btn-sm mt-24\"\n                            href=\"#\"\n                            onClick={e => {\n                                e.preventDefault();\n                                handleAddField();\n                            }}\n                        >\n                            {useTranslation(\"Add field box\")}\n                        </a>\n                    )}\n                </React.Fragment>\n            )}\n        </React.Fragment>\n    );\n};\n\nHorizontalSortableMetaFields.propTypes = {\n    boxIndex: PropTypes.number.isRequired,\n    boxId: PropTypes.string.isRequired,\n    fields: PropTypes.array.isRequired,\n    parentFieldIndex: PropTypes.string,\n    parentFieldId: PropTypes.string,\n    parentBlockId: PropTypes.string,\n    addFieldEnabled: PropTypes.bool,\n};\n\nexport default HorizontalSortableMetaFields;\n\n","import React, {useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport Button from \"../../../components/Button\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport {Icon} from \"@iconify/react\";\nimport Input from \"../../../components/Forms/Input\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Tooltip from \"../../../components/Tooltip\";\nimport DeleteMetaBoxModal from \"../Modal/DeleteMetaBoxModal\";\nimport CopyMetaBoxModal from \"../Modal/CopyMetaBoxModal\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {addBox, hideElement, showElement} from \"../../../redux/reducers/metaStateSlice\";\nimport {alphanumericallyValid} from \"../../../utils/validation\";\nimport {saveIsClosed} from \"../../../utils/localStorage\";\nimport {get, useFieldArray, useFormContext, useWatch} from 'react-hook-form';\nimport InputHidden from \"../../../components/Forms/InputHidden\";\nimport {cloneBox} from \"../../../utils/cloners\";\nimport {scrollToId} from \"../../../utils/scroll\";\nimport {delay} from \"../../../utils/misc\";\nimport {slugify, transliterate} from 'transliteration';\nimport {wpAjaxRequest} from \"../../../utils/ajax\";\nimport InputDebounced from \"../../../components/Forms/InputDebounced\";\nimport ElementSelector from \"../BulkActions/ElementSelector\";\n\nconst MetaBoxHeader = ({index, box, view, listeners, attributes, setActiveTab}) => {\n\n    // manage form state\n    const formId = (value) => {\n        return `boxes.${index}.${value}`;\n    };\n\n    const { register, formState: {errors}, control, setValue, resetField, clearErrors } = useFormContext();\n    const watchedName = useWatch({\n        control,\n        name: formId(\"name\")\n    });\n    const watchedLabel = useWatch({\n        control,\n        name: formId(\"label\")\n    });\n    const watchedBox = useWatch({\n        control,\n        name: `boxes.${index}`\n    });\n    const watchedBoxes = useWatch({\n        control,\n        name: 'boxes'\n    });\n    const { append } = useFieldArray({\n        control,\n        name: \"boxes\",\n    });\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {closedElements, selectedElements, selectedElementsType} = useSelector(state => state.metaState);\n\n    /**\n     *\n     * @return {boolean}\n     */\n    const isClosed = () => {\n        const filter = closedElements.filter(e => e === box.id);\n\n        return filter.length === 1;\n    };\n\n    // manage local state\n    const [formVisible, setFormVisible] = useState(false);\n    const [autoSlug, setAutoSlug] = useState(true);\n\n    /**\n     *\n     * @return {string|*}\n     */\n    const name = () => {\n\n        const id = formId(\"name\");\n        const error = get(errors, id);\n\n        if(error){\n            return (\n                <span className=\"invalid-feedback\">\n                    {useTranslation(error.message)}\n                </span>\n            );\n        }\n\n        return watchedName ? watchedName : box.name;\n    };\n\n    /**\n     *\n     * @return {null|*}\n     */\n    const label = () => {\n        return (typeof watchedLabel === 'string') ? watchedLabel : box.label;\n    };\n\n    /**\n     * This function avoid any box name collision\n     * @param name\n     * @return {string}\n     */\n    const checkIfNameIsValid = async(name) => {\n\n        const slugified = slugify(transliterate(name));\n\n        // check for other box names\n        let otherBoxNames = [];\n\n        watchedBoxes.map((box, i) => {\n            if(i !== index){\n                otherBoxNames.push(box.name);\n            }\n        });\n\n        if(otherBoxNames.includes(slugified)){\n            return useTranslation(\"Name is already taken\");\n        }\n\n        // check if the name already exists\n        if(box.name !== slugified){\n            // the following function will be executed every half second\n            const res = await wpAjaxRequest(\"checkMetaBoxNameAction\", {boxName: slugified});\n\n            if(res.exists === true){\n                return useTranslation(\"Name is already taken\");\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Toggle close box\n     */\n    const handleToggleClose = () => {\n        saveIsClosed(box.id);\n\n        if((isClosed())){\n            dispatch(showElement({id: box.id}));\n        } else {\n            dispatch(hideElement({id: box.id}));\n        }\n    };\n\n    /**\n     *\n     * @return {boolean}\n     */\n    const canCopyTheBox = () => {\n\n        if(typeof box.isSaved !== 'undefined' && box.isSaved === false){\n            return false\n        }\n\n        return true;\n    };\n\n    const onChangeLabel = (value) => {\n        if(autoSlug){\n            const slugified = slugify(transliterate(value));\n\n            if(checkIfNameIsValid(slugified)){\n                clearErrors(formId(\"name\"));\n                setValue(formId(\"name\"), slugified);\n            }\n        }\n    };\n\n    /**\n     *\n     * @return {boolean}\n     */\n    const isSelected = () => {\n        const filter = selectedElements.filter(el => el.id === box.id );\n\n        return filter.length > 0\n    };\n\n    return (\n        <div className=\"flex-between s-8 for-xs\">\n            <InputHidden\n                id={formId(\"id\")}\n                value={box.id}\n                register={register}\n            />\n            <span className=\"i-flex-center s-8\">\n                {view === 'list' && (\n                    <span className=\"cursor-move top-2 handle\" {...attributes} {...listeners}>\n                        <Icon icon=\"bx:dots-vertical-rounded\" color=\"#777\" width={18} />\n                    </span>\n                )}\n                {selectedElementsType !== 'field' && selectedElementsType !== 'block' && canCopyTheBox() && (\n                    <ElementSelector\n                        elementType=\"box\"\n                        element={{\n                            id: box.id\n                        }}\n                    />\n                )}\n                <h3 className={`${!formVisible ? '' : 'hidden'}`}>\n                    {name()}\n                </h3>\n                <span className={`top-1 color-gray ${!formVisible ? '' : 'hidden'}`}>\n                    {label()}\n                </span>\n                <div className={`i-flex-center s-8 ${formVisible ? '' : 'hidden'}`}>\n                    <div>\n                        <InputDebounced\n                            size=\"sm\"\n                            control={control}\n                            id={formId(\"label\")}\n                            placeholder={useTranslation(\"Box label, non latin chars allowed.\")}\n                            onChangeCapture={onChangeLabel}\n                            defaultValue={box.label}\n                            validate={{\n                                validate: checkIfNameIsValid,\n                                maxLength: {\n                                    value: 255,\n                                    message: \"max length is 255\"\n                                }\n                            }}\n\n                        />\n                    </div>\n                    <div>\n                        <Input\n                            size=\"sm\"\n                            id={formId(\"name\")}\n                            placeholder={useTranslation(\"Box name. Allowed chars: [a-z0-9_-]\")}\n                            defaultValue={box.name}\n                            register={register}\n                            errors={errors}\n                            required={true}\n                            onClick={e => {\n                                if(e.target.value === 'meta_box_field'){\n                                    resetField(formId(\"name\"));\n                                }\n                            }}\n                            validate={{\n                                validate: {\n                                    alphanumericallyValid,\n                                    checkIfNameIsValid\n                                },\n                                required: useTranslation(\"This field is mandatory\"),\n                                maxLength: {\n                                    value: 255,\n                                    message: \"max length is 255\"\n                                }\n                            }}\n                        />\n                    </div>\n                    <Tooltip\n                        label={\n                            <span\n                                className={`acpt-btn-switch ${autoSlug === true ? 'active' : ''}`}\n                                onClick={e => {\n                                    e.preventDefault();\n                                    setAutoSlug(!autoSlug);\n                                }}\n                            >\n                                <Icon icon=\"bx-link\" width={18} />\n                            </span>\n                        }\n                        tip={useTranslation(`${autoSlug ? 'Auto slug ON' : 'Auto slug OFF'}`)}\n                        icon={false}\n                    />\n                </div>\n                <Button style={styleVariants.SECONDARY} size=\"sm\" onClick={(e) => {\n                    e.preventDefault();\n                    setFormVisible(!formVisible);\n                }}>\n                    {useTranslation(`${formVisible ? 'Close' : 'Edit'}`)}\n                </Button>\n            </span>\n            <span className=\"i-flex-center s-8\">\n                <Tooltip\n                    label={\n                        <a\n                            href=\"#\"\n                            onClick={e => {\n                                e.preventDefault();\n                                const duplicatedBox = cloneBox(watchedBox);\n                                dispatch(addBox(duplicatedBox));\n                                append(duplicatedBox);\n\n                                delay(1).then(()=>{\n                                    scrollToId(duplicatedBox.id);\n                                });\n                            }}\n                        >\n                            <Icon icon=\"bx:duplicate\" width={18} />\n                        </a>\n                    }\n                    tip={useTranslation(\"Duplicate this meta box\")}\n                    icon={false}\n                />\n                {canCopyTheBox() && (\n                    <React.Fragment>\n                        <Tooltip\n                            label={\n                                <CopyMetaBoxModal\n                                    box={box}\n                                />\n                            }\n                            tip={useTranslation(\"Copy this meta box\")}\n                            icon={false}\n                        />\n                    </React.Fragment>\n                )}\n                <Tooltip\n                    label={\n                        <DeleteMetaBoxModal\n                            index={index}\n                            setActiveTab={setActiveTab}\n                            boxId={box.id}\n                        />\n                    }\n                    tip={useTranslation(\"Delete this meta box\")}\n                    icon={false}\n                />\n                {view === 'list' && (\n                    <Tooltip\n                        label={\n                            <a\n                                href=\"#\"\n                                onClick={e => {\n                                    e.preventDefault();\n                                    handleToggleClose();\n                                }}\n                            >\n                                <Icon icon=\"bx:expand-alt\" width={18} />\n                            </a>\n                        }\n                        tip={useTranslation(\"Hide/show this meta box\")}\n                        icon={false}\n                    />\n                )}\n            </span>\n        </div>\n    );\n};\n\nMetaBoxHeader.propTypes = {\n    box: PropTypes.object.isRequired,\n    view: PropTypes.oneOf([\n        \"list\",\n        \"tabular\"\n    ]).isRequired,\n    setActiveTab: PropTypes.func,\n    attributes: PropTypes.object,\n    listeners: PropTypes.object,\n};\n\nexport default MetaBoxHeader;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport {arrayMove} from \"@dnd-kit/sortable\";\nimport Alert from \"../../../../components/Alert\";\nimport useTranslation from \"../../../../hooks/useTranslation\";\nimport {styleVariants} from \"../../../../constants/styles\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {addField, setFields} from \"../../../../redux/reducers/metaStateSlice\";\nimport MetaField from \"../../MetaField\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {fieldTypes} from '../../../../constants/fields';\nimport SortableList from \"../../../../components/SortableList\";\nimport {useFieldArray, useFormContext} from \"react-hook-form\";\nimport {getFormId} from \"../../../../utils/fields\";\nimport {useAutoAnimate} from \"@formkit/auto-animate/react\";\n\nconst VerticalSortableMetaFields = ({boxIndex, boxId, parentFieldIndex, parentFieldId, parentBlockId, fields, addFieldEnabled = true}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {group} = useSelector(state => state.metaState);\n\n    // auto-animate\n    const [parent] = useAutoAnimate();\n\n    const formId = () => {\n\n        if(parentBlockId){\n            return `${getFormId(group.boxes, boxId, parentBlockId)}.fields`;\n        }\n\n        if(parentFieldId){\n            return `${getFormId(group.boxes, boxId, parentFieldId)}.children`;\n        }\n\n        return `boxes.${boxIndex}.fields`;\n    };\n\n    // manage form state\n    const { control } = useFormContext();\n    const { move } = useFieldArray({\n        control,\n        name: formId(),\n    });\n\n    const handleDragEnd = (event) => {\n        const {active, over} = event;\n\n        if(active.id === over.id){\n            return;\n        }\n\n        const oldIndex = fields.findIndex((field) => field.id === active.id);\n        const newIndex = fields.findIndex((field) => field.id === over.id);\n        const sortedFields = arrayMove(fields, oldIndex, newIndex);\n        move(oldIndex, newIndex);\n\n       dispatch(setFields({boxId, parentFieldId, parentBlockId, sortedFields}));\n    };\n\n    const handleAddField = () => {\n\n        const field = {\n            id: uuidv4(),\n            boxId: boxId,\n            name: 'meta_box_field',\n            label: 'meta box field',\n            type: fieldTypes.TEXT,\n            defaultValue: \"\",\n            description: \"\",\n            isRequired: false,\n            showInArchive: false,\n            quickEdit: false,\n            filterableInAdmin: false,\n            sort: 1,\n            advancedOptions: [],\n            options: [],\n            blocks: [],\n            blockId: parentBlockId ? parentBlockId : null,\n            validationRules: [],\n            visibilityConditions: [],\n            hasManyRelation: [],\n            children: [],\n            parentId: parentFieldId ? parentFieldId : null,\n            isATextualField: true,\n            isFilterable: true,\n            isSaved: false\n        };\n\n        dispatch(addField({boxId, parentFieldId, parentBlockId, field}));\n    };\n\n    return (\n        <React.Fragment>\n            <div\n                className={fields.length > 0 ? \"bg-pale-gray b-rounded p-24 flex-column s-24\" : \"\"}\n                ref={parent}\n            >\n                {fields.length > 0 ? (\n                    <SortableList\n                        onDragEnd={handleDragEnd}\n                        items={fields}\n                    >\n                        {fields.map((field, fieldIndex) => (\n                            <MetaField\n                                boxIndex={boxIndex}\n                                fieldIndex={fieldIndex}\n                                boxId={boxId}\n                                field={field}\n                                parentFieldIndex={parentFieldIndex}\n                                parentFieldId={parentFieldId}\n                                parentBlockId={parentBlockId}\n                                view=\"list\"\n                            />\n                        ))}\n                    </SortableList>\n                ) : (\n                    <Alert style={styleVariants.WARNING}>\n                        {useTranslation('No field box already created. Create the first one now by clicking the button \"Add field box\"!')}\n                    </Alert>\n                )}\n            </div>\n\n\n\n            {addFieldEnabled && (\n                <a\n                    className=\"acpt-btn acpt-btn-secondary acpt-btn-sm mt-24\"\n                    href=\"#\"\n                    onClick={e => {\n                        e.preventDefault();\n                        handleAddField();\n                    }}\n                >\n                    {useTranslation(\"Add field box\")}\n                </a>\n            )}\n        </React.Fragment>\n    );\n};\n\nVerticalSortableMetaFields.propTypes = {\n    boxIndex: PropTypes.number.isRequired,\n    boxId: PropTypes.string.isRequired,\n    fields: PropTypes.array.isRequired,\n    parentFieldIndex: PropTypes.string,\n    parentFieldId: PropTypes.string,\n    parentBlockId: PropTypes.string,\n    addFieldEnabled: PropTypes.bool,\n};\n\nexport default VerticalSortableMetaFields;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport MetaBoxHeader from \"./MetaBoxHeader\";\nimport {useSortable} from \"@dnd-kit/sortable\";\nimport {CSS} from \"@dnd-kit/utilities\";\nimport VerticalSortableMetaFields from \"./VerticalSortableMetaFields\";\nimport HorizontalSortableMetaFields from \"./HorizontalSortableMetaFields\";\nimport {useSelector} from \"react-redux\";\n\nconst MetaBox = ({index, box, view, setActiveTab}) => {\n\n    // DND-kit\n    const {attributes, listeners, setNodeRef, transform} = useSortable({id: box.id});\n    const style = {\n        transform: CSS.Translate.toString(transform)\n    };\n\n    // manage global state\n    const {closedElements} = useSelector(state => state.metaState);\n\n    /**\n     *\n     * @return {boolean}\n     */\n    const isClosed = () => {\n        const filter = closedElements.filter(e => e === box.id);\n\n        return filter.length === 1;\n    };\n\n    return (\n        <div id={box.id} className={view === 'list' ? 'bg-white b-rounded with-shadow p-24' : ''} ref={view === 'list' ? setNodeRef : null} style={view === 'list' ? style : null}>\n            <div className={(view === 'tabular' || (!isClosed() && view === 'list')) ? 'mb-24' : ''}>\n                <MetaBoxHeader\n                    index={index}\n                    setActiveTab={setActiveTab}\n                    attributes={view === 'list' ? attributes : null}\n                    listeners={view === 'list' ? listeners : null}\n                    box={box}\n                    view={view}\n                />\n            </div>\n            {view === 'list' ? (\n                <div className={`${isClosed() ? 'hidden' : ''}`}>\n                    <VerticalSortableMetaFields\n                        boxIndex={index}\n                        boxId={box.id}\n                        fields={box.fields}\n                    />\n                </div>\n            ) : (\n                <div>\n                    <HorizontalSortableMetaFields\n                        boxIndex={index}\n                        boxId={box.id}\n                        fields={box.fields}\n                    />\n                </div>\n            )}\n        </div>\n    );\n};\n\nMetaBox.propTypes = {\n    index: PropTypes.number.isRequired,\n    box: PropTypes.object.isRequired,\n    setActiveTab: PropTypes.func,\n    view: PropTypes.oneOf([\n        \"list\",\n        \"tabular\"\n    ]).isRequired,\n};\n\nexport default MetaBox;","import React, {memo} from \"react\";\nimport PropTypes from 'prop-types';\nimport {Icon} from \"@iconify/react\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport {get, useFieldArray, useFormContext, useWatch} from 'react-hook-form';\nimport MetaFieldType from \"../../../components/MetaFieldType\";\nimport Tooltip from \"../../../components/Tooltip\";\nimport {saveIsClosed} from \"../../../utils/localStorage\";\nimport DeleteMetaFieldModal from \"../Modal/DeleteMetaFieldModal\";\nimport {addField, hideElement, showElement} from \"../../../redux/reducers/metaStateSlice\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport ButtonSwitch from \"../../../components/Forms/ButtonSwitch\";\nimport {cloneField} from \"../../../utils/cloners\";\nimport {delay} from \"../../../utils/misc\";\nimport {scrollToId} from \"../../../utils/scroll\";\nimport MetaFieldShortCodeModal from \"../Modal/MetaFieldShortCodeModal\";\nimport {fieldTypes} from \"../../../constants/fields\";\nimport CopyMetaFieldModal from \"../Modal/CopyMetaFieldModal\";\nimport {getFormId} from \"../../../utils/fields\";\nimport ElementSelector from \"../BulkActions/ElementSelector\";\n\nconst MetaFieldHeader = memo(({boxId, field, view, listeners, attributes, formId, boxIndex, fieldIndex, parentFieldId, parentBlockId, setActiveTab}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {group, closedElements, selectedElementsType} = useSelector(state => state.metaState);\n\n    // manage form state\n    const { formState: {errors}, control } = useFormContext();\n    const watchedName = useWatch({\n        control,\n        name: formId(\"name\")\n    });\n    const watchedType = useWatch({\n        control,\n        name: formId(\"type\")\n    });\n    const watchedField = useWatch({\n        control,\n        name: `boxes.${boxIndex}.fields.${fieldIndex}`\n    });\n    const watchedShowInArchive = useWatch({\n        control,\n        name: formId(\"showInArchive\")\n    });\n    const watchedFilterableInAdmin = useWatch({\n        control,\n        name: formId(\"filterableInAdmin\")\n    });\n    const watchedQuickEdit = useWatch({\n        control,\n        name: formId(\"quickEdit\")\n    });\n    const watchedIsRequired = useWatch({\n        control,\n        name: formId(\"isRequired\")\n    });\n    const { append } = useFieldArray({\n        control,\n        name: getFormId(group.boxes, boxId, field.id, false),\n    });\n\n    /**\n     *\n     * @return {boolean}\n     */\n    const isClosed = () => {\n        const filter = closedElements.filter(e => e === field.id);\n\n        return filter.length === 1;\n    };\n\n    /**\n     *\n     * @return {string|*}\n     */\n    const name = () => {\n        const id = formId(\"name\");\n        const error = get(errors, id);\n\n        if(error){\n            return (\n                <span className=\"invalid-feedback\">\n                    {useTranslation(error.message)}\n                </span>\n            );\n        }\n\n        return watchedName ? watchedName : field.name;\n    };\n\n    /**\n     *\n     * @return {*}\n     */\n    const fieldType = () => {\n        return watchedType ? watchedType : field.type;\n    };\n\n    /**\n     *\n     * @return {boolean|boolean}\n     */\n    const showTheShortcode = () => {\n        return fieldType() !== fieldTypes.REPEATER && fieldType() !== fieldTypes.FLEXIBLE;\n    };\n\n    /**\n     * Toggle close box\n     */\n    const handleToggleClose = () => {\n        saveIsClosed(field.id);\n\n        if((isClosed())){\n            dispatch(showElement({id: field.id}));\n        } else {\n            dispatch(hideElement({id: field.id}));\n        }\n    };\n\n    /**\n     *\n     * @return {boolean}\n     */\n    const canCopyTheField = () => {\n\n        if(typeof field.isSaved !== 'undefined' && field.isSaved === false){\n            return false\n        }\n\n        return true;\n    };\n\n    return (\n        <div className=\"flex-between s-8 for-xs\">\n            <span className=\"i-flex-center s-8\">\n                {view === 'list' && (\n                    <span className=\"cursor-move top-2 handle\" {...attributes} {...listeners}>\n                        <Icon icon=\"bx:dots-vertical-rounded\" color=\"#777\" width={18} />\n                    </span>\n                )}\n                {selectedElementsType !== 'box' && selectedElementsType !== 'block' && canCopyTheField() && (\n                    <ElementSelector\n                        elementType=\"field\"\n                        element={{\n                            id: field.id,\n                            boxId: boxId,\n                            parentFieldId: parentFieldId,\n                            parentBlockId: parentBlockId\n                        }}\n                    />\n                )}\n                <h3>\n                    {name()}\n                </h3>\n                <span className=\"color-gray\">\n                    <MetaFieldType fieldType={fieldType()} css=\"top-2\" />\n                </span>\n                <span className=\"i-flex-center s-8\">\n                    <Tooltip\n                        label={\n                            <ButtonSwitch\n                                id={formId(\"showInArchive\")}\n                                control={control}\n                                defaultValue={typeof watchedShowInArchive === \"boolean\" ? watchedShowInArchive : field.showInArchive}\n                                errors={errors}\n                                icon=\"bxl:wordpress\"\n                             />\n                        }\n                        tip={useTranslation(\"Show in Wordpress admin post lists page\")}\n                        icon={false}\n                    />\n                    <Tooltip\n                        label={\n                            <ButtonSwitch\n                                control={control}\n                                defaultValue={typeof watchedFilterableInAdmin  === \"boolean\" ? watchedFilterableInAdmin : field.filterableInAdmin}\n                                errors={errors}\n                                icon=\"bx:filter\"\n                                id={formId(\"filterableInAdmin\")}\n                            />\n                        }\n                        tip={useTranslation(\"Filterable in Wordpress admin post lists page\")}\n                        icon={false}\n                    />\n                    <Tooltip\n                        label={\n                            <ButtonSwitch\n                                control={control}\n                                defaultValue={typeof watchedQuickEdit  === \"boolean\" ? watchedQuickEdit : field.quickEdit}\n                                errors={errors}\n                                icon=\"bx:pencil\"\n                                id={formId(\"quickEdit\")}\n                            />\n                        }\n                        tip={useTranslation(\"Quick edit in Wordpress admin post lists page\")}\n                        icon={false}\n                    />\n                    <Tooltip\n                        label={\n                            <React.Fragment>\n                                <ButtonSwitch\n                                    control={control}\n                                    defaultValue={typeof watchedIsRequired  === \"boolean\" ? watchedIsRequired : field.isRequired}\n                                    errors={errors}\n                                    icon=\"foundation:asterisk\"\n                                    id={formId(\"isRequired\")}\n                                />\n                            </React.Fragment>\n                        }\n                        tip={useTranslation(\"Field required\")}\n                        icon={false}\n                    />\n                </span>\n            </span>\n            <span className=\"i-flex-center s-8\">\n                {showTheShortcode() && (\n                    <Tooltip\n                        label={\n                            <MetaFieldShortCodeModal\n                                boxId={boxId}\n                                field={field}\n                                parentFieldId={parentFieldId}\n                                parentBlockId={parentBlockId}\n                            />\n                        }\n                        tip={useTranslation(\"Show the shortcode\")}\n                        icon={false}\n                    />\n                )}\n                <Tooltip\n                    label={\n                        <a\n                            href=\"#\"\n                            onClick={e => {\n                                e.preventDefault();\n                                const duplicatedField = cloneField(boxId, watchedField);\n                                dispatch(addField({boxId, field: duplicatedField}));\n                                append(duplicatedField);\n\n                                delay(1).then(()=>{\n                                    scrollToId(duplicatedField.id);\n                                });\n                            }}\n                        >\n                            <Icon icon=\"bx:duplicate\" width={18} />\n                        </a>\n                    }\n                    tip={useTranslation(\"Duplicate this meta field\")}\n                    icon={false}\n                />\n                {canCopyTheField() && (\n                    <Tooltip\n                        label={\n                            <CopyMetaFieldModal field={field} />\n                        }\n                        tip={useTranslation(\"Copy this meta field\")}\n                        icon={false}\n                    />\n                )}\n                <Tooltip\n                    label={\n                            <DeleteMetaFieldModal\n                                setActiveTab={setActiveTab}\n                                boxId={boxId}\n                                fieldId={field.id}\n                                fieldIndex={fieldIndex}\n                                parentFieldId={parentFieldId}\n                                parentBlockId={parentBlockId}\n                            />\n                    }\n                    tip={useTranslation(\"Delete this meta field\")}\n                    icon={false}\n                />\n                {view === 'list' && (\n                    <Tooltip\n                        label={\n                            <a\n                                href=\"#\"\n                                onClick={e => {\n                                    e.preventDefault();\n                                    handleToggleClose();\n                                }}\n                            >\n                                <Icon icon=\"bx:expand-alt\" width={18} />\n                            </a>\n                        }\n                        tip={useTranslation(\"Hide/show this meta field\")}\n                        icon={false}\n                    />\n                )}\n            </span>\n        </div>\n    );\n});\n\nMetaFieldHeader.propTypes = {\n    boxIndex: PropTypes.number.isRequired,\n    fieldIndex: PropTypes.number.isRequired,\n    formId: PropTypes.func.isRequired,\n    boxId: PropTypes.string.isRequired,\n    parentFieldId: PropTypes.string,\n    parentBlockId: PropTypes.string,\n    field: PropTypes.object.isRequired,\n    view: PropTypes.oneOf([\n        \"list\",\n        \"tabular\"\n    ]).isRequired,\n    attributes: PropTypes.object,\n    listeners: PropTypes.object,\n    setActiveTab: PropTypes.func,\n};\n\nexport default MetaFieldHeader;\n\n","import React, {useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport {useSortable} from \"@dnd-kit/sortable\";\nimport {CSS} from \"@dnd-kit/utilities\";\nimport {Icon} from \"@iconify/react\";\nimport InputHidden from \"../../../../../../components/Forms/InputHidden\";\nimport {useFormContext, useWatch} from \"react-hook-form\";\nimport Input from \"../../../../../../components/Forms/Input\";\nimport useTranslation from \"../../../../../../hooks/useTranslation\";\nimport {useSelector} from \"react-redux\";\nimport DeleteMetaOptionModal from \"../../../../Modal/DeleteMetaOptionModal\";\nimport {getFormId} from \"../../../../../../utils/fields\";\nimport Tooltip from \"../../../../../../components/Tooltip\";\nimport ButtonSwitch from \"../../../../../../components/Forms/ButtonSwitch\";\n\nconst MetaOption = ({index, boxIndex, fieldIndex, boxId, fieldId, parentFieldId, option, handleIsDefault}) => {\n\n    // manage global state\n    const {group} = useSelector(state => state.metaState);\n\n    // manage form state\n    const formId = (value) => {\n\n        if(parentFieldId){\n            return `${getFormId(group.boxes, boxId, fieldId)}.options.${index}.${value}`;\n        }\n\n        return `boxes.${boxIndex}.fields.${fieldIndex}.options.${index}.${value}`;\n    };\n\n    const { register, formState: {errors}, control, setValue, resetField } = useFormContext();\n    const watchedValue = useWatch({\n        control,\n        name: formId(\"value\")\n    });\n    const watchedLabel = useWatch({\n        control,\n        name: formId(\"label\")\n    });\n    const watchedIsDefault = useWatch({\n        control,\n        name: formId(\"isDefault\")\n    });\n\n    // DND-kit\n    const {attributes, listeners, setNodeRef, transform} = useSortable({id: option.id});\n    const style = {\n        transform: CSS.Translate.toString(transform)\n    };\n\n    // manage local state\n    const [linkedOption, setLinkedOption] = useState(option.label === option.value);\n\n    /**\n     *\n     * @return {string|*}\n     */\n    const value = () => {\n        if(watchedValue){\n            return watchedValue;\n        }\n\n        if(option.value){\n            return option.value;\n        }\n\n        return null;\n    };\n\n    /**\n     *\n     * @return {null|*}\n     */\n    const label = () => {\n        if(watchedLabel){\n            return watchedLabel;\n        }\n\n        if(option.label){\n            return option.label;\n        }\n\n        return null;\n    };\n\n    return (\n        <div className=\"i-flex-center s-8\" style={style} ref={setNodeRef}>\n            <InputHidden\n                id={formId(\"id\")}\n                value={option.id}\n                register={register}\n            />\n            <span className=\"cursor-move top-2 handle\" {...attributes} {...listeners}>\n                <Icon icon=\"bx:dots-vertical-rounded\" color=\"#777\" width={18} />\n            </span>\n            <span className=\"w-100\">\n                <Input\n                    id={formId(\"label\")}\n                    register={register}\n                    errors={errors}\n                    defaultValue={label()}\n                    onChangeCapture={e => {\n                        if(linkedOption){\n                            setValue(formId(\"value\"), e.target.value);\n                        }\n                    }}\n                    onClick={e => {\n                        if(option.label && e.target.value === 'option'){\n                            resetField(formId(\"label\"));\n                        }\n                    }}\n                    validate={{\n                        required: useTranslation(\"This field is mandatory\"),\n                        maxLength: {\n                            value: 255,\n                            message: \"max length is 255\"\n                        }\n                    }}\n                />\n            </span>\n            <span className=\"w-100\">\n                <Input\n                    id={formId(\"value\")}\n                    register={register}\n                    errors={errors}\n                    defaultValue={value()}\n                    onChangeCapture={e => {\n                        if(linkedOption){\n                            setValue(formId(\"label\"), e.target.value);\n                        }\n                    }}\n                    onClick={e => {\n                        if(option.value && e.target.value === 'option'){\n                            resetField(formId(\"option\"));\n                        }\n                    }}\n                    validate={{\n                        required: useTranslation(\"This field is mandatory\"),\n                        maxLength: {\n                            value: 255,\n                            message: \"max length is 255\"\n                        }\n                    }}\n                />\n            </span>\n            <span className=\"i-flex-center s-8\">\n                 <Tooltip\n                     label={\n                         <button\n                             type=\"button\"\n                             className={`acpt-btn-switch ${linkedOption ? 'active' : ''}`}\n                             onClick={e => {\n                                 e.preventDefault();\n                                 setLinkedOption(!linkedOption);\n                             }}\n                         >\n                             <Icon icon=\"bx:bx-link\" width=\"18px\"/>\n                         </button>\n                     }\n                     tip={useTranslation(linkedOption ? \"Label and value are linked\" : \"Label and value are unlinked\")}\n                     icon={false}\n                 />\n                 <Tooltip\n                     label={\n                         <ButtonSwitch\n                             control={control}\n                             defaultValue={typeof watchedIsDefault  === \"boolean\" ? watchedIsDefault :  option.isDefault}\n                             errors={errors}\n                             icon=\"bx:check\"\n                             id={formId(\"isDefault\")}\n                             externalOnChange={handleIsDefault}\n                         />\n                     }\n                     tip={useTranslation(\"Default value\")}\n                     icon={false}\n                 />\n            </span>\n            <DeleteMetaOptionModal\n                boxId={boxId}\n                fieldId={fieldId}\n                optionId={option.id}\n                parentFieldId={parentFieldId}\n                optionIndex={index}\n            />\n        </div>\n    );\n};\n\nMetaOption.propTypes = {\n    index: PropTypes.number.isRequired,\n    boxIndex: PropTypes.number.isRequired,\n    fieldIndex: PropTypes.number.isRequired,\n    boxId: PropTypes.string.isRequired,\n    fieldId: PropTypes.string.isRequired,\n    parentFieldId: PropTypes.string,\n    option: PropTypes.object.isRequired,\n    handleIsDefault: PropTypes.func\n};\n\nexport default MetaOption;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport SortableList from \"../../../../../../components/SortableList\";\nimport useTranslation from \"../../../../../../hooks/useTranslation\";\nimport Alert from \"../../../../../../components/Alert\";\nimport {styleVariants} from \"../../../../../../constants/styles\";\nimport MetaOption from \"./MetaOption\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {addOption} from \"../../../../../../redux/reducers/metaStateSlice\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useFieldArray, useFormContext} from \"react-hook-form\";\nimport {getFormId} from \"../../../../../../utils/fields\";\nimport {useAutoAnimate} from \"@formkit/auto-animate/react\";\n\nconst MetaOptionList = ({boxId, boxIndex, fieldIndex, fieldId, parentFieldId, options, isMulti}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {group} = useSelector(state => state.metaState);\n\n    // auto-animate\n    const [parent] = useAutoAnimate();\n\n    // manage form state\n    const formId = () => {\n        return `${getFormId(group.boxes, boxId, fieldId)}.options`;\n    };\n\n    // manage form state\n    const { control, setValue, resetField } = useFormContext();\n    const { move } = useFieldArray({\n        control,\n        name: formId(),\n    });\n\n    const handleDragEnd = (event) => {\n        const {active, over} = event;\n\n        if(active.id === over.id){\n            return;\n        }\n\n        const oldIndex = options.findIndex((field) => field.id === active.id);\n        const newIndex = options.findIndex((field) => field.id === over.id);\n        move(oldIndex, newIndex);\n    };\n\n    /**\n     * Add new option\n     */\n    const handleAddOption = () => {\n\n        const option = {\n            id: uuidv4(),\n            boxId: boxId,\n            fieldId: fieldId,\n            label: 'option',\n            value: 'option',\n            isDefault: false,\n        };\n\n        dispatch(addOption({boxId, fieldId, parentFieldId, option}));\n    };\n\n    const handleIsDefault = ({id, checked}) => {\n        if(isMulti){\n            return;\n        }\n\n        for (let i = 0; i < options.length; i++) {\n            const optionId = formId()+\".\"+i+\".isDefault\";\n            if(optionId !== id){\n                setValue(optionId, false);\n            } else {\n                setValue(optionId, checked);\n            }\n        }\n    };\n\n    return (\n        <div className=\"mt-24\">\n            <fieldset className=\"acpt-fieldset\">\n                <legend>{useTranslation(\"Option list\")}</legend>\n                <div\n                    ref={parent}\n                    className=\"flex-column s-24\"\n                >\n                    {options && options.length > 0 ? (\n                        <SortableList\n                            onDragEnd={handleDragEnd}\n                            items={options}\n                        >\n                            {options && options.map((option, index) => (\n                                <MetaOption\n                                    index={index}\n                                    boxIndex={boxIndex}\n                                    fieldIndex={fieldIndex}\n                                    boxId={boxId}\n                                    fieldId={fieldId}\n                                    parentFieldId={parentFieldId}\n                                    option={option}\n                                    handleIsDefault={handleIsDefault}\n                                />\n                            ))}\n                        </SortableList>\n                    ) : (\n                        <Alert style={styleVariants.WARNING}>\n                            {useTranslation('No options already created. Create the first one now by clicking the button \"Add option\"!')}\n                        </Alert>\n                    )}\n                </div>\n                <a\n                    href=\"#\"\n                    className=\"mt-24\"\n                    onClick={e => {\n                        e.preventDefault();\n                        handleAddOption();\n                    }}\n                >\n                    {useTranslation(\"Add option\")}\n                </a>\n            </fieldset>\n        </div>\n    );\n};\n\nMetaOptionList.propTypes = {\n    boxId: PropTypes.string.isRequired,\n    fieldId: PropTypes.string.isRequired,\n    parentFieldId: PropTypes.string,\n    boxIndex: PropTypes.number.isRequired,\n    fieldIndex: PropTypes.number.isRequired,\n    options: PropTypes.array.isRequired,\n    isMulti: PropTypes.bool.isRequired,\n};\n\nexport default MetaOptionList;","import React, {useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport Input from \"../../../../../components/Forms/Input\";\nimport Label from \"../../../../../components/Forms/Label\";\nimport useTranslation from \"../../../../../hooks/useTranslation\";\nimport {alphanumericallyValid} from \"../../../../../utils/validation\";\nimport {\n    fieldHasOptions,\n    fieldsList,\n    fieldTypes\n} from \"../../../../../constants/fields\";\nimport {useFormContext, useWatch} from \"react-hook-form\";\nimport MetaOptionList from \"./MetaOptionList\";\nimport Select from \"../../../../../components/Forms/Select\";\nimport {canFieldHaveValidationAndLogicRules, fieldNestingLevel} from \"../../../../../utils/fields\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {updateField} from \"../../../../../redux/reducers/metaStateSlice\";\nimport {slugify, transliterate} from \"transliteration\";\nimport {wpAjaxRequest} from \"../../../../../utils/ajax\";\nimport InputDebounced from \"../../../../../components/Forms/InputDebounced\";\n\nconst BasicTab = ({view, formId, boxIndex, fieldIndex, boxId, field}) => {\n\n    // manage global state\n    const {group} = useSelector(state => state.metaState);\n    const dispatch = useDispatch();\n\n    // mange local state\n    const [autoSlug, setAutoSlug] = useState(true);\n\n    // manage form state\n    const { register, unregister, control, formState: {errors}, resetField, reset, setValue, clearErrors } = useFormContext();\n    const watchedType = useWatch({\n        control,\n        name: formId(\"type\")\n    });\n    const watchedName = useWatch({\n        control,\n        name: formId(\"name\")\n    });\n    const watchedFields = useWatch({\n        control,\n        name: `boxes.${boxIndex}.fields`\n    });\n    const watchedBoxName = useWatch({\n        control,\n        name: `boxes.${boxIndex}.name`\n    });\n\n    // calculate nesting levels\n    const nestingLevel = fieldNestingLevel(group.boxes, boxId, field.id);\n\n    /**\n     *\n     * @return {*}\n     */\n    const fieldType = () => {\n        return watchedType ? watchedType : field.type;\n    };\n\n    // handle field type change (update redux state)\n    const handleFieldTypeChange = (type) => {\n        if(fieldType() !== type){\n            const updatedField = {...field};\n            updatedField.type = type;\n\n            if(type !== fieldTypes.REPEATER){\n                updatedField.children = [];\n            }\n\n            if(type !== fieldTypes.FLEXIBLE){\n                updatedField.blocks = [];\n            }\n\n            if(type !== fieldTypes.POST){\n                updatedField.relations = [];\n            }\n\n            if(!canFieldHaveValidationAndLogicRules(type)){\n                unregister(formId(\"relations\"));\n                unregister(formId(\"visibilityConditions\"));\n                unregister(formId(\"validationRules\"));\n                updatedField.visibilityConditions = [];\n                updatedField.validationRules = [];\n                updatedField.relations = [];\n            }\n\n            unregister(formId(\"relations\"));\n            unregister(formId(\"blocks\"));\n            unregister(formId(\"children\"));\n\n            dispatch(updateField({field: updatedField, boxId}));\n        }\n    };\n\n    /**\n     * This function avoid any box name collision\n     * @param name\n     * @return {string}\n     */\n    const checkIfNameIsValid = async(name) => {\n\n        const slugified = slugify(transliterate(name));\n\n        // check for other box names\n        let otherFieldNames = [];\n\n        watchedFields.map((field, i) => {\n            if(i !== fieldIndex){\n                otherFieldNames.push(field.name);\n            }\n        });\n\n        if(otherFieldNames.includes(slugified)){\n            return useTranslation(\"Name is already taken\");\n        }\n\n        // check if the name already exists\n        if(field.name !== slugified){\n\n            const res = await wpAjaxRequest(\"checkMetaBoxFieldNameAction\", {\n                boxName: watchedBoxName ? watchedBoxName : field.boxName,\n                fieldName: slugified\n            });\n\n            if(res.exists === true){\n                return useTranslation(\"Name is already taken\");\n            }\n        }\n\n        return true;\n    };\n\n    const onChangeLabel = (value) => {\n        if(autoSlug){\n            const slugified = slugify(transliterate(value));\n\n            if(checkIfNameIsValid(slugified)){\n                clearErrors(formId(\"name\"));\n                setValue(formId(\"name\"), slugified);\n            }\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <div className=\"flex-column s-24\">\n                <div className=\"container align-end\">\n                    <div className=\"col-4\">\n                        <Label\n                            isRequired={false}\n                            id={formId(\"label\")}\n                            label={\n                                <div className=\"flex-between\">\n                                    <span>{useTranslation(\"Field label\")}</span>\n                                    <a\n                                        href=\"#\"\n                                        onClick={e => {\n                                            e.preventDefault();\n                                            setAutoSlug(!autoSlug);\n                                        }}\n                                    >\n                                        {useTranslation(`${autoSlug ? 'Auto slug ON' : 'Auto slug OFF'}`)}\n                                    </a>\n                                </div>\n                            }\n                        />\n                        <InputDebounced\n                            control={control}\n                            id={formId(\"label\")}\n                            placeholder={useTranslation(\"The field label, non latin characters are allowed\")}\n                            onChangeCapture={onChangeLabel}\n                            defaultValue={field.label}\n                            validate={{\n                                validate: checkIfNameIsValid,\n                                maxLength: {\n                                    value: 255,\n                                    message: \"max length is 255\"\n                                }\n                            }}\n\n                        />\n                    </div>\n                    <div className=\"col-4\">\n                        <Label\n                            isRequired={true}\n                            id={formId(\"name\")}\n                            label={useTranslation(\"Field slug\")}\n                        />\n                        <Input\n                            id={formId(\"name\")}\n                            register={register}\n                            errors={errors}\n                            placeholder={useTranslation(\"Field slug (Ex. gallery or text_1)\")}\n                            defaultValue={field.name}\n                            onClick={e => {\n                                if(e.target.value === 'meta_box_field'){\n                                    resetField(formId(\"name\"));\n                                }\n                            }}\n                            validate={{\n                                validate: {\n                                    alphanumericallyValid,\n                                    checkIfNameIsValid\n                                },\n                                required: useTranslation(\"This field is mandatory\"),\n                                maxLength: {\n                                    value: 255,\n                                    message: \"max length is 255\"\n                                }\n                            }}\n                        />\n                    </div>\n                    <div className=\"col-4\">\n                        <Label\n                            isRequired={true}\n                            id={formId(\"type\")}\n                            label={useTranslation(\"Choose the field type\")}\n                        />\n                        <Select\n                            register={register}\n                            id={formId(\"type\")}\n                            errors={errors}\n                            defaultValue={field.type}\n                            values={fieldsList(nestingLevel)}\n                            onChangeCapture={e => {\n                                handleFieldTypeChange(e.target.value);\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"container align-end\">\n                    <div className=\"col-6\">\n                        <Label\n                            id={formId(\"defaultValue\")}\n                            label={useTranslation(\"The default value for this field\")}\n                        />\n                        <Input\n                            id={formId(\"defaultValue\")}\n                            register={register}\n                            errors={errors}\n                            placeholder={useTranslation(\"Default value\")}\n                            defaultValue={field.defaultValue}\n                            validate={{\n                                maxLength: {\n                                    value: 255,\n                                    message: \"max length is 255\"\n                                }\n                            }}\n                        />\n                    </div>\n                    <div className=\"col-6\">\n                        <Label\n                            id={formId(\"description\")}\n                            label={useTranslation(\"The description of this field (showed only on admin panel)\")}\n                        />\n                        <Input\n                            id={formId(\"description\")}\n                            register={register}\n                            errors={errors}\n                            placeholder={useTranslation(\"A brief description\")}\n                            defaultValue={field.description}\n                            validate={{\n                                maxLength: {\n                                    value: 255,\n                                    message: \"max length is 255\"\n                                }\n                            }}\n                        />\n                    </div>\n                </div>\n            </div>\n            {fieldHasOptions(fieldType()) && (\n                <MetaOptionList\n                    boxId={boxId}\n                    fieldId={field.id}\n                    boxIndex={boxIndex}\n                    fieldIndex={fieldIndex}\n                    parentFieldId={field.parentId ? field.parentId : null}\n                    options={field.options ? field.options : []}\n                    isMulti={field.type === fieldTypes.SELECT_MULTI || field.type === fieldTypes.CHECKBOX}\n                />\n            )}\n        </React.Fragment>\n    );\n};\n\nBasicTab.propTypes = {\n    view: PropTypes.oneOf([\n        \"list\",\n        \"tabular\"\n    ]).isRequired,\n    formId: PropTypes.func.isRequired,\n    boxIndex: PropTypes.number.isRequired,\n    fieldIndex: PropTypes.number.isRequired,\n    boxId: PropTypes.string.isRequired,\n    field: PropTypes.object.isRequired,\n};\n\nexport default BasicTab;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport {useSortable} from \"@dnd-kit/sortable\";\nimport {CSS} from \"@dnd-kit/utilities\";\nimport InputHidden from \"../../../components/Forms/InputHidden\";\nimport MetaFieldHeader from \"./MetaFieldHeader\";\nimport Tabs from \"../../../components/Tabs\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Tab from \"../../../components/Tabs/Tab\";\nimport BasicTab from \"./Tabs/BasicTab\";\nimport {useFormContext, useWatch} from \"react-hook-form\";\nimport {getFormId} from \"../../../utils/fields\";\nimport {useSelector} from \"react-redux\";\nimport {Icon} from \"@iconify/react\";\nimport {useAutoAnimate} from \"@formkit/auto-animate/react\";\nimport LazyElement from \"../../../components/LazyElement\";\n\nconst MetaField = ({boxIndex, fieldIndex, view, boxId, field, parentFieldIndex, parentFieldId, parentBlockId, setActiveTab}) => {\n\n    // DND-kit\n    const {attributes, listeners, setNodeRef, transform} = useSortable({id: field.id});\n    const style = {\n        transform: CSS.Translate.toString(transform)\n    };\n\n    // auto-animate\n    const [parent] = useAutoAnimate();\n\n    // manage form state\n    const { register, control } = useFormContext();\n\n    // manage global state\n    const {group, closedElements} = useSelector(state => state.metaState);\n\n    /**\n     *\n     * @return {boolean}\n     */\n    const isClosed = () => {\n        const filter = closedElements.filter(e => e === field.id);\n\n        return filter.length === 1;\n    };\n\n    /**\n     *\n     * @param value\n     * @return {string}\n     */\n    const formId = (value) => {\n        return `${getFormId(group.boxes, boxId, field.id)}.${value}`;\n    };\n\n    const watchedFieldType = useWatch({\n        control,\n        name: formId(\"type\")\n    });\n\n    return (\n        <LazyElement\n            id={field.id}\n            element={\n                <div\n                    id={field.id}\n                    className={`bg-white b-rounded p-24 ${view === 'list' ? 'with-shadow' : ''}`}\n                    ref={view === 'list' ? setNodeRef : null}\n                    style={view === 'list' ? style : null}\n                >\n                    <InputHidden\n                        id={formId(\"id\")}\n                        value={field.id}\n                        register={register}\n                    />\n                    <InputHidden\n                        id={formId(\"parentId\")}\n                        value={parentFieldId ? parentFieldId : ''}\n                        register={register}\n                    />\n                    <InputHidden\n                        id={formId(\"blockId\")}\n                        value={parentBlockId ? parentBlockId : ''}\n                        register={register}\n                    />\n                    <div className={(view === 'tabular' || (!isClosed() && view === 'list')) ? 'mb-24' : ''}>\n                        <MetaFieldHeader\n                            setActiveTab={setActiveTab}\n                            boxIndex={boxIndex}\n                            fieldIndex={fieldIndex}\n                            parentFieldId={parentFieldId}\n                            parentBlockId={parentBlockId}\n                            formId={formId}\n                            attributes={view === 'list' ? attributes : null}\n                            listeners={view === 'list' ? listeners : null}\n                            boxId={boxId}\n                            field={field}\n                            view={view}\n                        />\n                    </div>\n                    <div ref={parent}>\n                        <div className={`${view === 'list' && isClosed() ? 'hidden' : ''}`}>\n                            <BasicTab\n                                view={view}\n                                boxIndex={boxIndex}\n                                fieldIndex={fieldIndex}\n                                formId={formId}\n                                boxId={boxId}\n                                field={field}\n                            />\n                        </div>\n                    </div>\n                </div>\n            }\n        />\n    );\n};\n\nMetaField.propTypes = {\n    boxIndex: PropTypes.number.isRequired,\n    fieldIndex: PropTypes.number.isRequired,\n    view: PropTypes.oneOf([\n        \"list\",\n        \"tabular\"\n    ]).isRequired,\n    boxId: PropTypes.string.isRequired,\n    field: PropTypes.object.isRequired,\n    parentFieldIndex: PropTypes.string,\n    parentFieldId: PropTypes.string,\n    parentBlockId: PropTypes.string,\n    setActiveTab: PropTypes.func\n};\n\nexport default MetaField;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {useFormContext, useWatch} from \"react-hook-form\";\nimport useTranslation from \"../../hooks/useTranslation\";\nimport {isEmpty} from \"../../utils/objects\";\nimport InputHidden from \"../../components/Forms/InputHidden\";\nimport {useSelector} from \"react-redux\";\n\nconst MetaGroupHeader = ({groupId, settingsVisible, setSettingsVisible}) => {\n\n    // manage form state\n    const { register, formState: {errors}, control } = useFormContext();\n    const watchedName = useWatch({\n        control,\n        name: \"name\"\n    });\n    const watchedLabel = useWatch({\n        control,\n        name: \"label\"\n    });\n\n    // manage global state\n    const {group} = useSelector(state => state.metaState);\n\n    /**\n     *\n     * @return {string|*}\n     */\n    const name = () => {\n\n        if(errors && errors['name']){\n            return (\n                <span className=\"invalid-feedback\">\n                    {useTranslation(\"Group name error(s). Please fix it.\")}\n                </span>\n            );\n        }\n\n        if(errors && errors['belongs']){\n            return (\n                <span className=\"invalid-feedback\">\n                    {useTranslation(\"Location rules error(s). Please fix it.\")}\n                </span>\n            );\n        }\n\n        if(watchedName){\n            return (\n                <span>{watchedName}</span>\n            );\n        }\n\n        return (\n            <span>{!isEmpty(group) ? group.name : \"group_name\"}</span>\n        );\n    };\n\n    /**\n     *\n     * @return {null|*}\n     */\n    const label = () => {\n\n        if(watchedLabel){\n            return (\n                <span className=\"color-gray\">{watchedLabel}</span>\n            );\n        }\n\n        if(!isEmpty(group) && group.label){\n            return (\n                <span className=\"color-gray\">{group.label}</span>\n            );\n        }\n\n        return useTranslation(\"Group name\");\n    };\n\n    return (\n        <React.Fragment>\n            <InputHidden\n                id=\"id\"\n                value={groupId}\n                register={register}\n            />\n            <div className=\"i-flex-center s-8\">\n                <h3>\n                    {name()}\n                </h3>\n                {label() && (\n                    <span className=\"top-1\">{label()}</span>\n                )}\n                <a\n                    href=\"#\"\n                    onClick={e => {\n                        e.preventDefault();\n                        setSettingsVisible(!settingsVisible);\n                    }}\n                >\n                    {useTranslation(settingsVisible ? \"Close settings\" : \"Open settings\")}\n                </a>\n            </div>\n        </React.Fragment>\n    );\n};\n\nMetaGroupHeader.propTypes = {\n    groupId: PropTypes.string.isRequired,\n    settingsVisible: PropTypes.bool.isRequired,\n    setSettingsVisible: PropTypes.func.isRequired,\n};\n\nexport default MetaGroupHeader;","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport useTranslation from \"../../hooks/useTranslation\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useFieldArray, useFormContext} from \"react-hook-form\";\nimport Label from \"../../components/Forms/Label\";\nimport Input from \"../../components/Forms/Input\";\nimport {isEmpty} from \"../../utils/objects\";\nimport {alphanumericallyValid} from \"../../utils/validation\";\nimport {slugify, transliterate} from \"transliteration\";\nimport BelongConditions from \"../../components/Forms/BelongConditions\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {addBelong, deleteBelong} from \"../../redux/reducers/metaStateSlice\";\nimport Select from \"../../components/Forms/Select\";\nimport {fieldGroupsDisplay} from \"../../constants/fields\";\n\nconst MetaGroupSettings = ({groupId}) => {\n\n    const documentGlobals = document.globals;\n    const globals = documentGlobals.globals;\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {group} = useSelector(state => state.metaState);\n    const findBelongsValues = globals.find;\n\n    // manage form state\n    const { control, register, unregister, formState: {errors}, setValue, resetField, clearErrors } = useFormContext();\n    const { append, remove } = useFieldArray({\n        control,\n        name: \"belongs\",\n    });\n\n    const handleAddBelong = () => {\n        const newBelong = {\n            id: uuidv4(),\n            belongsTo: null,\n            operator: \"=\",\n            find: null,\n            logic: null\n        };\n\n        dispatch(addBelong({belong: newBelong}));\n    };\n\n    const handleDeleteBelong = (index, id) => {\n        dispatch(deleteBelong({belongId: id}));\n        remove(index);\n    };\n\n    // mange local state\n    const [autoSlug, setAutoSlug] = useState(true);\n\n    /**\n     *\n     * @return {*}\n     */\n    const groupLabel = () => {\n        return (\n            <div className=\"flex-between s-8\">\n                <span>\n                    {useTranslation(\"Group label\")}\n                </span>\n                <a\n                    href=\"#\"\n                    onClick={e => {\n                        e.preventDefault();\n                        setAutoSlug(!autoSlug);\n                    }}\n                >\n                    {useTranslation(`${autoSlug ? 'Auto slug ON' : 'Auto slug OFF'}`)}\n                </a>\n            </div>\n        );\n    };\n\n    /**\n     *\n     * @return {[{label: *, value: string}, {label: *, value: string}, {label: *, value: string}, {label: *, value: string}]}\n     */\n    const displayOptions = () => {\n        return [\n            {\n                label: useTranslation(\"Standard view\"),\n                value: fieldGroupsDisplay.STANDARD\n            },\n            {\n                label: useTranslation(\"Accordion\"),\n                value: fieldGroupsDisplay.ACCORDION\n            },\n            {\n                label: useTranslation(\"Horizontal tabs\"),\n                value: fieldGroupsDisplay.HORIZONTAL_TABS\n            },\n            {\n                label: useTranslation(\"Vertical tabs\"),\n                value: fieldGroupsDisplay.VERTICAL_TABS\n            }\n        ];\n    };\n\n    return (\n        <div className=\"mb-24 bg-white with-shadow p-24\">\n            <div className=\"flex-column s-24\">\n                <div className=\"container\">\n                    <div className=\"col-4\">\n                        <Label id=\"label\" label={groupLabel()}/>\n                        <Input\n                            id=\"label\"\n                            register={register}\n                            placeholder={useTranslation(\"Group label\")}\n                            defaultValue={!isEmpty(group) ? group.label : null}\n                            errors={errors}\n                            onChangeCapture={e => {\n                                if(autoSlug){\n                                    setValue(\"name\", slugify(transliterate(e.target.value)));\n                                }\n                            }}\n                            onClick={e => {\n                                if(e.target.value === 'group name'){\n                                    resetField(\"label\");\n                                }\n                            }}\n                            validate={{\n                                maxLength: {\n                                    value: 255,\n                                    message: \"max length is 255\"\n                                }\n                            }}\n                        />\n                    </div>\n                    <div className=\"col-4\">\n                        <Label\n                            id=\"name\"\n                            label={useTranslation(\"Group name\")}\n                        />\n                        <Input\n                            id=\"name\"\n                            register={register}\n                            placeholder={useTranslation(\"Group name\")}\n                            defaultValue={!isEmpty(group) ? group.name : \"group_name\"}\n                            errors={errors}\n                            isRequired={true}\n                            validate={{\n                                validate: alphanumericallyValid,\n                                required: useTranslation(\"This field is mandatory\"),\n                                maxLength: {\n                                    value: 255,\n                                    message: \"max length is 255\"\n                                }\n                            }}\n                        />\n                    </div>\n                    <div className=\"col-4\">\n                        <Label\n                            id=\"display\"\n                            label={useTranslation(\"Display as\")}\n                        />\n                        <Select\n                            id=\"display\"\n                            register={register}\n                            errors={errors}\n                            values={displayOptions()}\n                            defaultValue={!isEmpty(group) && group.display ? group.display : fieldGroupsDisplay.STANDARD}\n                        />\n                    </div>\n                </div>\n                <fieldset className=\"acpt-fieldset\">\n                    <legend>\n                        {useTranslation(\"Location\")}\n                    </legend>\n                    <BelongConditions\n                        id=\"belongs\"\n                        values={findBelongsValues}\n                        conditions={group.belongs ? group.belongs : []}\n                        append={append}\n                        register={register}\n                        unregister={unregister}\n                        remove={remove}\n                        errors={errors}\n                        control={control}\n                        handleAddBelong={handleAddBelong}\n                        handleDeleteBelong={handleDeleteBelong}\n                        resetField={resetField}\n                        setValue={setValue}\n                        clearErrors={clearErrors}\n                    />\n                </fieldset>\n            </div>\n        </div>\n    );\n};\n\nMetaGroupSettings.propTypes = {\n    groupId: PropTypes.string.isRequired\n};\n\nexport default MetaGroupSettings;","import React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {wpAjaxRequest} from \"../../../utils/ajax\";\nimport {toast} from \"react-hot-toast\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport {refreshPage} from \"../../../utils/misc\";\nimport Button from \"../../../components/Button\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport Modal from \"../../../components/Modal\";\n\nconst CopyMetaBlocksModal = ({blockIds, modalOpen, setModalOpen}) => {\n\n    const documentGlobals = document.globals;\n    const globals = documentGlobals.globals;\n\n    // mange local state\n    const [group, setGroup] = useState(null);\n    const [boxes, setBoxes] = useState([]);\n    const [fields, setFields] = useState([]);\n    const [targetFieldId, setTargetFieldId] = useState(null);\n    const [deleteBlocks, setDeleteBlocks] = useState(false);\n\n    // reset state on open modal\n    useEffect(() => {\n        setGroup(null);\n        setBoxes([]);\n        setFields([]);\n        setTargetFieldId(null);\n        setDeleteBlocks(false);\n    }, [modalOpen]);\n\n    const handleGroupChange = (groupId) => {\n        setGroup(groupId);\n        setBoxes([]);\n        setFields([]);\n        setTargetFieldId(null);\n        setDeleteBlocks(false);\n\n        wpAjaxRequest('fetchMetaAction', {\n            id: groupId\n        })\n            .then(res => {\n                setBoxes(res.boxes);\n            })\n            .catch(err => console.err(err))\n        ;\n    };\n\n    const handleBoxChange = (boxId) => {\n        setFields([]);\n        const filteredFields = boxes.filter(b => b.id === boxId)[0].fields;\n        setFields(filteredFields);\n    };\n\n    const handleFieldChange = (fieldId) => {\n        setTargetFieldId(fieldId);\n    };\n\n    const handleSubmit = () => {\n\n        let blockIdsArray = [];\n        blockIds.map((b)=> { blockIdsArray.push(b.id); });\n\n        wpAjaxRequest('copyMetaBlocksAction', {\n            blockIds: blockIdsArray,\n            targetFieldId: targetFieldId,\n            delete: deleteBlocks\n        })\n            .then(res => {\n                if(res.success){\n                    toast.success(`${useTranslation(\"Meta block was successfully copied\")}.${useTranslation(\"The browser will refresh after 5 seconds.\")}`);\n                    setModalOpen(!modalOpen);\n                    refreshPage(5000);\n                } else {\n                    toast.error(res.error);\n                }\n            })\n            .catch(err => console.err(err))\n        ;\n    };\n\n    return (\n        <Modal\n            title={useTranslation('Copy selected meta blocks')}\n            visible={modalOpen}\n            buttons={[]}\n        >\n            <div className=\"flex-column s-24\">\n                <div>\n                    <label\n                        className=\"form-label i-flex-center s-4\"\n                        htmlFor=\"group\"\n                    >\n                        {useTranslation(\"Meta group\")}\n                    </label>\n                    <div className=\"acpt-select\">\n                        <select\n                            id=\"group\"\n                            className=\"form-control default\"\n                            onChangeCapture={e => handleGroupChange(e.target.value) }\n                        >\n                            {globals.find.meta.map((g) => (\n                                <option value={g.value}>\n                                    {g.label}\n                                </option>\n                            ))}\n                        </select>\n                    </div>\n                </div>\n                {boxes && boxes.length > 0 && (\n                    <div>\n                        <label\n                            className=\"form-label i-flex-center s-4\"\n                            htmlFor=\"box\"\n                        >\n                            {useTranslation(\"Meta box\")}\n                        </label>\n                        <div className=\"acpt-select\">\n                            <select\n                                id=\"box\"\n                                className=\"form-control default\"\n                                onChangeCapture={e => handleBoxChange(e.target.value) }\n                            >\n                                <option value={null}>{useTranslation(\"Select\")}</option>\n                                {boxes.map((b) => (\n                                    <option value={b.id}>\n                                        {b.name}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n                )}\n                {fields.length > 0 && (\n                    <div>\n                        <label\n                            className=\"form-label i-flex-center s-4\"\n                            htmlFor=\"field\"\n                        >\n                            {useTranslation(\"Meta field\")}\n                        </label>\n                        <div className=\"acpt-select\">\n                            <select\n                                id=\"field\"\n                                className=\"form-control default\"\n                                onChangeCapture={e => handleFieldChange(e.target.value) }\n                            >\n                                <option value={null}>{useTranslation(\"Select\")}</option>\n                                {fields.map((f) => (\n                                    <option value={f.id}>\n                                        {f.name}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n                )}\n                {targetFieldId && (\n                    <div>\n                        <div className=\"w-100 i-flex-center s-4 mb-8\">\n                            <input type=\"checkbox\" defaultValue={deleteBlocks} onClick={() => setDeleteBlocks(!deleteBlocks)} id=\"deleteBlocks\" />\n                            <label htmlFor=\"deleteBlocks\">\n                                {useTranslation(\"Delete the meta block after copying\")}\n                            </label>\n                        </div>\n                        <Button\n                            onClick={() => handleSubmit() }\n                            style={styleVariants.PRIMARY}\n                        >\n                            {useTranslation(\"Copy\")}\n                        </Button>\n                    </div>\n                )}\n            </div>\n        </Modal>\n    );\n};\n\nCopyMetaBlocksModal.propTypes = {\n    blockIds: PropTypes.array.isRequired,\n    modalOpen: PropTypes.bool.isRequired,\n    setModalOpen: PropTypes.func.isRequired,\n};\n\nexport default CopyMetaBlocksModal;","import React, {useEffect, useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport Modal from \"../../../components/Modal\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport {Icon} from \"@iconify/react\";\nimport Button from \"../../../components/Button\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport {wpAjaxRequest} from \"../../../utils/ajax\";\nimport {toast} from \"react-hot-toast\";\nimport {refreshPage} from \"../../../utils/misc\";\n\nconst CopyMetaBoxModal = ({box}) => {\n\n    const documentGlobals = document.globals;\n    const globals = documentGlobals.globals;\n\n    // manage local state\n    const [modalOpen, setModalOpen] = useState(false);\n    const [group, setGroup] = useState(null);\n    const [deleteBox, setDeleteBox] = useState(false);\n\n    // reset state on open modal\n    useEffect(() => {\n        setGroup(null);\n        setDeleteBox(false);\n    }, [modalOpen]);\n\n    const handleSubmit = () => {\n        wpAjaxRequest('copyMetaBoxAction', {\n                boxId: box.id,\n                targetGroupId: group,\n                delete: deleteBox\n            })\n            .then(res => {\n                if(res.success){\n                    toast.success(`${useTranslation(\"Meta box was successfully copied\")}.${useTranslation(\"The browser will refresh after 5 seconds.\")}`);\n                    setModalOpen(!modalOpen);\n                    refreshPage(5000);\n                } else {\n                    toast.error(res.error);\n                }\n            })\n            .catch(err => console.err(err))\n        ;\n    };\n\n    return (\n        <React.Fragment>\n            <Modal\n                title={useTranslation('Copy this meta box')}\n                visible={modalOpen}\n                buttons={[]}\n            >\n                <div className=\"flex-column s-24\">\n                    <div>\n                        <label\n                            className=\"form-label i-flex-center s-4\"\n                            htmlFor=\"group\"\n                        >\n                            {useTranslation(\"Meta group\")}\n                        </label>\n                        <div className=\"acpt-select\">\n                            <select\n                                id=\"group\"\n                                className=\"form-control default\"\n                                onChangeCapture={e => setGroup(e.target.value) }\n                            >\n                                {globals.find.meta.map((g) => (\n                                    <option value={g.value}>\n                                        {g.label}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n                    {group && group !== 'Select' && (\n                        <div>\n                            <div className=\"w-100 i-flex-center s-4 mb-8\">\n                                <input type=\"checkbox\" defaultValue={deleteBox} onClick={() => setDeleteBox(!deleteBox)} id=\"deleteBox\" />\n                                <label htmlFor=\"deleteBox\">\n                                    {useTranslation(\"Delete the meta box after copying\")}\n                                </label>\n                            </div>\n                            <Button\n                                onClick={() => handleSubmit() }\n                                style={styleVariants.PRIMARY}\n                            >\n                                {useTranslation(\"Copy\")}\n                            </Button>\n                        </div>\n                    )}\n                </div>\n            </Modal>\n            <a\n                href=\"\"\n                onClick={e => {\n                    e.preventDefault();\n                    setModalOpen(!modalOpen);\n                }}\n            >\n                <Icon icon=\"bx:copy\" width={18} />\n            </a>\n        </React.Fragment>\n    );\n};\n\nCopyMetaBoxModal.propTypes = {\n    box: PropTypes.object.isRequired,\n};\n\nexport default CopyMetaBoxModal;\n\n","import React, {useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport Modal from \"../../../components/Modal\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Button from \"../../../components/Button\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport {useDispatch} from \"react-redux\";\nimport {deselectAllElements} from \"../../../redux/reducers/metaStateSlice\";\nimport {wpAjaxRequest} from \"../../../utils/ajax\";\nimport {toast} from \"react-hot-toast\";\nimport {refreshPage} from \"../../../utils/misc\";\n\nconst CopyMetaBoxesModal = ({boxIds, modalOpen, setModalOpen}) => {\n\n    const documentGlobals = document.globals;\n    const globals = documentGlobals.globals;\n\n    // manage global state\n    const dispatch = useDispatch();\n\n    // manage local state\n    const [group, setGroup] = useState(null);\n    const [deleteBoxes, setDeleteBoxes] = useState(false);\n\n    const handleSubmit = () => {\n\n        let boxIdsArray = [];\n        boxIds.map((b)=> { boxIdsArray.push(b.id); });\n\n        wpAjaxRequest('copyMetaBoxesAction', {\n            boxIds: boxIdsArray,\n            targetGroupId: group,\n            delete: deleteBoxes\n        })\n            .then(res => {\n                if(res.success){\n                    toast.success(`${useTranslation(\"Meta box was successfully copied\")}.${useTranslation(\"The browser will refresh after 5 seconds.\")}`);\n                    setModalOpen(!modalOpen);\n                    dispatch(deselectAllElements());\n                    refreshPage(5000);\n                } else {\n                    toast.error(res.error);\n                }\n            })\n            .catch(err => console.err(err))\n        ;\n    };\n\n    return (\n        <React.Fragment>\n            <Modal\n                title={useTranslation('Copy selected meta boxes')}\n                visible={modalOpen}\n                buttons={[]}\n            >\n                <div className=\"flex-column s-24\">\n                    <div>\n                        <label\n                            className=\"form-label i-flex-center s-4\"\n                            htmlFor=\"group\"\n                        >\n                            {useTranslation(\"Meta group\")}\n                        </label>\n                        <div className=\"acpt-select\">\n                            <select\n                                id=\"group\"\n                                className=\"form-control default\"\n                                onChangeCapture={e => setGroup(e.target.value) }\n                            >\n                                {globals.find.meta.map((g) => (\n                                    <option value={g.value}>\n                                        {g.label}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n                    {group && group !== 'Select' && (\n                        <div>\n                            <div className=\"w-100 i-flex-center s-4 mb-8\">\n                                <input type=\"checkbox\" defaultValue={deleteBoxes} onClick={() => setDeleteBoxes(!deleteBoxes)} id=\"deleteBoxes\" />\n                                <label htmlFor=\"deleteBoxes\">\n                                    {useTranslation(\"Delete after copying\")}\n                                </label>\n                            </div>\n                            <Button\n                                onClick={() => handleSubmit() }\n                                style={styleVariants.PRIMARY}\n                            >\n                                {useTranslation(\"Copy\")}\n                            </Button>\n                        </div>\n                    )}\n                </div>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nCopyMetaBoxesModal.propTypes = {\n    boxIds: PropTypes.array.isRequired,\n    modalOpen: PropTypes.bool.isRequired,\n    setModalOpen: PropTypes.func.isRequired,\n};\n\nexport default CopyMetaBoxesModal;","import React, {useEffect, useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport Modal from \"../../../components/Modal\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport {Icon} from \"@iconify/react\";\nimport {wpAjaxRequest} from \"../../../utils/ajax\";\nimport {toast} from \"react-hot-toast\";\nimport {refreshPage} from \"../../../utils/misc\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport Button from \"../../../components/Button\";\nimport {fieldTypes} from \"../../../constants/fields\";\n\nconst CopyMetaFieldModal = ({field}) => {\n\n    const documentGlobals = document.globals;\n    const globals = documentGlobals.globals;\n\n    // mange local state\n    const [modalOpen, setModalOpen] = useState(false);\n    const [group, setGroup] = useState(null);\n    const [boxes, setBoxes] = useState([]);\n    const [fields, setFields] = useState([]);\n    const [targetEntityType, setTargetEntityType] = useState(null);\n    const [targetEntityId, setTargetEntityId] = useState(null);\n    const [deleteField, setDeleteField] = useState(false);\n\n    // reset state on open modal\n    useEffect(() => {\n        setGroup(null);\n        setBoxes([]);\n        setFields([]);\n        setTargetEntityType(null);\n        setTargetEntityId(null);\n        setDeleteField(false);\n    }, [modalOpen]);\n\n    const handleGroupChange = (groupId) => {\n        setGroup(groupId);\n        setBoxes([]);\n        setFields([]);\n        setTargetEntityType(null);\n        setTargetEntityId(null);\n        setDeleteField(false);\n\n        wpAjaxRequest('fetchMetaAction', {\n            id: groupId\n        })\n            .then(res => {\n                setBoxes(res.boxes);\n            })\n            .catch(err => console.err(err))\n        ;\n    };\n\n    const handleBoxChange = (boxId) => {\n\n        setFields([]);\n        setTargetEntityType(\"box\");\n        setTargetEntityId(boxId);\n\n        const filteredFields = boxes.filter(b => b.id === boxId)[0].fields;\n\n        if(filteredFields.length > 0){\n            const nestableFields = filteredFields.filter(f => (f.type === fieldTypes.REPEATER || f.type === fieldTypes.FLEXIBLE));\n\n            if(nestableFields.length > 0){\n                setFields(nestableFields);\n            }\n        }\n    };\n\n    const handleFieldChange = (fieldId) => {\n        setTargetEntityType(\"field\");\n        setTargetEntityId(fieldId);\n    };\n\n    const handleSubmit = () => {\n        wpAjaxRequest('copyMetaFieldAction', {\n            fieldId: field.id,\n            targetEntityType: targetEntityType,\n            targetEntityId: targetEntityId,\n            delete: deleteField\n        })\n            .then(res => {\n                if(res.success){\n                    toast.success(`${useTranslation(\"Meta field was successfully copied\")}.${useTranslation(\"The browser will refresh after 5 seconds.\")}`);\n                    setModalOpen(!modalOpen);\n                    refreshPage(5000);\n                } else {\n                    toast.error(res.error);\n                }\n            })\n            .catch(err => console.err(err))\n        ;\n    };\n\n    return (\n        <React.Fragment>\n            <Modal\n                title={useTranslation('Copy this meta field')}\n                visible={modalOpen}\n                buttons={[]}\n            >\n                <div className=\"flex-column s-24\">\n                    <div>\n                        <label\n                            className=\"form-label i-flex-center s-4\"\n                            htmlFor=\"group\"\n                        >\n                            {useTranslation(\"Meta group\")}\n                        </label>\n                        <div className=\"acpt-select\">\n                            <select\n                                id=\"group\"\n                                className=\"form-control default\"\n                                onChangeCapture={e => handleGroupChange(e.target.value) }\n                            >\n                                {globals.find.meta.map((g) => (\n                                    <option value={g.value}>\n                                        {g.label}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n                    {boxes && boxes.length > 0 && (\n                        <div>\n                            <label\n                                className=\"form-label i-flex-center s-4\"\n                                htmlFor=\"box\"\n                            >\n                                {useTranslation(\"Meta box\")}\n                            </label>\n                            <div className=\"acpt-select\">\n                                <select\n                                    id=\"box\"\n                                    className=\"form-control default\"\n                                    onChangeCapture={e => handleBoxChange(e.target.value) }\n                                >\n                                    <option value={null}>{useTranslation(\"Select\")}</option>\n                                    {boxes.map((b) => (\n                                        <option value={b.id}>\n                                            {b.name}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                    )}\n                    {fields.length > 0 && (\n                        <div>\n                            <label\n                                className=\"form-label i-flex-center s-4\"\n                                htmlFor=\"field\"\n                            >\n                                {useTranslation(\"Meta field\")}\n                            </label>\n                            <div className=\"acpt-select\">\n                                <select\n                                    id=\"field\"\n                                    className=\"form-control default\"\n                                    onChangeCapture={e => handleFieldChange(e.target.value) }\n                                >\n                                    <option value={null}>{useTranslation(\"Select\")}</option>\n                                    {fields.map((f) => (\n                                        <option value={f.id}>\n                                            {f.name}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                    )}\n                    {targetEntityType && targetEntityId && (\n                        <div>\n                            <div className=\"w-100 i-flex-center s-4 mb-8\">\n                                <input type=\"checkbox\" defaultValue={deleteField} onClick={() => setDeleteField(!deleteField)} id=\"deleteField\" />\n                                <label htmlFor=\"deleteField\">\n                                    {useTranslation(\"Delete the meta field after copying\")}\n                                </label>\n                            </div>\n                            <Button\n                                onClick={() => handleSubmit() }\n                                style={styleVariants.PRIMARY}\n                            >\n                                {useTranslation(\"Copy\")}\n                            </Button>\n                        </div>\n                    )}\n                </div>\n            </Modal>\n            <a\n                href=\"#\"\n                onClick={(e) => {\n                    e.preventDefault();\n                    setModalOpen(!modalOpen);\n                }}\n            >\n                <Icon icon=\"bx:copy\" width={18} />\n            </a>\n        </React.Fragment>\n    );\n};\n\nCopyMetaFieldModal.propTypes = {\n    field: PropTypes.object.isRequired,\n};\n\nexport default CopyMetaFieldModal;\n\n","import React, {useEffect, useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport Modal from \"../../../components/Modal\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Button from \"../../../components/Button\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport {useDispatch} from \"react-redux\";\nimport {wpAjaxRequest} from \"../../../utils/ajax\";\nimport {fieldTypes} from \"../../../constants/fields\";\nimport {toast} from \"react-hot-toast\";\nimport {refreshPage} from \"../../../utils/misc\";\nimport {deselectAllElements} from \"../../../redux/reducers/metaStateSlice\";\n\nconst CopyMetaFieldsModal = ({fieldIds, modalOpen, setModalOpen}) => {\n\n    const documentGlobals = document.globals;\n    const globals = documentGlobals.globals;\n\n    // manage global state\n    const dispatch = useDispatch();\n\n    // mange local state\n    const [group, setGroup] = useState(null);\n    const [boxes, setBoxes] = useState([]);\n    const [fields, setFields] = useState([]);\n    const [targetEntityType, setTargetEntityType] = useState(null);\n    const [targetEntityId, setTargetEntityId] = useState(null);\n    const [deleteFields, setDeleteFields] = useState(false);\n\n    // reset state on open modal\n    useEffect(() => {\n        setGroup(null);\n        setBoxes([]);\n        setFields([]);\n        setTargetEntityType(null);\n        setTargetEntityId(null);\n        setDeleteFields(false);\n    }, [modalOpen]);\n\n    const handleGroupChange = (groupId) => {\n        setGroup(groupId);\n        setBoxes([]);\n        setFields([]);\n        setTargetEntityType(null);\n        setTargetEntityId(null);\n        setDeleteFields(false);\n\n        wpAjaxRequest('fetchMetaAction', {\n            id: groupId\n        })\n            .then(res => {\n                setBoxes(res.boxes);\n            })\n            .catch(err => console.err(err))\n        ;\n    };\n\n    const handleBoxChange = (boxId) => {\n\n        setFields([]);\n        setTargetEntityType(\"box\");\n        setTargetEntityId(boxId);\n\n        const filteredFields = boxes.filter(b => b.id === boxId)[0].fields;\n\n        if(filteredFields.length > 0){\n            const nestableFields = filteredFields.filter(f => (f.type === fieldTypes.REPEATER || f.type === fieldTypes.FLEXIBLE));\n\n            if(nestableFields.length > 0){\n                setFields(nestableFields);\n            }\n        }\n    };\n\n    const handleFieldChange = (fieldId) => {\n        setTargetEntityType(\"field\");\n        setTargetEntityId(fieldId);\n    };\n\n    const handleSubmit = () => {\n\n        let fieldIdsArray = [];\n        fieldIds.map((f)=> { fieldIdsArray.push(f.id); });\n\n        wpAjaxRequest('copyMetaFieldsAction', {\n            fieldIds: fieldIdsArray,\n            targetEntityType: targetEntityType,\n            targetEntityId: targetEntityId,\n            delete: deleteFields\n        })\n            .then(res => {\n                if(res.success){\n                    toast.success(`${useTranslation(\"Meta field was successfully copied\")}.${useTranslation(\"The browser will refresh after 5 seconds.\")}`);\n                    setModalOpen(!modalOpen);\n                    dispatch(deselectAllElements());\n                    refreshPage(5000);\n                } else {\n                    toast.error(res.error);\n                }\n            })\n            .catch(err => console.err(err))\n        ;\n    };\n\n    return (\n        <React.Fragment>\n            <Modal\n                title={useTranslation('Copy selected meta fields')}\n                visible={modalOpen}\n                buttons={[]}\n            >\n                <div className=\"flex-column s-24\">\n                    <div>\n                        <label\n                            className=\"form-label i-flex-center s-4\"\n                            htmlFor=\"group\"\n                        >\n                            {useTranslation(\"Meta group\")}\n                        </label>\n                        <div className=\"acpt-select\">\n                            <select\n                                id=\"group\"\n                                className=\"form-control default\"\n                                onChangeCapture={e => handleGroupChange(e.target.value) }\n                            >\n                                {globals.find.meta.map((g) => (\n                                    <option value={g.value}>\n                                        {g.label}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n                    {boxes.length > 0 && (\n                        <div>\n                            <label\n                                className=\"form-label i-flex-center s-4\"\n                                htmlFor=\"box\"\n                            >\n                                {useTranslation(\"Meta box\")}\n                            </label>\n                            <div className=\"acpt-select\">\n                                <select\n                                    id=\"box\"\n                                    className=\"form-control default\"\n                                    onChangeCapture={e => handleBoxChange(e.target.value) }\n                                >\n                                    <option value={null}>{useTranslation(\"Select\")}</option>\n                                    {boxes.map((b) => (\n                                        <option value={b.id}>\n                                            {b.name}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                    )}\n                    {fields.length > 0 && (\n                        <div>\n                            <label\n                                className=\"form-label i-flex-center s-4\"\n                                htmlFor=\"field\"\n                            >\n                                {useTranslation(\"Meta field\")}\n                            </label>\n                            <div className=\"acpt-select\">\n                                <select\n                                    id=\"field\"\n                                    className=\"form-control default\"\n                                    onChangeCapture={e => handleFieldChange(e.target.value) }\n                                >\n                                    <option value={null}>{useTranslation(\"Select\")}</option>\n                                    {fields.map((f) => (\n                                        <option value={f.id}>\n                                            {f.name}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                    )}\n                    {targetEntityType && targetEntityId && (\n                        <div>\n                            <div className=\"w-100 i-flex-center s-4 mb-8\">\n                                <input type=\"checkbox\" defaultValue={deleteFields} onClick={() => setDeleteFields(!deleteFields)} id=\"deleteFields\" />\n                                <label htmlFor=\"deleteFields\">\n                                    {useTranslation(\"Delete the meta field after copying\")}\n                                </label>\n                            </div>\n                            <Button\n                                onClick={() => handleSubmit() }\n                                style={styleVariants.PRIMARY}\n                            >\n                                {useTranslation(\"Copy\")}\n                            </Button>\n                        </div>\n                    )}\n                </div>\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nCopyMetaFieldsModal.propTypes = {\n    fieldIds: PropTypes.array.isRequired,\n    modalOpen: PropTypes.bool.isRequired,\n    setModalOpen: PropTypes.func.isRequired,\n};\n\nexport default CopyMetaFieldsModal;","import React, {useState} from \"react\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Modal from \"../../../components/Modal\";\nimport Button from \"../../../components/Button\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport {useDispatch} from \"react-redux\";\nimport {deleteAllBoxes} from \"../../../redux/reducers/metaStateSlice\";\nimport {useFormContext} from \"react-hook-form\";\n\nconst DeleteAllMetaBoxesModal = () => {\n\n    // manage global state\n    const dispatch = useDispatch();\n\n    // manage local state\n    const [modalOpen, setModalOpen] = useState(false);\n    \n    // manage form state\n    const { unregister } = useFormContext();\n\n    const buttons = [\n        <Button style={styleVariants.SUCCESS} onClick={(e) => {\n            e.preventDefault();\n            dispatch(deleteAllBoxes());\n            unregister(\"boxes\");\n            setModalOpen(!modalOpen);\n        }}>\n            {useTranslation(\"Yes\")}\n        </Button>,\n        <Button style={styleVariants.DANGER} onClick={(e) => {\n            e.preventDefault();\n            setModalOpen(!modalOpen);\n        }}>\n            {useTranslation(\"No\")}\n        </Button>,\n    ];\n\n    return (\n        <React.Fragment>\n            <Modal\n                title={useTranslation('Confirm deleting all')}\n                visible={modalOpen}\n                buttons={buttons}\n            >\n                {useTranslation(\"Are you sure?\")}\n            </Modal>\n            <Button\n                type=\"button\"\n                style={styleVariants.DANGER}\n                onClick={(e) => {\n                    e.preventDefault();\n                    setModalOpen(!modalOpen);\n                }}\n            >\n                {useTranslation(\"Delete all\")}\n            </Button>\n        </React.Fragment>\n        \n    );\n};\n\nexport default DeleteAllMetaBoxesModal;\n","import React, {useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Modal from \"../../../components/Modal\";\nimport Button from \"../../../components/Button\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport {useDispatch} from \"react-redux\";\nimport {deleteBox} from \"../../../redux/reducers/metaStateSlice\";\nimport {useFieldArray, useFormContext} from \"react-hook-form\";\nimport {Icon} from \"@iconify/react\";\n\nconst DeleteMetaBoxModal = ({index, boxId, setActiveTab}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n\n    // manage form state\n    const { control } = useFormContext();\n    const { remove } = useFieldArray({\n        control,\n        name: \"boxes\",\n    });\n\n    // manage local state\n    const [modalOpen, setModalOpen] = useState(false);\n\n    const buttons = [\n        <Button style={styleVariants.SUCCESS} onClick={(e) => {\n            e.preventDefault();\n            dispatch(deleteBox(boxId));\n            remove(index);\n            setModalOpen(!modalOpen);\n\n            if(setActiveTab){\n                setActiveTab(0);\n            }\n        }}>\n            {useTranslation(\"Yes\")}\n        </Button>,\n        <Button style={styleVariants.DANGER} onClick={(e) => {\n            e.preventDefault();\n            setModalOpen(!modalOpen);\n        }}>\n            {useTranslation(\"No\")}\n        </Button>,\n    ];\n\n    return (\n        <React.Fragment>\n            <Modal\n                title={useTranslation('Confirm deleting meta box')}\n                visible={modalOpen}\n                buttons={buttons}\n            >\n                {useTranslation(\"Are you sure?\")}\n            </Modal>\n            <a\n                href=\"#\"\n                onClick={e => {\n                    e.preventDefault();\n                    setModalOpen(!modalOpen);\n                }}\n            >\n                <Icon icon=\"bx-trash\" width={18} />\n            </a>\n        </React.Fragment>\n    );\n};\n\nDeleteMetaBoxModal.propTypes = {\n    setActiveTab: PropTypes.func,\n    index: PropTypes.number.isRequired,\n    boxId: PropTypes.string.isRequired,\n};\n\nexport default DeleteMetaBoxModal;\n","import React, {useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Modal from \"../../../components/Modal\";\nimport Button from \"../../../components/Button\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {deleteField} from \"../../../redux/reducers/metaStateSlice\";\nimport {useFieldArray, useFormContext} from \"react-hook-form\";\nimport {getFormId} from \"../../../utils/fields\";\nimport {Icon} from \"@iconify/react\";\n\nconst DeleteMetaFieldModal = ({boxId, fieldId, fieldIndex, parentFieldId, parentBlockId, setActiveTab}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {group} = useSelector(state => state.metaState);\n\n    const formId = () => {\n        return getFormId(group.boxes, boxId, fieldId, false);\n    };\n\n    // mange local state\n    const [modalOpen, setModalOpen] = useState(false);\n\n    // manage form state\n    const { control } = useFormContext();\n    const { remove } = useFieldArray({\n        control,\n        name: formId(),\n    });\n\n    const buttons = [\n        <Button style={styleVariants.SUCCESS} onClick={(e) => {\n            e.preventDefault();\n            dispatch(deleteField({boxId, parentFieldId, parentBlockId, fieldId}));\n            remove(fieldIndex);\n            setModalOpen(!modalOpen);\n\n            if(setActiveTab){\n                setActiveTab(0);\n            }\n        }}>\n            {useTranslation(\"Yes\")}\n        </Button>,\n        <Button style={styleVariants.DANGER} onClick={(e) => {\n            e.preventDefault();\n            setModalOpen(!modalOpen);\n        }}>\n            {useTranslation(\"No\")}\n        </Button>,\n    ];\n\n    return (\n        <React.Fragment>\n            <Modal\n                title={useTranslation('Confirm deleting meta field')}\n                visible={modalOpen}\n                buttons={buttons}\n            >\n                {useTranslation(\"Are you sure?\")}\n            </Modal>\n            <a\n                href=\"#\"\n                onClick={e => {\n                    e.preventDefault();\n                    setModalOpen(!modalOpen);\n                }}\n            >\n                <Icon icon=\"bx-trash\" width={18} />\n            </a>\n        </React.Fragment>\n        \n    );\n};\n\nDeleteMetaFieldModal.propTypes = {\n    setActiveTab: PropTypes.func,\n    boxId: PropTypes.string.isRequired,\n    fieldId: PropTypes.string.isRequired,\n    fieldIndex: PropTypes.number.isRequired,\n    parentFieldId: PropTypes.string,\n    parentBlockId: PropTypes.string,\n};\n\nexport default DeleteMetaFieldModal;\n","import React, {useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Modal from \"../../../components/Modal\";\nimport Button from \"../../../components/Button\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {deleteOption} from \"../../../redux/reducers/metaStateSlice\";\nimport {useFieldArray, useFormContext} from \"react-hook-form\";\nimport {getFormId} from \"../../../utils/fields\";\nimport {Icon} from \"@iconify/react\";\nimport Tooltip from \"../../../components/Tooltip\";\n\nconst DeleteMetaOptionModal = ({boxId, fieldId, optionId, parentFieldId, optionIndex}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {group} = useSelector(state => state.metaState);\n\n    const formId = () => {\n        return `${getFormId(group.boxes, boxId, fieldId)}.options`;\n    };\n\n    // mange local state\n    const [modalOpen, setModalOpen] = useState(false);\n\n    // manage form state\n    const { control } = useFormContext();\n    const { remove } = useFieldArray({\n        control,\n        name: formId(),\n    });\n\n    const buttons = [\n        <Button style={styleVariants.SUCCESS} onClick={(e) => {\n            e.preventDefault();\n            dispatch(deleteOption({boxId, fieldId, parentFieldId, optionId}));\n            remove(optionIndex);\n            setModalOpen(!modalOpen);\n        }}>\n            {useTranslation(\"Yes\")}\n        </Button>,\n        <Button style={styleVariants.DANGER} onClick={(e) => {\n            e.preventDefault();\n            setModalOpen(!modalOpen);\n        }}>\n            {useTranslation(\"No\")}\n        </Button>,\n    ];\n\n    return (\n        <span>\n            <Modal\n                title={useTranslation('Confirm deleting option')}\n                visible={modalOpen}\n                buttons={buttons}\n            >\n                {useTranslation(\"Are you sure?\")}\n            </Modal>\n            <a\n                href=\"#\"\n                onClick={(e) => {\n                    e.preventDefault();\n                    setModalOpen(!modalOpen);\n                }}\n            >\n                <Tooltip\n                    icon={false}\n                    tip={useTranslation(\"Delete\")}\n                    label={<Icon icon=\"bx-minus\"/>}\n                />\n            </a>\n        </span>\n    );\n};\n\nDeleteMetaOptionModal.propTypes = {\n    boxId: PropTypes.string.isRequired,\n    fieldId: PropTypes.string.isRequired,\n    parentFieldId: PropTypes.string,\n    optionId: PropTypes.string.isRequired,\n    optionIndex: PropTypes.number.isRequired\n};\n\nexport default DeleteMetaOptionModal;\n","import React, {useEffect, useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport Modal from \"../../../components/Modal\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Button from \"../../../components/Button\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport CopyElement from \"../../../components/CopyElement\";\nimport {useFormContext, useWatch} from \"react-hook-form\";\nimport Tooltip from \"../../../components/Tooltip\";\nimport {useSelector} from \"react-redux\";\nimport {getFormId} from \"../../../utils/fields\";\nimport {wpAjaxRequest} from \"../../../utils/ajax\";\nimport {Icon} from \"@iconify/react\";\n\nconst MetaFieldShortCodeModal = ({boxId, field, parentFieldId, parentBlockId}) => {\n\n    // manage global state\n    const {group} = useSelector(state => state.metaState);\n    const boxIndex = group.boxes.findIndex(b => b.id === boxId);\n    const formId = getFormId(group.boxes, boxId, field.id);\n    const formIdArray = formId.split('.');\n\n    // mange local state\n    const [loading, isLoading] = useState(false);\n    const [shortCodes, setShortCodes] = useState([]);\n    const [metaKey, setMetaKey] = useState(null);\n    const [modalOpen, setModalOpen] = useState(false);\n    \n    // manage form state\n    const { control } = useFormContext();\n    const watchedBelongs = useWatch({\n        control,\n        name: `belongs`\n    });\n    const watchedBoxName = useWatch({\n        control,\n        name: `boxes.${boxIndex}.name`\n    });\n    const watchedField = useWatch({\n        control,\n        name: formId\n    });\n    const watchedFieldRootName = useWatch({\n        control,\n        name: `boxes.${boxIndex}.fields.${formIdArray[3]}.name`\n    });\n\n    let watchedParentBlock = null;\n    let watchedParentField = null;\n    let indexInfo = formIdArray[(formIdArray.length-1)];\n    let blockIndexInfo = (parentBlockId) ? formIdArray[(formIdArray.length-3)] : null;\n\n    if(parentBlockId){\n        watchedParentBlock = useWatch({\n            control,\n            name: getFormId(group.boxes, boxId, parentBlockId)\n        });\n    }\n\n    if(parentFieldId){\n        watchedParentField = useWatch({\n            control,\n            name: getFormId(group.boxes, boxId, parentFieldId)\n        });\n    }\n\n    useEffect(() => {\n        if(modalOpen){\n            isLoading(true);\n\n            wpAjaxRequest(\"calculateShortCodeAction\", {\n                belongsTo: watchedBelongs,\n                boxName: watchedBoxName,\n                fieldId: field.id,\n                fieldName: watchedField ? watchedField.name : field.name,\n                fieldRootName: watchedFieldRootName,\n                parentBlockName: watchedParentBlock ? watchedParentBlock.name : null,\n                parentFieldName: watchedParentField ? watchedParentField.name : null,\n                index: indexInfo,\n                blockIndexInfo: blockIndexInfo\n            })\n                .then(res => {\n                    setMetaKey(res.metaKey);\n                    setShortCodes(res.shortcodes);\n                    isLoading(false);\n                })\n                .catch(err => {\n                    console.error(err.message);\n                    isLoading(false);\n                })\n            ;\n        }\n    }, [modalOpen]);\n\n    const buttons = [\n        <Button style={styleVariants.DANGER} onClick={(e) => {\n            e.preventDefault();\n            setModalOpen(!modalOpen);\n        }}>\n            {useTranslation(\"Close\")}\n        </Button>,\n    ];\n\n    return (\n        <React.Fragment>\n            <Modal\n                title={useTranslation('Shortcode preview')}\n                visible={modalOpen}\n                padding={0}\n                buttons={buttons}\n            >\n                {loading ? (\n                    <div className=\"b-bottom-1 p-24\">\n                        {useTranslation(\"Loading...\")}\n                    </div>\n                ) : (\n                    <React.Fragment>\n                        {metaKey && (\n                            <div className=\"b-bottom-1 p-24\">\n                                <div className=\"mb-8 color-black\">\n                                    <Tooltip\n                                        label={useTranslation(\"Meta-key\")}\n                                        tip={\n                                            <div className=\"flex-column s-8 color-gray\">\n                                                <div>{useTranslation(\"This is the meta-key of this field.\")}</div>\n                                                <div>{useTranslation(\"Use it in functions like get_post_meta() to retrieve saved meta field data.\")}</div>\n                                            </div>\n                                        }\n                                    />\n                                </div>\n                                <CopyElement text={metaKey}/>\n                            </div>\n                        )}\n                        {shortCodes && shortCodes.length > 0 && (\n                            <div className=\"p-24\">\n                                <div className=\"mb-8 color-black\">\n                                    <Tooltip\n                                        label={shortCodes.length > 1 ? useTranslation(\"Shortcodes\") : useTranslation(\"Shortcode\")}\n                                        tip={\n                                            <div className=\"flex-column s-8 color-gray\">\n                                                <div>{useTranslation(\"Use this shortcode to display the meta field on your frontend.\")}</div>\n                                            </div>\n                                        }\n                                    />\n                                </div>\n                                {shortCodes && (\n                                    <div className=\"flex-column s-8\">\n                                        {shortCodes.map((shortCode)=>(\n                                            <CopyElement text={shortCode}/>\n                                        ))}\n                                    </div>\n                                )}\n                            </div>\n                        )}\n                    </React.Fragment>\n                )}\n            </Modal>\n            <a\n                href=\"#\"\n                onClick={e => {\n                    e.preventDefault();\n                    setModalOpen(!modalOpen);\n                }}\n            >\n                <Icon icon=\"bx:code-alt\" width={18} />\n            </a>\n        </React.Fragment>\n    );\n};\n\nMetaFieldShortCodeModal.propTypes = {\n    boxId: PropTypes.string.isRequired,\n    field: PropTypes.object.isRequired,\n    parentFieldId: PropTypes.string,\n    parentBlockId: PropTypes.string,\n};\n\nexport default MetaFieldShortCodeModal;","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport {useSortable} from \"@dnd-kit/sortable\";\nimport {CSS} from \"@dnd-kit/utilities\";\nimport {Icon} from \"@iconify/react\";\nimport Badge from \"../../../components/Badge\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport {useFormContext, useWatch} from \"react-hook-form\";\nimport ElementSelector from \"../BulkActions/ElementSelector\";\nimport {useSelector} from \"react-redux\";\n\nconst BoxSortableTab = ({index, box, activeTab = 0, onClick}) => {\n\n    // manage global state\n    const {selectedElementsType} = useSelector(state => state.metaState);\n\n    // manage form state\n    const { control } = useFormContext();\n    const watchedBoxName = useWatch({\n        control,\n        name: `boxes.${index}.name`\n    });\n\n    // DND-kit\n    const {attributes, listeners, setNodeRef, transform} = useSortable({id: box.id});\n    const style = {\n        transform: CSS.Translate.toString(transform)\n    };\n\n    /**\n     *\n     * @return {boolean}\n     */\n    const canCopyTheBox = () => {\n\n        if(typeof box.isSaved !== 'undefined' && box.isSaved === false){\n            return false\n        }\n\n        return true;\n    };\n\n    return (\n        <div\n            id={box.id}\n            className={`flex-between s-8 tab ${activeTab === index ? 'active' : ''}`}\n            ref={setNodeRef}\n            style={style}\n            onClick={() => {\n                if(onClick){\n                    onClick(index);\n                }\n            }}\n        >\n            <span className=\"cursor-move top-2 handle\" {...attributes} {...listeners}>\n                <Icon icon=\"bx:dots-vertical-rounded\" color=\"#777\" width={18} />\n            </span>\n            {selectedElementsType !== 'field' && selectedElementsType !== 'block' && canCopyTheBox() && (\n                <ElementSelector\n                    elementType=\"box\"\n                    element={{\n                        id: box.id\n                    }}\n                />\n            )}\n            <span className=\"text-ellipsis\">\n                {watchedBoxName ? watchedBoxName : box.name}\n            </span>\n            <Badge style={index === activeTab ? styleVariants.SECONDARY : styleVariants.DISABLED}>\n                {box.fields ? box.fields.length : 0}\n            </Badge>\n        </div>\n    );\n};\n\nBoxSortableTab.propTypes = {\n    index: PropTypes.number.isRequired,\n    box: PropTypes.object.isRequired,\n    activeTab: PropTypes.number,\n};\n\nexport default BoxSortableTab;\n","import React, {useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport {isEmpty} from \"../../../utils/objects\";\nimport SwitchView from \"../../../components/SwitchView\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {v4 as uuidv4} from \"uuid\";\nimport MetaGroupHeader from \"../MetaGroupHeader\";\nimport Alert from \"../../../components/Alert\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport BoxSortableTab from \"./BoxSortableTab\";\nimport {arrayMove} from \"@dnd-kit/sortable\";\nimport {setBoxes} from \"../../../redux/reducers/metaStateSlice\";\nimport SortableList from \"../../../components/SortableList\";\nimport {useFieldArray, useFormContext} from \"react-hook-form\";\nimport MetaBox from \"../MetaBox\";\nimport MetaGroupSettings from \"../MetaGroupSettings\";\nimport {useParams} from \"react-router-dom\";\nimport {useAutoAnimate} from \"@formkit/auto-animate/react\";\nimport BulkActions from \"../BulkActions\";\n\nconst TabularView = ({boxes, view, setView, activeBoxTab, setActiveBoxTab}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {group} = useSelector(state => state.metaState);\n\n    // auto-animate\n    const [parent] = useAutoAnimate();\n\n    // manage local state\n    const newGroupId = uuidv4();\n    const {id} = useParams();\n    const [settingsVisible, setSettingsVisible] = useState(typeof id !== 'string');\n\n    const handleTabChange = (index) => {\n        setActiveBoxTab(index);\n    };\n\n    // manage form state\n    const { control } = useFormContext();\n    const { move } = useFieldArray({\n        control,\n        name: \"boxes\",\n    });\n\n    const handleDragEnd = (event) => {\n        const {active, over} = event;\n\n        if(active.id === over.id){\n            return;\n        }\n\n        const oldIndex = boxes.findIndex((box) => box.id === active.id);\n        const newIndex = boxes.findIndex((box) => box.id === over.id);\n        const sortedBoxes = arrayMove(boxes, oldIndex, newIndex);\n        move(oldIndex, newIndex);\n        setActiveBoxTab(newIndex);\n\n        dispatch(setBoxes(sortedBoxes));\n    };\n\n    return (\n        <React.Fragment>\n            <div className=\"flex-between mb-24\">\n                <MetaGroupHeader\n                    groupId={!isEmpty(group) ? group.id : newGroupId}\n                    settingsVisible={settingsVisible}\n                    setSettingsVisible={setSettingsVisible}\n                />\n                <SwitchView\n                    localStorageKey={!isEmpty(group) ? group.id : newGroupId}\n                    setView={setView}\n                    view={view}\n                />\n            </div>\n            <div className={!settingsVisible ? 'hidden' : ''}>\n                <MetaGroupSettings\n                    groupId={!isEmpty(group) ? group.id : newGroupId}\n                />\n            </div>\n            <div ref={parent}>\n                <BulkActions\n                    view=\"tab\"\n                    setBoxTab={setActiveBoxTab}\n                />\n                {boxes && boxes.length > 0 ? (\n                    <div className=\"acpt-horizontal-tabs\">\n                        <div className=\"tablist\">\n                            <SortableList\n                                onDragEnd={handleDragEnd}\n                                items={boxes}\n                            >\n                                {boxes.map((box, index) => {\n                                    return (\n                                        <BoxSortableTab\n                                            index={index}\n                                            box={box}\n                                            activeTab={activeBoxTab}\n                                            onClick={handleTabChange}\n                                        />\n                                    )\n                                })}\n                            </SortableList>\n                        </div>\n                        {boxes.map((box, index) => (\n                            <React.Fragment>\n                                {index === activeBoxTab && (\n                                    <div className=\"tab-panel\">\n                                        <MetaBox\n                                            index={index}\n                                            key={box.id}\n                                            view=\"tabular\"\n                                            box={box}\n                                            setActiveTab={setActiveBoxTab}\n                                        />\n                                    </div>\n                                )}\n                            </React.Fragment>\n                        ))}\n                    </div>\n                ) : (\n                    <Alert style={styleVariants.WARNING}>\n                        {useTranslation('No meta box already created. Create the first one now by clicking the button \"Add meta box\"!')}\n                    </Alert>\n                )}\n            </div>\n        </React.Fragment>\n    );\n};\n\nTabularView.propTypes = {\n    view: PropTypes.string.isRequired,\n    setView: PropTypes.func.isRequired,\n    boxes: PropTypes.array.isRequired,\n    activeBoxTab: PropTypes.number.isRequired,\n    setActiveBoxTab: PropTypes.func.isRequired\n};\n\nexport default TabularView;","import React, {useEffect, useState} from 'react';\nimport Layout from \"../../layout/Layout\";\nimport useTranslation from \"../../hooks/useTranslation\";\nimport Button from \"../../components/Button\";\nimport {styleVariants} from \"../../constants/styles\";\nimport {FormProvider, useForm} from \"react-hook-form\";\nimport {changeCurrentAdminMenuLink, delay, metaTitle} from \"../../utils/misc\";\nimport {useNavigate, useParams, useSearchParams} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {fetchMeta} from \"../../redux/reducers/fetchMetaSlice\";\nimport Loader from \"../../components/Loader\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {isEmpty} from \"../../utils/objects\";\nimport ListView from \"./ListView\";\nimport TabularView from \"./TabularView\";\nimport PageNotFound from \"../404\";\nimport {addBox, hydrateState} from \"../../redux/reducers/metaStateSlice\";\nimport DeleteAllMetaBoxesModal from \"./Modal/DeleteAllMetaBoxesModal\";\nimport {savedView} from \"../../utils/localStorage\";\nimport {scrollToId, scrollToTop} from \"../../utils/scroll\";\nimport {saveMeta} from \"../../redux/reducers/saveMetaSlice\";\nimport {toast} from \"react-hot-toast\";\nimport {useConfirmTabClose} from \"../../hooks/useConfirmTabClose\";\n\nconst Meta = () => {\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {error: saveError, success: saveSuccess, loading: saveLoading} = useSelector(state => state.saveMeta);\n    const {loading} = useSelector(state => state.fetchMeta);\n    const {group} = useSelector(state => state.metaState);\n\n    // manage local state\n    const newGroupId = uuidv4();\n    const {id} = useParams();\n    const [searchParams, setSearchParams] = useSearchParams();\n    const groupId = id ? id : newGroupId;\n    const [isSubmitting, setIsSubmitted] = useState(false);\n    const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n    const [fetchError, setFetchError] = useState(false);\n    const [view, setView] = useState(savedView(groupId));\n    const [activeBoxTab, setActiveBoxTab] = useState(0);\n\n    // manage redirect\n    const navigate = useNavigate();\n\n    // form init\n    const methods = useForm({\n        mode: 'onChange'\n    });\n\n    useEffect(() => {\n        metaTitle(`${useTranslation(\"Manage meta fields\")}${(hasUnsavedChanges) ? '*' : ''}`);\n    }, [hasUnsavedChanges]);\n\n    useConfirmTabClose(hasUnsavedChanges);\n\n    /**\n     * Add box\n     */\n    const handleAddBox = () => {\n\n        const newBoxId = uuidv4();\n        const newBox = {\n            id: newBoxId,\n            name: useTranslation(\"meta_box_title\"),\n            UIName: useTranslation(\"meta_box_title\"),\n            label: \"meta box title\",\n            fields: [],\n            isSaved: false,\n            sort: group.boxes ? group.boxes.length : 1\n        };\n\n        dispatch(addBox(newBox));\n        setActiveBoxTab(group.boxes ? group.boxes.length : 0);\n\n        delay(1).then(()=>{\n            scrollToId(`lazy-${newBoxId}`);\n        });\n    };\n\n    // manage local state\n    useEffect(() => {\n        metaTitle(useTranslation(\"Manage meta fields\"));\n        changeCurrentAdminMenuLink('#/meta');\n\n        if(id){\n            dispatch(fetchMeta({\n                id: id\n            }))\n                .then(res => {\n                    dispatch(hydrateState(res.payload));\n\n                    // Set initial values\n                    methods.setValue('id', id);\n                    methods.setValue('name', res.payload.name);\n                    methods.setValue('label', res.payload.label);\n                    methods.setValue('display', res.payload.display);\n                    res.payload.belongs && res.payload.belongs.map((belong, index) => {\n                        methods.setValue(`belongs.${index}.id`, belong.id);\n                        methods.setValue(`belongs.${index}.belongsTo`, belong.belongsTo);\n                        methods.setValue(`belongs.${index}.operator`, belong.operator);\n                        methods.setValue(`belongs.${index}.find`, belong.find);\n                        methods.setValue(`belongs.${index}.logic`, belong.logic);\n                    });\n                    res.payload.boxes && res.payload.boxes.map((box, index) => {\n                        methods.setValue(`boxes.${index}`, box);\n                    });\n                })\n                .catch(err => {\n                    console.error(err);\n                    setFetchError(true);\n                });\n        } else {\n            // Set initial name\n            const find = searchParams.get('find');\n            const belongsTo = searchParams.get('belongsTo');\n\n            const newGroupName = `${find ? find+'_' : ''}group_name`;\n            const newGroupLabel = `${find ? find+' ' : ''}group name`;\n\n            let state = {\n                name: newGroupName,\n                label: newGroupLabel,\n            };\n\n            methods.reset();\n            methods.setValue('name', newGroupName);\n            methods.setValue('label', newGroupLabel);\n\n            if(find && belongsTo){\n                const newUuid = uuidv4();\n\n                methods.setValue(`belongs.0.id`, newUuid);\n                methods.setValue(`belongs.0.belongsTo`, belongsTo);\n                methods.setValue(`belongs.0.operator`, \"=\");\n                methods.setValue(`belongs.0.find`, find);\n\n                state.belongs = [];\n                state.belongs.push({\n                    id: newUuid,\n                    belongsTo: belongsTo,\n                    operator: \"=\",\n                    find: find\n                });\n            }\n\n            dispatch(hydrateState(state));\n        }\n    }, [id]);\n\n    /**\n     *\n     * @return {boolean}\n     */\n    const isSaveButtonEnabled = () => {\n\n        if(isSubmitting){\n            return false;\n        }\n\n        if(saveLoading){\n            return false;\n        }\n\n        if(!isEmpty(methods.formState.errors)){\n            return false;\n        }\n\n        return true;\n    };\n\n    /**\n     * Handle data submission\n     *\n     * @param data\n     */\n    const onSubmit = (data) => {\n\n        setIsSubmitted(true);\n\n        dispatch(saveMeta(data))\n            .then(res => {\n                const payload = res.payload;\n\n                if(payload.success){\n                    if(!id){\n                        navigate('/meta');\n                    }\n\n                    methods.reset({}, { keepValues: true, keepIsSubmitted: true });\n                    setHasUnsavedChanges(false);\n                    toast.success(useTranslation(\"Meta group settings successfully saved\"));\n                    dispatch(hydrateState(data));\n                    scrollToTop();\n                } else {\n                    toast.error(payload.error);\n                }\n\n                setIsSubmitted(false);\n\n            })\n            .catch(err => {\n                toast.error(err);\n                setIsSubmitted(false);\n            })\n        ;\n    };\n\n    const actions = [\n        <Button\n            type=\"button\"\n            style={styleVariants.SECONDARY}\n            onClick={(e) => {\n                e.preventDefault();\n                handleAddBox();\n            }}\n        >\n            {useTranslation(\"Add meta box\")}\n        </Button>,\n        <Button\n            disabled={!isSaveButtonEnabled()}\n            style={styleVariants.PRIMARY}\n        >\n            {useTranslation(\"Save\")}\n        </Button>,\n        <DeleteAllMetaBoxesModal />,\n    ];\n\n    if(id && loading){\n        return <Loader/>;\n    }\n\n    if(fetchError){\n        return <PageNotFound />;\n    }\n\n    return (\n        <React.Fragment>\n            <FormProvider {...methods}>\n                <form\n                    onSubmit={methods.handleSubmit(onSubmit)}\n                    onChange={() => {\n                        setHasUnsavedChanges(true);\n                    }}\n                >\n                    <Layout\n                        title={useTranslation(\"Manage meta fields\")}\n                        actions={actions}\n                        crumbs={[\n                            {\n                                label: useTranslation(\"Field groups\"),\n                                link: \"/meta\"\n                            },\n                            {\n                                label: useTranslation(\"Manage meta fields\"),\n                            }\n                        ]}\n                    >\n                        {view === 'list' ? (\n                            <ListView\n                                view={view}\n                                setView={setView}\n                                boxes={!isEmpty(group) ? group.boxes : []}\n                            />\n                        ) : (\n                            <TabularView\n                                activeBoxTab={activeBoxTab}\n                                setActiveBoxTab={setActiveBoxTab}\n                                view={view}\n                                setView={setView}\n                                boxes={!isEmpty(group) ? group.boxes : []}\n                            />\n                        )}\n                    </Layout>\n                </form>\n            </FormProvider>\n        </React.Fragment>\n    );\n};\n\nexport default Meta;","export function debounce(func, wait, immediate) {\n    var timeout, previous, args, result, context;\n\n    var later = function() {\n        var passed = now() - previous;\n        if (wait > passed) {\n            timeout = setTimeout(later, wait - passed);\n        } else {\n            timeout = null;\n            if (!immediate) result = func.apply(context, args);\n            if (!timeout) args = context = null;\n        }\n    };\n\n    var debounced = restArguments(function(_args) {\n        context = this;\n        args = _args;\n        previous = now();\n        if (!timeout) {\n            timeout = setTimeout(later, wait);\n            if (immediate) result = func.apply(context, args);\n        }\n        return result;\n    });\n\n    debounced.cancel = function() {\n        clearTimeout(timeout);\n        timeout = args = context = null;\n    };\n\n    return debounced;\n}\n\nfunction now(){\n    return new Date().getTime();\n}\n\nfunction restArguments(func, startIndex) {\n    startIndex = startIndex == null ? func.length - 1 : +startIndex;\n    return function() {\n        var length = Math.max(arguments.length - startIndex, 0),\n            rest = Array(length),\n            index = 0;\n        for (; index < length; index++) {\n            rest[index] = arguments[index + startIndex];\n        }\n        switch (startIndex) {\n            case 0: return func.call(this, rest);\n            case 1: return func.call(this, arguments[0], rest);\n            case 2: return func.call(this, arguments[0], arguments[1], rest);\n        }\n        var args = Array(startIndex + 1);\n        for (index = 0; index < startIndex; index++) {\n            args[index] = arguments[index];\n        }\n        args[startIndex] = rest;\n        return func.apply(this, args);\n    };\n}","/**\n * validate a value for a given field type\n *\n * @param type\n * @param value\n * @return {boolean}\n */\nimport {fieldTypes} from \"../constants/fields\";\nimport {wpAjaxRequest} from \"./ajax\";\nimport useTranslation from \"../hooks/useTranslation\";\n\nexport const alphanumericallyValid = (string) => {\n\n    const matches = string.match(/^[0-9a-zA-Z_-]+$/g);\n\n    if (matches === null) {\n        return 'Only alphanumeric characters allowed';\n    }\n\n    return true;\n};\n\n/**\n * Keys are used as internal identifiers. Lowercase alphanumeric characters, dashes, and underscores are allowed.\n * https://developer.wordpress.org/reference/functions/sanitize_key/\n *\n * @param post_name\n * @returns {boolean}\n */\nexport const isPostTypeNameValid = (post_name) => {\n\n    const size = post_name.length;\n\n    if (size > 20) {\n        return 'Max post type name lenght is 20';\n    }\n\n    const matches = post_name.match(/[a-z0-9_-]/g);\n\n    if (matches === null || size !== matches.length) {\n        return 'Allowed characters: [Lowercase alphanumeric characters, dashes, and underscores]';\n    }\n\n    return true;\n};\n\nexport const asyncIsPostTypeNameValid = async (post_name) => {\n\n    const size = post_name.length;\n\n    if (size > 20) {\n        return 'Max post type name lenght is 20';\n    }\n\n    const matches = post_name.match(/[a-z0-9_-]/g);\n\n    if (matches === null || size !== matches.length) {\n        return 'Allowed characters: [Lowercase alphanumeric characters, dashes, and underscores]';\n    }\n\n    // check if already exists\n    const res = await wpAjaxRequest(\"checkPostTypeNameAction\", {postType: post_name});\n\n    if(res.exists === true){\n        return post_name + ' post type already exists.';\n    }\n\n    return true;\n};\n\nexport const isTaxonomySlugValid = async (slug) => {\n\n    const size = slug.length;\n\n    if (size > 32) {\n        return 'Max post type name lenght is 32';\n    }\n\n    const matches = slug.match(/[a-z0-9_-]/g);\n\n    if (matches === null || size !== matches.length) {\n        return 'Allowed characters: [Lowercase alphanumeric characters, dashes, and underscores]';\n    }\n\n    return true;\n};\n\nexport const asyncIsTaxonomySlugValid = async (slug) => {\n\n    const size = slug.length;\n\n    if (size > 32) {\n        return 'Max post type name lenght is 32';\n    }\n\n    const matches = slug.match(/[a-z0-9_-]/g);\n\n    if (matches === null || size !== matches.length) {\n        return 'Allowed characters: [Lowercase alphanumeric characters, dashes, and underscores]';\n    }\n\n    // check if already exists\n    const res = await wpAjaxRequest(\"checkTaxonomySlugAction\", {slug: slug});\n\n    if (res.exists === true) {\n        return slug + ' taxonomy already exists.';\n    }\n\n    return true;\n};\n\nexport const isAValidValueForThisType = (type, value, options) => {\n\n    if(typeof value === 'undefined' || value === null || value === ''){\n        return true;\n    }\n\n    if(value.length > 50){\n        return false;\n    }\n\n    switch (type ) {\n        case fieldTypes.COLOR:\n            return validColor(value);\n\n        case fieldTypes.CURRENCY:\n            return validCurrency(value);\n\n        case fieldTypes.DATE:\n            return validDate(value);\n\n        case fieldTypes.EMAIL:\n            return validEmail(value);\n\n        case fieldTypes.WEIGHT:\n        case fieldTypes.LENGTH:\n        case fieldTypes.NUMBER:\n            return validNumber(value);\n\n        case fieldTypes.PHONE:\n            return validPhone(value);\n\n        case fieldTypes.CHECKBOX:\n        case fieldTypes.RADIO:\n        case fieldTypes.SELECT:\n        case fieldTypes.SELECT_MULTI:\n            return validSelect(value, options);\n\n        case fieldTypes.TOGGLE:\n            return validToggle(value);\n\n        case fieldTypes.URL:\n            return validURL(value);\n\n        default:\n            return true;\n    }\n};\n\n/**\n *\n * @param str\n * @return {boolean}\n */\nexport const validEmail = (str) => {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    return re.test(str);\n};\n\n/**\n *\n * @param str\n * @return {boolean}\n */\nexport const validURL = (str) => {\n    const pattern = new RegExp( '^(https?:\\\\/\\\\/)?' + // protocol\n        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n        '(\\\\#[-a-z\\\\d_]*)?$', 'i' ); // fragment locator\n\n    return !!pattern.test(str);\n};\n\n/**\n *\n * @param str\n * @return {boolean}\n */\nexport const validCurrency = (str) => {\n\n    const re = /^[0-9]{1,}.[0-9]{2}$/i;\n\n    return re.test(str);\n};\n\n/**\n *\n * @param str\n * @return {boolean}\n */\nexport const validNumber = (str) => {\n    const re = /^[0-9]{1,}$/i;\n\n    return re.test(str);\n};\n\n/**\n *\n * @param str\n * @return {boolean}\n */\nexport const validPhone = (str) => {\n    const re = /^\\+?([0-9]{2,3})\\)?[-. ]?([0-9-. ]{6,15})$/;\n\n    return re.test(str);\n};\n\n/**\n *\n * @param str\n * @return {boolean}\n */\nexport const validColor = (str) => {\n    const re = /^#[a-f0-9]{6}$/i;\n\n    return re.test(str);\n};\n\n/**\n *\n * @param str\n * @return {boolean}\n */\nexport const validDate = (str) => {\n    const re = /(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[13-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})/gi;\n\n    return re.test(str);\n};\n\n/**\n *\n * @param str\n * @return {boolean}\n */\nexport const validToggle = (str) => {\n    const re = /^[0-1]{1}$/i;\n\n    return re.test(str);\n};\n\n/**\n *\n * @param value\n * @param options\n * @return {boolean}\n */\nexport const validSelect = (value, options) => {\n\n    if(value === null || value === ''){\n        return true;\n    }\n\n    if(options == null || options.length === 0){\n        return false;\n    }\n\n    let matches = 0;\n\n    options.forEach((o) => {\n        if(o.value === value){\n            matches++;\n        }\n    });\n\n    return matches > 0;\n};\n\nexport const validWPGraphQLName = (name) => {\n\n    if (null === name.match(/^[a-z]/)) {\n        return \"The string needs to start with a letter.\";\n    }\n\n    if (null ===  name.match(/^[0-9a-zA-Z]+$/)) {\n        return \"The string needs to be alphanumeric (camelcase).\";\n    }\n};\n\n/**\n *\n * @param key\n * @return {string|boolean}\n */\nexport const validateGoogleMapsApiKey = (key) => {\n\n    if(typeof key === 'undefined' ||  key === null || key === '' || key.length === 0){\n        return  true;\n    }\n\n    if(key.length !== 39){\n        return useTranslation('Key length must be 39.');\n    }\n\n    const regx = new RegExp( \"^[A-Za-z0-9-_]+$\" );\n\n    if(!regx.test(key)){\n        return useTranslation('Not valid format.');\n    }\n\n    return true;\n};"],"sourceRoot":""}