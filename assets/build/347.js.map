{"version":3,"sources":["webpack://advanced-custom-post-type-lite/./assets/src/App/components/ElementIcon/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/CustomPostTypeList/BulkActions/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/CustomPostTypeList/CustomPostTypeElement.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/CustomPostTypeList/Modal/DeleteCustomPostTypeModal.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/CustomPostTypeList/index.js"],"names":["ElementIcon","value","includes","propTypes","PropTypes","string","isRequired","BulkActions","control","register","watchedElements","name","count","Object","entries","key","styleVariants","WHITE","CustomPostTypeElement","record","showWooCommerceColumn","formId","width","isNative","icon","taxonomies","length","isWooCommerce","woocommerceProductData","metaTypes","CUSTOM_POST_TYPE","object","bool","DeleteCustomPostTypeModal","postType","globals","document","settings","deletePostsOption","dispatch","modalOpen","setModalOpen","navigate","handleDeletePostType","then","payload","res","success","toast","error","catch","err","buttons","DANGER","SECONDARY","WARNING","e","preventDefault","CustomPostTypeList","documentGlobals","parent","ref","methods","mode","state","fetchCustomPostTypes","data","loading","page","perPage","totalPages","Math","ceil","areAllSelected","matches","current","checked","handleSyncPosts","console","showBulkActions","onSubmit","reset","belongsTo","action","resetField","records","match","map","r","actions","PRIMARY","handleSubmit","label","is_rtl","filter","setValue","currentTarget","id","parseInt"],"mappings":"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","file":"347.js","sourcesContent":["import React from 'react';\nimport {Icon} from \"@iconify/react\";\nimport PropTypes from 'prop-types';\n\nconst ElementIcon = ({value}) => {\n\n    // render image if values starts by http / https\n    if(value && value.includes(\"http://\") || value && value.includes(\"https://\")){\n        return (\n            <img src={value} width={18}  alt=\"\" />\n        );\n    }\n\n    // add dashicons: for retro-compatibility\n    if(value && !value.includes(\"dashicons\")){\n        return (\n            <Icon icon={`dashicons:${value}`} color=\"#777\" width=\"18px\" />\n        );\n    }\n\n    return (\n        <Icon icon={value} color=\"#777\" width=\"18px\" />\n    );\n};\n\nElementIcon.propTypes = {\n    value: PropTypes.string.isRequired\n};\n\nexport default ElementIcon;","import React from 'react';\nimport {useFormContext, useWatch} from \"react-hook-form\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Button from \"../../../components/Button\";\nimport {styleVariants} from \"../../../constants/styles\";\n\nconst BulkActions = () => {\n\n    // manage form state\n    const { control, register } = useFormContext();\n    const watchedElements = useWatch({\n        control,\n        name: \"elements\"\n    });\n\n    /**\n     *\n     * @return {number}\n     */\n    const count = () => {\n\n        let count = 0;\n\n        for (const [key, value] of Object.entries(watchedElements)) {\n            if(value === true){\n                count++;\n            }\n        }\n\n        return count;\n    };\n\n    return (\n        <div\n            className=\"flex-between s-8 mb-24\"\n            data-cy=\"bulk-actions\"\n        >\n            <span>\n                {count()} {useTranslation(\"Selected items\")}\n            </span>\n            <div className=\"i-flex-center s-8\">\n                <select\n                    name=\"action\"\n                    data-cy=\"cpt-bulk-actions\"\n                    className=\"form-control sm\"\n                    {...register(\"action\")}\n                >\n                    <option value=\"\">{useTranslation(\"Select\")}</option>\n                    <option value=\"delete\">{useTranslation(\"Delete\")}</option>\n                </select>\n                <Button\n                    testId=\"cpt-bulk-actions\"\n                    style={styleVariants.WHITE}\n                    size=\"sm\"\n                >\n                    {useTranslation(\"Execute\")}\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default BulkActions;","import React, {memo} from 'react';\nimport PropTypes from 'prop-types';\nimport ElementIcon from \"../../components/ElementIcon\";\nimport useTranslation from \"../../hooks/useTranslation\";\nimport {Link} from \"react-router-dom\";\nimport ElementTypeBadge from \"../../components/ElementTypeBadge\";\nimport ExportCodeModal from \"../../components/Modal/ExportCodeModal\";\nimport {metaTypes} from \"../../constants/metaTypes\";\nimport {isset} from \"../../utils/objects\";\nimport DeleteCustomPostTypeModal from \"./Modal/DeleteCustomPostTypeModal\";\nimport {useFormContext} from \"react-hook-form\";\nimport FieldGroupsModal from \"../../components/Modal/FieldGroupsModal\";\n\nconst CustomPostTypeElement = memo(({record, showWooCommerceColumn}) => {\n\n    // manage form state\n    const { register } = useFormContext();\n    const formId = `elements.${record.name}`;\n\n    return (\n        <React.Fragment>\n            <tr>\n                <td style={{\n                    width: \"24px\"\n                }}>\n                    {!record.isNative && (\n                        <label\n                            className=\"checkbox\"\n                            htmlFor={formId}\n                            data-cy={`select-${record.name}`}\n                        >\n                            <input\n                                type=\"checkbox\"\n                                id={formId}\n                                name={formId}\n                                defaultChecked={false}\n                                {...register(formId)}\n                            />\n                            <span/>\n                        </label>\n                    )}\n                </td>\n                <td>\n                    <ElementIcon value={record.icon} />\n                </td>\n                <td>\n                    {record.name}\n                </td>\n                <td>\n                    <ElementTypeBadge element={record} />\n                </td>\n                <td>\n                    {isset(record, \"taxonomies\") &&  record.taxonomies.length > 0 ?\n                        <Link to={`/assoc-taxonomy-post/${record.name}`}>\n                            {useTranslation(\"Manage\")}\n                        </Link>\n                        :\n                        <Link to={`/assoc-taxonomy-post/${record.name}`}>\n                            {useTranslation(\"Associate\")}\n                        </Link>\n                    }\n                </td>\n                {showWooCommerceColumn && (\n                    <td>\n                        {record.isWooCommerce === true && (\n                            <React.Fragment>\n                                {isset( record, \"woocommerceProductData\" ) && record.woocommerceProductData.length > 0 ?\n                                    <Link to={`/product-data/${record.name}`}>\n                                        {useTranslation(\"Manage\")}\n                                    </Link>\n                                    :\n                                    <Link to={`/product-data/${record.name}`}>\n                                        {useTranslation(\"Create\")}\n                                    </Link>\n                                }\n                            </React.Fragment>\n                        ) }\n                    </td>\n                )}\n                <td>\n                    <div className=\"i-flex-center s-8\">\n                        <Link to={`/register_meta?belongsTo=${metaTypes.CUSTOM_POST_TYPE}&find=${record.name}`}>\n                            {useTranslation(\"Create\")}\n                        </Link>\n                        <FieldGroupsModal\n                            find={record.name}\n                            belongsTo={metaTypes.CUSTOM_POST_TYPE}\n                        />\n                    </div>\n                </td>\n                <td>\n                    {!record.isNative && (\n                        <div className=\"i-flex-center s-8\">\n                            <Link to={`view/${record.name}`}>\n                                {useTranslation(\"View\")}\n                            </Link>\n                            <Link to={`edit/${record.name}`}>\n                                {useTranslation(\"Edit\")}\n                            </Link>\n                            <DeleteCustomPostTypeModal postType={record.name} />\n                            <ExportCodeModal belongsTo={metaTypes.CUSTOM_POST_TYPE} find={record.name} />\n                        </div>\n                    )}\n                </td>\n            </tr>\n        </React.Fragment>\n\n    );\n});\n\nCustomPostTypeElement.propTypes = {\n    record: PropTypes.object.isRequired,\n    showWooCommerceColumn: PropTypes.bool.isRequired,\n};\n\nexport default CustomPostTypeElement;","import React, {useState} from \"react\";\nimport {useNavigate} from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport Modal from \"../../../components/Modal\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Button from \"../../../components/Button\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport Alert from \"../../../components/Alert\";\nimport {filterByLabel} from \"../../../utils/objects\";\nimport {useDispatch} from \"react-redux\";\nimport {deleteCustomPostType} from \"../../../redux/reducers/deleteCustomPostTypeSlice\";\nimport {toast} from \"react-hot-toast\";\nimport {refreshPage} from \"../../../utils/misc\";\n\nconst DeleteCustomPostTypeModal = ({postType}) => {\n\n    const globals = document.globals;\n    const settings = globals.settings;\n    const deletePostsOption = filterByLabel(settings, 'key', 'delete_posts').value;\n\n    // manage global state\n    const dispatch = useDispatch();\n\n    // manage local state\n    const [modalOpen, setModalOpen] = useState(false);\n\n    // manage redirect\n    const navigate = useNavigate();\n\n    const handleDeletePostType = () => {\n        dispatch(deleteCustomPostType(postType, 'all'))\n            .then(res => {\n                const payload = res.payload;\n\n                if(payload.success){\n                    navigate('/');\n                    setModalOpen(!modalOpen);\n                    toast.success(useTranslation(\"Custom post type successfully deleted. The browser will refresh after 5 seconds.\"));\n                    refreshPage(5000);\n                } else {\n                    toast.error(payload.error);\n                }\n            })\n            .catch(err => {\n                toast.error(err);\n            })\n        ;\n    };\n\n    const buttons = [\n        <Button\n            style={styleVariants.DANGER}\n            onClick={() => {\n                handleDeletePostType();\n            }}\n        >\n            {useTranslation(\"Yes, delete it\")}\n        </Button>,\n        <Button\n            style={styleVariants.SECONDARY}\n            onClick={() => {\n                setModalOpen(!modalOpen);\n            }}\n        >\n            {useTranslation(\"Return back to list\")}\n        </Button>,\n    ];\n\n    return (\n        <React.Fragment>\n            <Modal title={useTranslation('Delete custom post type')} buttons={buttons} visible={modalOpen}>\n                <div>\n                    {useTranslation(\"You are going to delete this custom post type. Are you sure?\")}\n                </div>\n                {deletePostsOption && (\n                    <div className=\"mt-24\">\n                        <Alert style={styleVariants.WARNING}>\n                            {useTranslation(\"WARNING: This action will delete all posts and metadata for this post type. The action is irreversible.\")}\n                        </Alert>\n                    </div>\n                )}\n            </Modal>\n            <a\n                href=\"#\"\n                onClick={e => {\n                    e.preventDefault();\n                    setModalOpen(!modalOpen);\n                }}\n            >\n                {useTranslation(\"Delete\")}\n            </a>\n        </React.Fragment>\n    );\n};\n\nDeleteCustomPostTypeModal.propTypes = {\n    postType: PropTypes.string.isRequired,\n};\n\nexport default DeleteCustomPostTypeModal;","import React, {useEffect, useRef} from 'react';\nimport Layout from \"../../layout/Layout\";\nimport Button from \"../../components/Button\";\nimport useTranslation from \"../../hooks/useTranslation\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {fetchCustomPostTypes} from \"../../redux/reducers/fetchCustomPostTypesSlice\";\nimport {syncCustomPostTypes} from \"../../redux/reducers/syncCustomPostTypesSlice\";\nimport {metaTitle, refreshPage} from \"../../utils/misc\";\nimport Loader from \"../../components/Loader\";\nimport {Link, useParams} from \"react-router-dom\";\nimport Alert from \"../../components/Alert\";\nimport {styleVariants} from \"../../constants/styles\";\nimport Tooltip from \"../../components/Tooltip\";\nimport CustomPostTypeElement from \"./CustomPostTypeElement\";\nimport {filterByLabel, isEmpty} from \"../../utils/objects\";\nimport Pagination from \"../../components/Pagination\";\nimport ButtonLink from \"../../components/ButtonLink\";\nimport {toast} from \"react-hot-toast\";\nimport {FormProvider, useForm, useWatch} from \"react-hook-form\";\nimport BulkActions from \"./BulkActions\";\nimport {wpAjaxRequest} from \"../../utils/ajax\";\nimport {metaTypes} from \"../../constants/metaTypes\";\nimport {useAutoAnimate} from \"@formkit/auto-animate/react\";\nimport {scrollToTop} from \"../../utils/scroll\";\n\nconst CustomPostTypeList = () => {\n\n    const documentGlobals = document.globals;\n    const settings = documentGlobals.settings;\n    const globals = documentGlobals.globals;\n\n    // auto-animate\n    const [parent] = useAutoAnimate();\n\n    // ref\n    const ref = useRef();\n\n    // form init\n    const methods = useForm({\n        mode: 'all'\n    });\n\n    const watchedElements = useWatch({\n        control: methods.control,\n        name: \"elements\"\n    });\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {data, loading} = useSelector(state => state.fetchCustomPostTypes);\n\n    // manage local state\n    const {page} = useParams();\n    const perPage = (settings.length > 0 && filterByLabel(settings, 'key', 'records_per_page') !== '') ? filterByLabel(settings, 'key', 'records_per_page').value : 20;\n    const totalPages = Math.ceil( data.count / perPage );\n\n    useEffect(() => {\n        metaTitle(useTranslation(\"Registered Custom Post Types\"));\n        dispatch(fetchCustomPostTypes({\n            page: page ? page : 1,\n            perPage: perPage\n        }));\n    }, [page]);\n\n    useEffect(() => {\n\n        /**\n         *\n         * @return {boolean}\n         */\n        const areAllSelected = () => {\n\n            if(!watchedElements){\n                return false;\n            }\n\n            let matches = 0;\n            for (const [key, value] of Object.entries(watchedElements)) {\n                if(value === true){\n                    matches++;\n                }\n            }\n\n            return matches === Object.entries(watchedElements).length;\n        };\n\n        if(areAllSelected()){\n            ref.current.checked = true;\n        } else {\n            if(ref.current){\n                ref.current.checked = false;\n            }\n        }\n\n    }, [watchedElements]);\n\n    const handleSyncPosts = () => {\n        dispatch(syncCustomPostTypes())\n            .then(res => {\n\n                const payload = res.payload;\n\n                if(payload.success){\n                    toast.success(useTranslation(\"Successfully post sync. The browser will refresh after 5 seconds.\"));\n                    refreshPage(5000);\n                }\n\n                if(payload.error){\n                    toast.error(error);\n                }\n            })\n            .catch(err => console.error(err))\n        ;\n    };\n\n    /**\n     *\n     * @return {boolean}\n     */\n    const showBulkActions = () => {\n\n        if(!watchedElements){\n            return false;\n        }\n\n        for (const [key, value] of Object.entries(watchedElements)) {\n            if(value === true){\n                return true;\n            }\n        }\n\n        return false;\n    };\n\n    const onSubmit = (data) => {\n        methods.reset();\n        data.belongsTo = metaTypes.CUSTOM_POST_TYPE;\n\n        wpAjaxRequest('bulkActionsAction', data)\n            .then(res => {\n                if(res.success === true){\n\n                    // flush message\n                    switch (data.action) {\n                        case \"delete\":\n                            toast.success(useTranslation(\"Custom post type successfully deleted. The browser will refresh after 5 seconds.\"));\n                            methods.resetField(\"elements\");\n                            scrollToTop();\n\n                            // refresh items\n                            dispatch(fetchCustomPostTypes({\n                                page: page ? page : 1,\n                                perPage: perPage\n                            }));\n\n                            refreshPage(5000);\n                            break;\n                    }\n                } else {\n                    toast.error(res.error);\n                }\n            })\n            .catch(err => {\n                console.error(err);\n                toast.error(useTranslation(\"Unknown error, please retry later\"));\n            })\n        ;\n    };\n\n    /**\n     *\n     * @return {boolean}\n     */\n    const showWooCommerceColumn = () => {\n\n        if(!data.records){\n            return false;\n        }\n\n        let match = 0;\n\n        data.records.map((r) => {\n            if(r.isWooCommerce === true){\n                match++;\n            }\n        });\n\n        return match > 0;\n    };\n\n    const actions = [\n        <ButtonLink style={styleVariants.PRIMARY} to=\"/register\">\n            {useTranslation(\"Register new Post Type\")}\n        </ButtonLink>,\n        <Button\n            type=\"button\"\n            style={styleVariants.SECONDARY}\n            onClick={(e) => {\n                e.preventDefault();\n                handleSyncPosts();\n            }}\n        >\n            {useTranslation(\"Sync with post types\")}\n        </Button>,\n    ];\n\n    if(loading){\n        return (\n            <Loader/>\n        );\n    }\n\n    return (\n        <FormProvider {...methods}>\n            <form onSubmit={methods.handleSubmit(onSubmit)}>\n                <Layout\n                    title={useTranslation(\"Registered Custom Post Types\")}\n                    actions={actions}\n                    crumbs={[\n                        {\n                            label: useTranslation(\"Registered Custom Post Types\"),\n                        }\n                    ]}\n                >\n                    <div ref={parent}>\n                        {showBulkActions() && (\n                            <BulkActions />\n                        )}\n                    </div>\n                    {data.records && data.records.length > 0 ? (\n                        <div className=\"responsive\">\n                            <table\n                                data-cy=\"cpt-table\"\n                                className={`acpt-table with-shadow ${globals.is_rtl ? 'rtl' : ''}`}\n                            >\n                                <thead>\n                                    <tr>\n                                        <th style={{\n                                            width: \"24px\"\n                                        }}>\n                                            <label\n                                                data-cy=\"select-all\"\n                                                className=\"checkbox\"\n                                                htmlFor=\"all\"\n                                            >\n                                                <input\n                                                    ref={ref}\n                                                    type=\"checkbox\"\n                                                    id=\"all\"\n                                                    defaultChecked={false}\n                                                    onClick={e => {\n                                                        data.records.filter(r => r.isNative === false).map((r) => {\n                                                            methods.setValue(`elements.${r.name}`, e.currentTarget.checked);\n                                                        });\n                                                    }}\n                                                />\n                                                <span/>\n                                            </label>\n                                        </th>\n                                        <th/>\n                                        <th>\n                                            {useTranslation(\"Name\")}\n                                        </th>\n                                        <th>\n                                            {useTranslation(\"Type\")}\n                                        </th>\n                                        <th>\n                                            <Tooltip\n                                                tip={useTranslation(\"Associated taxonomies with the post\")}\n                                                label={useTranslation(\"Associated taxonomies\")}\n                                            />\n                                        </th>\n                                        {showWooCommerceColumn() && (\n                                            <th>\n                                                <Tooltip\n                                                    tip={useTranslation(\"Associated WooCommerce product data\")}\n                                                    label={useTranslation(\"Product data\")}\n                                                />\n                                            </th>\n                                        )}\n                                        <th>\n                                            {useTranslation(\"Field groups\")}\n                                        </th>\n                                        <th>\n                                            {useTranslation(\"Actions\")}\n                                        </th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                {data.records && data.records.map((record) => (\n                                    <CustomPostTypeElement\n                                        key={record.id}\n                                        record={record}\n                                        showWooCommerceColumn={showWooCommerceColumn()}\n                                    />\n                                ))}\n                                </tbody>\n                                {totalPages > 1 && (\n                                    <tfoot>\n                                    <tr>\n                                        <td colSpan={7}>\n                                            <Pagination\n                                                currentPage={page ? parseInt(page) : 1}\n                                                totalPages={totalPages}\n                                                baseLink=\"\"\n                                            />\n                                        </td>\n                                    </tr>\n                                    </tfoot>\n                                )}\n                            </table>\n                        </div>\n                    ) : (\n                        <Alert style={styleVariants.SECONDARY}>\n                            {useTranslation(\"No custom post types found.\")} <Link to=\"/register\">{useTranslation(\"Register the first one\")}</Link>!\n                        </Alert>\n                    )}\n                </Layout>\n            </form>\n        </FormProvider>\n    );\n};\n\nCustomPostTypeList.propTypes = {};\n\nexport default CustomPostTypeList;"],"sourceRoot":""}