{"version":3,"sources":["webpack://advanced-custom-post-type-lite/./assets/src/App/components/pages/SaveTaxonomy/_Basic.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/pages/SaveTaxonomy/_Labels.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/pages/SaveTaxonomy/_Settings.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/pages/SaveTaxonomy/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/constants/taxonomy_label.js","webpack://advanced-custom-post-type-lite/./assets/src/App/redux/thunks/fetchTaxonomies.js","webpack://advanced-custom-post-type-lite/./assets/src/App/redux/thunks/resetTaxonomies.js"],"names":["BasicStep","edit","headings","taxonomy","state","fetchTaxonomiesReducer","fetched","dispatch","mode","defaultValues","slug","length","singular_label","singular","plural_label","plural","control","register","handleSubmit","setValue","formState","errors","isValid","handleSlugChange","onSubmit","data","label","link","e","currentTarget","value","validate","isTaxonomySlugValid","asyncIsTaxonomySlugValid","required","AdditionalLabelsStep","stepsReducer","stepsData","activeStep","labels","name","singular_name","search_items","r","popular_items","all_items","parent_item","parent_item_colon","edit_item","view_item","update_item","add_new_item","new_item_name","separate_items_with_commas","add_or_remove_items","choose_from_most_used","not_found","no_terms","filter_by_item","items_list_navigation","items_list","most_used","back_to_items","taxonomyLabelsList","map","item","id","description","maxLength","message","OtherSettingsStep","setPristineHandler","stepsErrors","success","loading","didMountRef","history","settings","public","publicly_queryable","hierarchical","show_ui","show_in_menu","show_in_nav_menus","show_in_rest","rest_base","rest_controller_class","show_tagcloud","show_in_quick_edit","show_admin_column","capabilities","rewrite","custom_rewrite","query_var","custom_query_var","default_term","sort","watch","current","push","toast","error","includes","SaveTaxonomy","step","Prompt","setDirty","setPristine","isEdit","fetchedSuccess","setFetchedSuccess","stepInt","parseInt","steps","saveCustomPostTypeHeadings","fetchTaxonomies","meta","getState","resetTaxonomies"],"mappings":"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","file":"407.js","sourcesContent":["import React from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useForm} from \"react-hook-form\";\nimport {stepForward} from \"../../../redux/actions/stepsActions\";\nimport InputText from \"../../reusable/Form/InputText\";\nimport StepsButtons from \"../../reusable/Steps/StepsButtons\";\nimport {sluggifyString} from \"../../../utils/strings\";\nimport {asyncIsTaxonomySlugValid, isTaxonomySlugValid} from \"../../../utils/validation\";\nimport Layout from \"../../reusable/Layout\";\nimport ActionsBar from \"../../reusable/Layout/ActionsBar\";\nimport Breadcrumbs from \"../../reusable/Layout/Breadcrumbs\";\nimport StepsHeader from \"../../reusable/Steps/StepsHeader\";\n\nconst BasicStep = ({edit, headings, taxonomy}) => {\n\n    // manage global state\n    const {fetched} = useSelector(state => state.fetchTaxonomiesReducer);\n    const dispatch = useDispatch();\n\n    // handle form\n    const { control, register, handleSubmit, setValue, formState: {errors, isValid} } = useForm({\n        mode: 'all',\n        defaultValues: {\n            slug: fetched.length > 0 ? fetched[0].slug : null,\n            singular_label: fetched.length > 0 ? fetched[0].singular : null,\n            plural_label: fetched.length > 0 ? fetched[0].plural : null,\n        }\n    });\n\n    const handleSlugChange = (slug) => {\n        setValue('slug', sluggifyString(slug, 32));\n    };\n\n    const onSubmit = (data) => {\n        dispatch(stepForward(data));\n    };\n\n    return (\n        <Layout>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <ActionsBar\n                    title={taxonomy ? \"Edit Taxonomy\" : \"Create new Taxonomy\"}\n                    actions={<StepsButtons isValid={isValid} next={2} />}\n                />\n                <main>\n                    <Breadcrumbs crumbs={[\n                        {\n                            label: \"Registered Custom Post Types\",\n                            link: \"/\"\n                        },\n                        {\n                            label: \"Registered Taxonomies\",\n                            link: \"/taxonomies\"\n                        },\n                        {\n                            label: taxonomy ? \"Edit Taxonomy\" : \"Create new Taxonomy\"\n                        }\n                    ]} />\n                    <div className=\"acpt-card\">\n                        <StepsHeader headings={headings}/>\n                        <div className=\"acpt-card__inner\">\n                            <InputText\n                                id=\"slug\"\n                                label=\"Slug\"\n                                placeholder=\"slug\"\n                                readOnly={fetched.length > 0}\n                                defaultValue={fetched.length > 0 ? fetched[0].slug : null }\n                                description=\"The post name/slug. Used for various queries for taxonomy content.\"\n                                register={register}\n                                errors={errors}\n                                isRequired={true}\n                                onChangeCapture={ e => handleSlugChange(e.currentTarget.value) }\n                                validate={{\n                                    validate: edit ? isTaxonomySlugValid : asyncIsTaxonomySlugValid,\n                                    required: \"This field is mandatory\"\n                                }} />\n                            <InputText\n                                id=\"singular_label\"\n                                label=\"Singular label\"\n                                placeholder=\"(e.g. Movie)\"\n                                defaultValue={fetched.length > 0 ? fetched[0].singular : null }\n                                description=\"Used when a singular label is needed\"\n                                register={register}\n                                errors={errors}\n                                isRequired={true}\n                                validate={{\n                                    required: \"This field is mandatory\"\n                                }} />\n                            <InputText\n                                id=\"plural_label\"\n                                label=\"Plural label\"\n                                placeholder=\"(e.g. Movies)\"\n                                defaultValue={fetched.length > 0 ? fetched[0].plural : null }\n                                description=\"Used for the taxonomy admin menu item\"\n                                register={register}\n                                errors={errors}\n                                isRequired={true}\n                                validate={{\n                                    required: \"This field is mandatory\"\n                                }} />\n                        </div>\n                    </div>\n                </main>\n            </form>\n        </Layout>\n    );\n};\n\nexport default BasicStep;","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useForm} from \"react-hook-form\";\nimport {stepForward} from \"../../../redux/actions/stepsActions\";\nimport InputText from \"../../reusable/Form/InputText\";\nimport StepsButtons from \"../../reusable/Steps/StepsButtons\";\nimport {taxonomyLabelsList} from \"../../../constants/taxonomy_label\";\nimport {translate} from \"../../../localization\";\nimport Layout from \"../../reusable/Layout\";\nimport ActionsBar from \"../../reusable/Layout/ActionsBar\";\nimport Breadcrumbs from \"../../reusable/Layout/Breadcrumbs\";\nimport StepsHeader from \"../../reusable/Steps/StepsHeader\";\n\nconst AdditionalLabelsStep = ({headings, taxonomy}) => {\n\n    // manage global state\n    const {data:stepsData, activeStep} = useSelector(state => state.stepsReducer);\n    const {fetched} = useSelector(state => state.fetchTaxonomiesReducer);\n    const dispatch = useDispatch();\n\n    // handle form\n    let labels = {};\n    if(fetched.length > 0){\n        labels = fetched[0].labels;\n    }\n\n    const { register, handleSubmit, setValue, formState: {errors, isValid} } = useForm({\n        mode: 'all'\n    });\n\n    // form default values\n    useEffect(() => {\n        if (stepsData[1]) {\n            setValue('name', fetched.length > 0 ? labels.name : stepsData[1].slug );\n            setValue('singular_name', fetched.length > 0 ? labels.singular_name : stepsData[1].singular_label );\n            setValue('search_items', fetched.length > 0 ? labels.search_items : `${translate(\"general.labels.search_items\", {r: stepsData[1].plural_label})}`);\n            setValue('popular_items', fetched.length > 0 ? labels.popular_items : `${translate(\"general.labels.popular_items\", {r: stepsData[1].plural_label})}`);\n            setValue('all_items', fetched.length > 0 ? labels.all_items : `${translate(\"general.labels.all_items\", {r: stepsData[1].plural_label})}`);\n            setValue('parent_item', fetched.length > 0 ? labels.parent_item : `${translate(\"general.labels.parent_item\", {r: stepsData[1].singular_label})}`);\n            setValue('parent_item_colon', fetched.length > 0 ? labels.parent_item_colon : translate(\"general.labels.parent_item_colon\") );\n            setValue('edit_item', fetched.length > 0 ? labels.edit_item : `${translate(\"general.labels.edit\")}`);\n            setValue('view_item', fetched.length > 0 ? labels.view_item : `${translate(\"general.labels.view\")}`);\n            setValue('update_item', fetched.length > 0 ? labels.update_item : `${translate(\"general.labels.update_item\", {r: stepsData[1].singular_label})}`);\n            setValue('add_new_item', fetched.length > 0 ? labels.add_new_item : `${translate(\"general.labels.add_new_item\", {r: stepsData[1].singular_label})}`);\n            setValue('new_item_name', fetched.length > 0 ? labels.new_item_name : `${translate(\"general.labels.new_item_name\", {r: stepsData[1].singular_label})}`);\n            setValue('separate_items_with_commas', fetched.length > 0 ? labels.separate_items_with_commas : `${translate(\"general.labels.separate_items_with_commas\", {r: stepsData[1].plural_label})}`);\n            setValue('add_or_remove_items', fetched.length > 0 ? labels.add_or_remove_items : `${translate(\"general.labels.add_or_remove_items\", {r: stepsData[1].plural_label})}`);\n            setValue('choose_from_most_used', fetched.length > 0 ? labels.choose_from_most_used : `${translate(\"general.labels.choose_from_most_used\", {r: stepsData[1].singular_label})}`);\n            setValue('not_found', fetched.length > 0 ? labels.not_found : translate(\"general.labels.not_found\", {r: stepsData[1].singular_label}));\n            setValue('no_terms', fetched.length > 0 ? labels.no_terms : `${translate(\"general.labels.no_terms\", {r: stepsData[1].plural_label})}`);\n            setValue('filter_by_item', fetched.length > 0 ? labels.filter_by_item : `${translate(\"general.labels.filter_by_item\", {r: stepsData[1].singular_label})}`);\n            setValue('items_list_navigation', fetched.length > 0 ? labels.items_list_navigation : translate(\"general.labels.items_list_navigation\", {r: stepsData[1].plural_label}));\n            setValue('items_list', fetched.length > 0 ? labels.items_list : translate(\"general.labels.items_list\", {r: stepsData[1].plural_label}));\n            setValue('most_used', fetched.length > 0 ? labels.most_used : `${translate(\"general.labels.most_used\", {r: stepsData[1].plural_label})}`);\n            setValue('back_to_items', fetched.length > 0 ? labels.back_to_items : `${translate(\"general.labels.back_to_items\", {r: stepsData[1].plural_label})}`);\n        }\n    }, [activeStep]);\n\n    const onSubmit = (data) => {\n        dispatch(stepForward(data));\n    };\n\n    return(\n        <Layout>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <ActionsBar\n                    title={taxonomy ? \"Edit Taxonomy\" : \"Create new Taxonomy\"}\n                    actions={<StepsButtons isValid={isValid} next={3} prev={1} />}\n                />\n                <main>\n                    <Breadcrumbs crumbs={[\n                        {\n                            label: \"Registered Custom Post Types\",\n                            link: \"/\"\n                        },\n                        {\n                            label: \"Registered Taxonomies\",\n                            link: \"/taxonomies\"\n                        },\n                        {\n                            label: taxonomy ? \"Edit Taxonomy\" : \"Create new Taxonomy\"\n                        }\n                    ]} />\n                </main>\n                <div className=\"acpt-card\">\n                    <StepsHeader headings={headings}/>\n                    <div className=\"acpt-card__inner\">\n                        {taxonomyLabelsList.map((item)=> (\n                            <InputText\n                                id={item.id}\n                                label={item.label}\n                                placeholder={item.label}\n                                register={register}\n                                errors={errors}\n                                description={item.description}\n                                validate={{\n                                    maxLength: {\n                                        value: 255,\n                                        message: \"min length is 255\"\n                                    }\n                                }}\n                            />\n                        ))}\n                    </div>\n                </div>\n            </form>\n        </Layout>\n    )\n};\n\nexport default AdditionalLabelsStep;","import React, {useEffect, useRef} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useHistory} from \"react-router-dom\";\nimport {useForm} from \"react-hook-form\";\nimport {stepsSubmit} from \"../../../redux/thunks/stepsSubmit\";\nimport {toast} from \"react-toastify\";\nimport InputSwitch from \"../../reusable/Form/InputSwitch\";\nimport InputText from \"../../reusable/Form/InputText\";\nimport StepsButtons from \"../../reusable/Steps/StepsButtons\";\nimport Checkboxes from \"../../reusable/Form/Checkboxes\";\nimport Layout from \"../../reusable/Layout\";\nimport ActionsBar from \"../../reusable/Layout/ActionsBar\";\nimport Breadcrumbs from \"../../reusable/Layout/Breadcrumbs\";\nimport StepsHeader from \"../../reusable/Steps/StepsHeader\";\n\nconst OtherSettingsStep = ({headings, taxonomy, setPristineHandler}) => {\n\n    // manage redux state\n    const dispatch = useDispatch();\n    const {errors: stepsErrors, success, loading} = useSelector(state => state.stepsReducer);\n    const {fetched} = useSelector(state => state.fetchTaxonomiesReducer);\n\n    // manage local state\n    const didMountRef = useRef(false);\n\n    // manage redirect\n    const history = useHistory();\n\n    // handle form\n    let settings = {};\n    if(fetched.length > 0){\n        settings = fetched[0].settings;\n    }\n\n    const { register, handleSubmit, formState: {errors, isValid}, watch } = useForm({\n        mode: 'all',\n        defaultValues: {\n            public: fetched.length > 0 ? settings.public : null,\n            publicly_queryable: fetched.length > 0 ? settings.publicly_queryable : null,\n            hierarchical: fetched.length > 0 ? settings.hierarchical : null,\n            show_ui: fetched.length > 0 ? settings.show_ui : null,\n            show_in_menu: fetched.length > 0 ? settings.show_in_menu : null,\n            show_in_nav_menus: fetched.length > 0 ? settings.show_in_nav_menus : null,\n            show_in_rest: fetched.length > 0 ? settings.show_in_rest : true,\n            rest_base: fetched.length > 0 ? settings.rest_base : null,\n            rest_controller_class: fetched.length > 0 ? settings.rest_controller_class : null,\n            show_tagcloud: fetched.length > 0 ? settings.show_tagcloud : null,\n            show_in_quick_edit: fetched.length > 0 ? settings.show_in_quick_edit : null,\n            show_admin_column: fetched.length > 0 ? settings.show_admin_column : true,\n            capabilities: fetched.length > 0 ? settings.capabilities : null,\n            rewrite: fetched.length > 0 ? settings.rewrite : null,\n            custom_rewrite: fetched.length > 0 && settings.rewrite ? settings.rewrite.slug : null,\n            query_var: fetched.length > 0 ? settings.query_var : null,\n            custom_query_var: fetched.length > 0 ? settings.custom_query_var : null,\n            default_term: fetched.length > 0 ? settings.default_term : null,\n            sort: fetched.length > 0 ? settings.sort : null,\n        }\n    });\n\n    const onSubmit = async ( data ) => {\n        setPristineHandler();\n        await dispatch( stepsSubmit( 'saveTaxonomyAction', data ) );\n    };\n\n    // handle form submission outcome\n    useEffect(() => {\n        if (didMountRef.current){\n            if(!loading){\n                if(success){\n                    history.push('/taxonomies');\n                    toast.success(\"Taxonomy successfully saved\");\n                }\n\n                if(stepsErrors.length > 0){\n                    stepsErrors.map((error) => {\n                        toast.error(error);\n                    });\n                }\n            }\n        } else {\n            didMountRef.current = true;\n        }\n    }, [loading]);\n\n    const rewrite = watch(\"rewrite\");\n    const query_var = watch(\"query_var\");\n\n    return (\n        <Layout>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <ActionsBar\n                    title={taxonomy ? \"Edit Taxonomy\" : \"Create new Taxonomy\"}\n                    actions={<StepsButtons isValid={isValid} prev={2} />}\n                />\n                <main>\n                    <Breadcrumbs crumbs={[\n                        {\n                            label: \"Registered Custom Post Types\",\n                            link: \"/\"\n                        },\n                        {\n                            label: \"Registered Taxonomies\",\n                            link: \"/taxonomies\"\n                        },\n                        {\n                            label: taxonomy ? \"Edit Taxonomy\" : \"Create new Taxonomy\"\n                        }\n                    ]} />\n                    <div className=\"acpt-card\">\n                        <StepsHeader headings={headings}/>\n                        <div className=\"acpt-card__inner\">\n                            <InputSwitch\n                                id=\"public\"\n                                label=\"Is Public\"\n                                description=\"Whether a taxonomy is intended for use publicly either via the admin interface or by front-end users.\"\n                                defaultValue={fetched.length > 0 ? settings.public : true}\n                                register={register}\n                                errors={errors}\n                            />\n                            <InputSwitch\n                                id=\"publicly_queryable\"\n                                label=\"Publicly queryable\"\n                                description=\"Whether the taxonomy is publicly queryable. If not set, the default is inherited from $public.\"\n                                defaultValue={fetched.length > 0 ? settings.publicly_queryable : false}\n                                register={register}\n                                errors={errors}\n                            />\n                            <InputSwitch\n                                id=\"hierarchical\"\n                                label=\"Hierarchical\"\n                                description=\"Whether the taxonomy is hierarchical. Default false.\"\n                                defaultValue={fetched.length > 0 ? settings.hierarchical : true}\n                                register={register}\n                                errors={errors}\n                            />\n                            <InputSwitch\n                                id=\"show_ui\"\n                                label=\"Show in UI\"\n                                description=\"Whether to generate and allow a UI for managing terms in this taxonomy in the admin. If not set, the default is inherited from $public (default true).\"\n                                defaultValue={fetched.length > 0 ? settings.show_ui : true}\n                                register={register}\n                                errors={errors}\n                            />\n                            <InputSwitch\n                                id=\"show_in_menu\"\n                                label=\"Show in menu\"\n                                description=\"Whether to show the taxonomy in the admin menu. If true, the taxonomy is shown as a submenu of the object type menu. If false, no menu is shown. $show_ui must be true. If not set, default is inherited from $show_ui (default true).\"\n                                defaultValue={fetched.length > 0 ? settings.show_in_menu : true}\n                                register={register}\n                                errors={errors}\n                            />\n                            <InputSwitch\n                                id=\"show_in_nav_menus\"\n                                label=\"Show in nav menus\"\n                                description=\"Makes this taxonomy available for selection in navigation menus. If not set, the default is inherited from $public (default true).\"\n                                defaultValue={fetched.length > 0 ? settings.show_in_nav_menus : true}\n                                register={register}\n                                errors={errors}\n                            />\n                            <InputSwitch\n                                id=\"show_in_rest\"\n                                label=\"Show in REST API\"\n                                description=\"Whether to include the taxonomy in the REST API. Set this to true for the taxonomy to be available in the block editor. SET TRUE TO ENABLE VISUALIZATION ON GUTEMBERG EDITOR.\"\n                                defaultValue={fetched.length > 0 ? settings.show_in_rest : false}\n                                register={register}\n                                errors={errors}\n                            />\n                            <InputText\n                                id=\"rest_base\"\n                                label=\"REST API base slug\"\n                                placeholder=\"REST API base slug\"\n                                register={register}\n                                errors={errors}\n                                description=\" To change the base url of REST API route. Default is $taxonomy.\"\n                                validate={{\n                                    maxLength: {\n                                        value: 255,\n                                        message: \"min length is 255\"\n                                    }\n                                }}\n                            />\n                            <InputText\n                                id=\"rest_controller_class\"\n                                label=\"REST controller class\"\n                                placeholder=\"REST controller class\"\n                                register={register}\n                                errors={errors}\n                                description=\"REST API Controller class name. Default is 'WP_REST_Terms_Controller'.\"\n                                validate={{\n                                    maxLength: {\n                                        value: 255,\n                                        message: \"min length is 255\"\n                                    }\n                                }}\n                            />\n                            <InputSwitch\n                                id=\"show_tagcloud\"\n                                label=\"Show Tagcloud\"\n                                description=\"Whether to list the taxonomy in the Tag Cloud Widget controls. If not set, the default is inherited from $show_ui (default true).\"\n                                defaultValue={fetched.length > 0 ? settings.show_tagcloud : true}\n                                register={register}\n                                errors={errors}\n                            />\n                            <InputSwitch\n                                id=\"show_in_quick_edit\"\n                                label=\"Show in quick edit\"\n                                description=\"Whether to show the taxonomy in the quick/bulk edit panel. It not set, the default is inherited from $show_ui (default true).\"\n                                defaultValue={fetched.length > 0 ? settings.show_in_quick_edit : true}\n                                register={register}\n                                errors={errors}\n                            />\n                            <InputSwitch\n                                id=\"show_admin_column\"\n                                label=\"Show admin column\"\n                                description=\"Whether to display a column for the taxonomy on its post type listing screens. Default false.\"\n                                defaultValue={fetched.length > 0 ? settings.show_admin_column : false}\n                                register={register}\n                                errors={errors}\n                            />\n                            <Checkboxes\n                                id=\"capabilities\"\n                                label=\"Capabilities\"\n                                placeholder=\"Capabilities\"\n                                register={register}\n                                errors={errors}\n                                defaultValue=\"post\"\n                                description=\"Array of capabilities for this taxonomy.\"\n                                values={{\n                                    \"manage_terms\": {\n                                        \"value\": \"manage_terms\",\n                                        \"checked\": (fetched.length > 0 && settings.capabilities) ? settings.capabilities.includes('manage_terms') : true,\n                                    },\n                                    \"edit_terms\": {\n                                        \"value\": \"edit_terms\",\n                                        \"checked\": (fetched.length > 0 && settings.capabilities) ? settings.capabilities.includes('edit_terms') : true,\n                                    },\n                                    \"delete_terms\": {\n                                        \"value\": \"delete_terms\",\n                                        \"checked\": (fetched.length > 0 && settings.capabilities) ? settings.capabilities.includes('delete_terms') : true,\n                                    },\n                                    \"assign_terms\": {\n                                        \"value\": \"assign_terms\",\n                                        \"checked\": (fetched.length > 0 && settings.capabilities) ? settings.capabilities.includes('assign_terms') : true,\n                                    }\n                                }}\n                                validate={{\n                                    maxLength: {\n                                        value: 255,\n                                        message: \"min length is 255\"\n                                    }\n                                }}\n                            />\n                            <InputSwitch\n                                id=\"rewrite\"\n                                label=\"Rewrite\"\n                                description=\"Triggers the handling of rewrites for this taxonomy. Default true, using $taxonomy as slug. To prevent rewrite, set to false. To specify rewrite rules, an array can be passed with any of these keys:\"\n                                defaultValue={fetched.length > 0 ? settings.rewrite : false}\n                                register={register}\n                                errors={errors}\n                            />\n                            {rewrite && (\n                                <InputText\n                                    id=\"custom_rewrite\"\n                                    label=\"Custom rewrite rules\"\n                                    placeholder=\"Custom rewrite rules\"\n                                    register={register}\n                                    errors={errors}\n                                    description=\"Custom post type slug to use instead of default.\"\n                                    validate={{\n                                        maxLength: {\n                                            value: 255,\n                                            message: \"min length is 255\"\n                                        }\n                                    }}\n                                />\n                            )}\n                            <InputSwitch\n                                id=\"query_var\"\n                                label=\"Query var\"\n                                description=\"Sets the query var key for this taxonomy. Default $taxonomy key. If false, a taxonomy cannot be loaded at ?{query_var}={term_slug}. If a string, the query ?{query_var}={term_slug} will be valid.\"\n                                defaultValue={fetched.length > 0 ? settings.query_var : false}\n                                register={register}\n                                errors={errors}\n                            />\n                            {query_var && (\n                                <InputText\n                                    id=\"custom_query_var\"\n                                    label=\"Custom query var\"\n                                    placeholder=\"Custom query var\"\n                                    register={register}\n                                    errors={errors}\n                                    description=\"Custom query var slug to use instead of default.\"\n                                    validate={{\n                                        maxLength: {\n                                            value: 255,\n                                            message: \"min length is 255\"\n                                        }\n                                    }}\n                                />\n                            )}\n                            <InputText\n                                id=\"default_term\"\n                                label=\"Default term\"\n                                placeholder=\"Default term to be used for the taxonomy.\"\n                                register={register}\n                                errors={errors}\n                                description=\"Allowed keys: 'name', name of default term.|'slug', Slug for default term.|'description', Description for default term\"\n                                validate={{\n                                    maxLength: {\n                                        value: 255,\n                                        message: \"min length is 255\"\n                                    }\n                                }}\n                            />\n                            <InputSwitch\n                                id=\"sort\"\n                                label=\"Sort\"\n                                description=\"Whether terms in this taxonomy should be sorted in the order they are provided to wp_set_object_terms(). Default null which equates to false.\"\n                                defaultValue={fetched.length > 0 ? settings.sort : false}\n                                register={register}\n                                errors={errors}\n                            />\n                        </div>\n                    </div>\n                </main>\n            </form>\n        </Layout>\n    )\n};\n\nexport default OtherSettingsStep;","import React, {useEffect, useRef, useState} from 'react';\nimport {changeCurrentAdminMenuLink, metaTitle} from \"../../../utils/misc\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useParams} from \"react-router-dom\";\nimport useUnsavedChangesWarning from \"../../../hooks/useUnsavedChangesWarning\";\nimport Steps from \"../../reusable/Steps\";\nimport {saveCustomPostTypeHeadings} from \"../../../constants/steps\";\nimport Spinner from \"../../reusable/Loader/Spinner\";\nimport {fetchTaxonomies} from \"../../../redux/thunks/fetchTaxonomies\";\nimport {resetTaxonomies} from \"../../../redux/thunks/resetTaxonomies\";\nimport BasicStep from \"./_Basic\";\nimport AdditionalLabelsStep from \"./_Labels\";\nimport OtherSettingsStep from \"./_Settings\";\nimport {translate} from \"../../../localization\";\nimport {startFromStep, stepReset} from \"../../../redux/actions/stepsActions\";\nimport {hydrateTaxonomyFormFromStep} from \"../../../utils/forms\";\n\nconst SaveTaxonomy = () => {\n\n    // manage global state\n    const {fetched, loading} = useSelector(state => state.fetchTaxonomiesReducer);\n    const dispatch = useDispatch();\n\n    // manage local state\n    const {taxonomy} = useParams();\n    const {step} = useParams();\n    const [Prompt, setDirty, setPristine] = useUnsavedChangesWarning();\n    const [edit, isEdit] = useState(false);\n    const didMountRef = useRef(false);\n    const [fetchedSuccess, setFetchedSuccess] = useState(null);\n\n    // handle fetch outcome\n    useEffect(() => {\n        if (didMountRef.current){\n            if(!loading){\n                setFetchedSuccess(true);\n            }\n        } else {\n            didMountRef.current = true;\n        }\n    }, [loading]);\n\n    useEffect(() => {\n        if(taxonomy){\n            metaTitle(translate(\"taxonomy_edit.title\"));\n            dispatch(fetchTaxonomies({\n                taxonomy:taxonomy\n            }));\n\n            isEdit(true);\n\n            if(step){\n                if(fetchedSuccess){\n                    const stepInt = parseInt(step);\n                    dispatch(startFromStep(stepInt, hydrateTaxonomyFormFromStep(stepInt,fetched[0])));\n                }\n            } else {\n                dispatch(stepReset());\n            }\n\n        } else {\n            metaTitle(translate(\"taxonomy_create.title\"));\n            changeCurrentAdminMenuLink('#/register_taxonomy');\n            dispatch(resetTaxonomies());\n            dispatch(stepReset());\n        }\n        setDirty();\n    }, [fetchedSuccess]);\n\n    const setPristineHandler = () => {\n        setPristine();\n    };\n\n    const steps = [\n        <BasicStep taxonomy={taxonomy} edit={edit} headings={saveCustomPostTypeHeadings} />,\n        <AdditionalLabelsStep taxonomy={taxonomy} headings={saveCustomPostTypeHeadings}/>,\n        <OtherSettingsStep taxonomy={taxonomy} setPristineHandler={setPristineHandler} headings={saveCustomPostTypeHeadings}/>,\n    ];\n\n    if(!fetchedSuccess){\n        return <Spinner/>;\n    }\n\n    return (\n        <React.Fragment>\n            {Prompt}\n            <Steps\n                steps={steps}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default SaveTaxonomy;","\n// please refer to\n// https://developer.wordpress.org/reference/functions/get_taxonomy_labels/\nexport const taxonomyLabelsList = [\n        {\n            id: \"name\",\n            label: \"Menu Name\",\n            description: \"General name for the taxonomy, usually plural. The same as and overridden by $tax->label. Default 'Tags'/'Categories'.\",\n        },\n        {\n            id: \"singular_name\",\n            label: \"Singular name\",\n            description: \"Name for one object of this taxonomy. Default 'Tag'/'Category'\",\n        },\n        {\n            id: \"search_items\",\n            label: \"Search items\",\n            description: \"Search Tags/Search Categories\",\n        },\n        {\n            id: \"popular_items\",\n            label: \"Popular items\",\n            description: \"This label is only used for non-hierarchical taxonomies. Default 'Popular Tags'.\",\n        },\n        {\n            id: \"all_items\",\n            label: \"All items\",\n            description: \"All Tags'/'All Categories\",\n        },\n        {\n            id: \"parent_item\",\n            label: \"Parent item\",\n            description: \"This label is only used for hierarchical taxonomies. Default 'Parent Category'.\",\n        },\n        {\n            id: \"parent_item_colon\",\n            label: \"Parent item colon\",\n            description: \"The same as parent_item, but with colon : in the end.\",\n        },\n        {\n            id: \"edit_item\",\n            label: \"Edit item\",\n            description: \"Edit Tag'/'Edit Category.\",\n        },\n        {\n            id: \"view_item\",\n            label: \"View item\",\n            description: \"View Tag'/'View Category.\",\n        },\n        {\n            id: \"update_item\",\n            label: \"Update item\",\n            description: \"Update Tag'/'Update Category.\",\n        },\n        {\n            id: \"add_new_item\",\n            label: \"Add new item\",\n            description: \"Add New Tag'/'Add New Category.\",\n        },\n        {\n            id: \"new_item_name\",\n            label: \"New item name\",\n            description: \"New Tag Name'/'New Category Name.\",\n        },\n        {\n            id: \"separate_items_with_commas\",\n            label: \"Separate items with commas\",\n            description: \"This label is only used for non-hierarchical taxonomies. Default 'Separate tags with commas', used in the meta box.\",\n        },\n        {\n            id: \"add_or_remove_items\",\n            label: \"Add or remove items\",\n            description: \"This label is only used for non-hierarchical taxonomies. Default 'Add or remove tags', used in the meta box when JavaScript is disabled.\",\n        },\n        {\n            id: \"choose_from_most_used\",\n            label: \"Choose from most used\",\n            description: \"This label is only used on non-hierarchical taxonomies. Default 'Choose from the most used tags', used in the meta box.\",\n        },\n        {\n            id: \"not_found\",\n            label: \"Not found\",\n            description: \"No tags found'/'No categories found', used in the meta box and taxonomy list table.\",\n        },\n        {\n            id: \"no_terms\",\n            label: \"No terms\",\n            description: \"No tags'/'No categories', used in the posts and media list tables.\",\n        },\n        {\n            id: \"filter_by_item\",\n            label: \"Filter by item\",\n            description: \"This label is only used for hierarchical taxonomies. Default 'Filter by category', used in the posts list table.\",\n        },\n        {\n            id: \"items_list_navigation\",\n            label: \"Items list navigation\",\n            description: \"Label for the table pagination hidden heading.\",\n        },\n        {\n            id: \"items_list\",\n            label: \"Items list\",\n            description: \"Label for the table hidden heading.\",\n        },\n        {\n            id: \"most_used\",\n            label: \"Most used\",\n            description: \"Title for the Most Used tab. Default 'Most Used'.\",\n        },\n        {\n            id: \"back_to_items\",\n            label: \"Back to items\",\n            description: \"Label displayed after a term has been updated.\",\n        },\n    ];","import {wpAjaxRequest} from \"../../utils/ajax\";\nimport {fetchTaxonomiesFailure, fetchTaxonomiesInProgress, fetchTaxonomiesSuccess} from \"../actions/fetchTaxonomiesActions\";\n\nexport const fetchTaxonomies = (meta) => async (dispatch, getState) => {\n    try {\n        dispatch(fetchTaxonomiesInProgress(meta));\n        const fetched = await wpAjaxRequest('fetchTaxonomiesAction', meta ? meta : {} );\n        dispatch(fetchTaxonomiesSuccess(fetched));\n    } catch ( e ) {\n        dispatch(fetchTaxonomiesFailure(e));\n    }\n};\n","import {wpAjaxRequest} from \"../../utils/ajax\";\nimport {resetTaxonomiesInProgress, resetTaxonomiesSuccess} from \"../actions/fetchTaxonomiesActions\";\n\nexport const resetTaxonomies = () => async (dispatch, getState) => {\n    dispatch(resetTaxonomiesInProgress());\n    const fetched = await wpAjaxRequest('resetTaxonomiesAction' );\n    dispatch(resetTaxonomiesSuccess());\n};\n"],"sourceRoot":""}