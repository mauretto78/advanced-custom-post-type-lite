{"version":3,"sources":["webpack://advanced-custom-post-type-lite/./assets/src/App/constants/taxonomyLabels.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/SaveTaxonomy/Steps/BasicStep.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/SaveTaxonomy/Steps/LabelsStep.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/SaveTaxonomy/Steps/SettingsStep.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/SaveTaxonomy/index.js"],"names":["taxonomyLabels","id","label","description","BasicStep","title","crumbs","headings","stepActive","setStepActive","handleSubmit","formValues","edit","state","fetchTaxonomies","data","mode","register","submit","setValue","errors","formState","slug","singular_label","plural_label","length","singular","plural","handleSlugChange","onSubmit","actions","styleVariants","SECONDARY","e","currentTarget","value","validate","isTaxonomySlugValid","asyncIsTaxonomySlugValid","required","propTypes","PropTypes","arrayOf","shape","string","isRequired","Button","number","func","object","bool","LabelsStep","labels","r","name","singular_name","search_items","popular_items","all_items","parent_item","parent_item_colon","edit_item","view_item","update_item","add_new_item","new_item_name","separate_items_with_commas","add_or_remove_items","choose_from_most_used","not_found","no_terms","filter_by_item","items_list_navigation","items_list","most_used","back_to_items","map","SettingsStep","loading","settings","defaultValues","public","publicly_queryable","hierarchical","show_ui","show_in_menu","show_in_nav_menus","show_in_rest","rest_base","rest_controller_class","show_tagcloud","show_in_quick_edit","show_admin_column","capabilities","rewrite","custom_rewrite","query_var","custom_query_var","default_term","sort","isValid","watch","PRIMARY","maxLength","message","includes","SaveTaxonomy","dispatch","saveTaxonomy","fetchLoading","taxonomy","step","isEdit","fetchError","setFetchError","parseInt","setFormValues","navigate","then","res","payload","catch","console","error","err","link","index","success","toast"],"mappings":"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","file":"293.js","sourcesContent":["// please refer to\n// https://developer.wordpress.org/reference/functions/get_taxonomy_labels/\nimport useTranslation from \"../hooks/useTranslation\";\n\nexport const taxonomyLabels = [\n    {\n        id: \"name\",\n        label: useTranslation(\"Menu Name\"),\n        description: useTranslation(\"General name for the taxonomy, usually plural. The same as and overridden by $tax->label. Default 'Tags/Categories'.\"),\n    },\n    {\n        id: \"singular_name\",\n        label: useTranslation(\"Singular name\"),\n        description: useTranslation(\"Name for one object of this taxonomy. Default 'Tag/Category'\"),\n    },\n    {\n        id: \"search_items\",\n        label: useTranslation(\"Search items\"),\n        description: useTranslation(\"Search Tags/Search Categories\"),\n    },\n    {\n        id: \"popular_items\",\n        label: useTranslation(\"Popular items\"),\n        description: useTranslation(\"This label is only used for non-hierarchical taxonomies. Default 'Popular Tags'.\"),\n    },\n    {\n        id: \"all_items\",\n        label: useTranslation(\"All items\"),\n        description: useTranslation(\"All Tags/All Categories\"),\n    },\n    {\n        id: \"parent_item\",\n        label: useTranslation(\"Parent item\"),\n        description: useTranslation(\"This label is only used for hierarchical taxonomies. Default 'Parent Category'.\"),\n    },\n    {\n        id: \"parent_item_colon\",\n        label: useTranslation(\"Parent item colon\"),\n        description: useTranslation(\"The same as parent_item, but with colon : in the end.\"),\n    },\n    {\n        id: \"edit_item\",\n        label: useTranslation(\"Edit item\"),\n        description: useTranslation(\"Edit Tag/Edit Category.\"),\n    },\n    {\n        id: \"view_item\",\n        label: useTranslation(\"View item\"),\n        description: useTranslation(\"View Tag/View Category.\"),\n    },\n    {\n        id: \"update_item\",\n        label: useTranslation(\"Update item\"),\n        description: useTranslation(\"Update Tag/Update Category.\"),\n    },\n    {\n        id: \"add_new_item\",\n        label: useTranslation(\"Add new item\"),\n        description: useTranslation(\"Add New Tag/Add New Category.\"),\n    },\n    {\n        id: \"new_item_name\",\n        label: useTranslation(\"New item name\"),\n        description: useTranslation(\"New Tag Name/New Category Name.\"),\n    },\n    {\n        id: \"separate_items_with_commas\",\n        label: useTranslation(\"Separate items with commas\"),\n        description: useTranslation(\"This label is only used for non-hierarchical taxonomies. Default 'Separate tags with commas', used in the meta box.\"),\n    },\n    {\n        id: \"add_or_remove_items\",\n        label: useTranslation(\"Add or remove items\"),\n        description: useTranslation(\"This label is only used for non-hierarchical taxonomies. Default 'Add or remove tags', used in the meta box when JavaScript is disabled.\"),\n    },\n    {\n        id: \"choose_from_most_used\",\n        label: useTranslation(\"Choose from most used\"),\n        description: useTranslation(\"This label is only used on non-hierarchical taxonomies. Default 'Choose from the most used tags', used in the meta box.\"),\n    },\n    {\n        id: \"not_found\",\n        label: useTranslation(\"Not found\"),\n        description: useTranslation(\"No tags found/No categories found', used in the meta box and taxonomy list table.\"),\n    },\n    {\n        id: \"no_terms\",\n        label: useTranslation(\"No terms\"),\n        description: useTranslation(\"No tags/No categories', used in the posts and media list tables.\"),\n    },\n    {\n        id: \"filter_by_item\",\n        label: useTranslation(\"Filter by item\"),\n        description: useTranslation(\"This label is only used for hierarchical taxonomies. Default 'Filter by category', used in the posts list table.\"),\n    },\n    {\n        id: \"items_list_navigation\",\n        label: useTranslation(\"Items list navigation\"),\n        description: useTranslation(\"Label for the table pagination hidden heading.\"),\n    },\n    {\n        id: \"items_list\",\n        label: useTranslation(\"Items list\"),\n        description: useTranslation(\"Label for the table hidden heading.\"),\n    },\n    {\n        id: \"most_used\",\n        label: useTranslation(\"Most used\"),\n        description: useTranslation(\"Title for the Most Used tab. Default 'Most Used'.\"),\n    },\n    {\n        id: \"back_to_items\",\n        label: useTranslation(\"Back to items\"),\n        description: useTranslation(\"Label displayed after a term has been updated.\"),\n    },\n    ];","import React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport Button from \"../../../components/Button\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport {useForm} from \"react-hook-form\";\nimport Layout from \"../../../layout/Layout\";\nimport StepsHeader from \"../../../components/Steps/StepsHeader\";\nimport Card from \"../../../components/Card\";\nimport {useSelector} from \"react-redux\";\nimport {sluggifyString} from \"../../../utils/strings\";\nimport Input from \"../../../components/Forms/Input\";\nimport CardRow from \"../../../components/Card/CardRow\";\nimport {asyncIsTaxonomySlugValid, isTaxonomySlugValid} from \"../../../utils/validation\";\n\nconst BasicStep = ({ title, crumbs, headings, stepActive, setStepActive, handleSubmit, formValues, edit = false}) => {\n\n    // manage global state\n    const {data} = useSelector(state => state.fetchTaxonomies);\n\n    const { register, handleSubmit: submit, setValue, formState: {errors} } = useForm({\n        mode: 'all'\n    });\n\n    useEffect(() => {\n        if(formValues && formValues[1]){\n            setValue(\"slug\", formValues[1].slug);\n            setValue(\"singular_label\", formValues[1].singular_label);\n            setValue(\"plural_label\", formValues[1].plural_label);\n        }\n    }, [formValues]);\n\n    useEffect(()=>{\n        if(data.length > 0){\n            setValue(\"slug\", data[0].slug);\n            setValue(\"singular_label\", data[0].singular);\n            setValue(\"plural_label\", data[0].plural);\n        }\n    }, [data]);\n\n    const handleSlugChange = (slug) => {\n        setValue('slug', sluggifyString(slug, 32));\n    };\n\n    const onSubmit = (data) => {\n        handleSubmit(data, 1);\n        setStepActive(1);\n    };\n\n    const actions = [\n        <Button\n            testId=\"next-step\"\n            style={styleVariants.SECONDARY}\n        >\n            {useTranslation(\"Next Step\")}\n        </Button>\n    ];\n\n    return (\n        <form onSubmit={submit(onSubmit)}>\n            <Layout\n                crumbs={crumbs}\n                title={title}\n                actions={actions}\n            >\n                <Card style=\"with-shadow\">\n                    <StepsHeader\n                        stepActive={stepActive}\n                        headings={headings}\n                    />\n                    <CardRow\n                        label={useTranslation(\"Slug\")}\n                        value={\n                            <Input\n                                id=\"slug\"\n                                placeholder={useTranslation(\"Slug\")}\n                                readOnly={data.length > 0}\n                                description={useTranslation(\"The post name/slug. Used for various queries for taxonomy content.\")}\n                                onChangeCapture={ e => handleSlugChange(e.currentTarget.value) }\n                                register={register}\n                                errors={errors}\n                                isRequired={true}\n                                validate={{\n                                    validate: edit ? isTaxonomySlugValid : asyncIsTaxonomySlugValid,\n                                    required: useTranslation(\"This field is mandatory\")\n                                }}\n                            />\n                        }\n                    />\n                    <CardRow\n                        label={useTranslation(\"Singular label\")}\n                        value={\n                            <Input\n                                id=\"singular_label\"\n                                placeholder={useTranslation(\"(e.g. Movie)\")}\n                                description={useTranslation(\"Used when a singular label is needed\")}\n                                register={register}\n                                errors={errors}\n                                isRequired={true}\n                                validate={{\n                                    required: useTranslation(\"This field is mandatory\")\n                                }}\n                            />\n                        }\n                    />\n                    <CardRow\n                        label={useTranslation(\"Plural label\")}\n                        value={\n                            <Input\n                                id=\"plural_label\"\n                                placeholder={useTranslation(\"(e.g. Movies)\")}\n                                description={useTranslation(\"Used for the taxonomy admin menu item\")}\n                                register={register}\n                                errors={errors}\n                                isRequired={true}\n                                validate={{\n                                    required: useTranslation(\"This field is mandatory\")\n                                }}\n                            />\n                        }\n                    />\n                </Card>\n            </Layout>\n        </form>\n    );\n};\n\nBasicStep.propTypes = {\n    headings: PropTypes.arrayOf(PropTypes.shape({\n        label:  PropTypes.string.isRequired,\n        description:  PropTypes.string.isRequired,\n    })).isRequired,\n    title: PropTypes.string.isRequired,\n    crumbs: PropTypes.arrayOf(Button).isRequired,\n    stepActive: PropTypes.number.isRequired,\n    setStepActive: PropTypes.func.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n    formValues: PropTypes.object.isRequired,\n    edit: PropTypes.bool\n};\n\nexport default BasicStep;","import React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport Button from \"../../../components/Button\";\nimport {useSelector} from \"react-redux\";\nimport {useForm} from \"react-hook-form\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Layout from \"../../../layout/Layout\";\nimport StepsHeader from \"../../../components/Steps/StepsHeader\";\nimport {taxonomyLabels} from \"../../../constants/taxonomyLabels\";\nimport CardRow from \"../../../components/Card/CardRow\";\nimport Input from \"../../../components/Forms/Input\";\nimport Card from \"../../../components/Card\";\n\nconst LabelsStep = ({title, crumbs, headings, stepActive, setStepActive, handleSubmit, formValues, edit}) => {\n\n    // manage global state\n    const {data} = useSelector(state => state.fetchTaxonomies);\n\n    let labels = {};\n    if(data.length > 0){\n        labels = data[0].labels;\n    }\n\n    const { register, handleSubmit: submit, setValue, formState: {errors} } = useForm({\n        mode: 'all'\n    });\n\n    // form default values\n    useEffect(() => {\n        if(!edit && formValues && formValues[1]){\n            setValue('name', formValues[1].slug );\n            setValue('singular_name', formValues[1].singular_label );\n            setValue('search_items', `${useTranslation(\"Search {{r}}\", {r: formValues[1].plural_label})}`);\n            setValue('popular_items', `${useTranslation(\"Popular {{r}}\", {r: formValues[1].plural_label})}`);\n            setValue('all_items', `${useTranslation(\"All {{r}}\", {r: formValues[1].plural_label})}`);\n            setValue('parent_item', `${useTranslation(\"Parent {{r}}\", {r: formValues[1].singular_label})}`);\n            setValue('parent_item_colon', useTranslation(\"Parent item\") );\n            setValue('edit_item', `${useTranslation(\"Edit\")}`);\n            setValue('view_item', `${useTranslation(\"View\")}`);\n            setValue('update_item', `${useTranslation(\"Update {{r}}\", {r: formValues[1].singular_label})}`);\n            setValue('add_new_item', `${useTranslation(\"Add new {{r}}\", {r: formValues[1].singular_label})}`);\n            setValue('new_item_name', `${useTranslation(\"New {{r}}\", {r: formValues[1].singular_label})}`);\n            setValue('separate_items_with_commas', `${useTranslation(\"Separate {{r}} with commas\", {r: formValues[1].plural_label})}`);\n            setValue('add_or_remove_items', `${useTranslation(\"Add or remove {{r}}\", {r: formValues[1].plural_label})}`);\n            setValue('choose_from_most_used', `${useTranslation(\"Choose from most used {{r}}\", {r: formValues[1].singular_label})}`);\n            setValue('not_found', useTranslation(\"No {{r}} found\", {r: formValues[1].singular_label}));\n            setValue('no_terms', `${useTranslation(\"No {{r}}\", {r: formValues[1].plural_label})}`);\n            setValue('filter_by_item', `${useTranslation(\"Filter by {{r}}\", {r: formValues[1].singular_label})}`);\n            setValue('items_list_navigation', useTranslation(\"Navigation list {{r}}\", {r: formValues[1].plural_label}));\n            setValue('items_list', useTranslation(\"List {{r}}\", {r: formValues[1].plural_label}));\n            setValue('most_used', `${useTranslation(\"Most used {{r}}\", {r: formValues[1].plural_label})}`);\n            setValue('back_to_items', `${useTranslation(\"Back to {{r}}\", {r: formValues[1].plural_label})}`);\n        }\n    }, [formValues]);\n\n    useEffect(() => {\n        if(edit && data.length > 0){\n            setValue('name', labels.name);\n            setValue('singular_name', labels.singular_name);\n            setValue('search_items', labels.search_items);\n            setValue('popular_items', labels.popular_items);\n            setValue('all_items', labels.all_items);\n            setValue('parent_item', labels.parent_item);\n            setValue('parent_item_colon', labels.parent_item_colon);\n            setValue('edit_item', labels.edit_item);\n            setValue('view_item', labels.view_item);\n            setValue('update_item', labels.update_item);\n            setValue('add_new_item', labels.add_new_item);\n            setValue('new_item_name', labels.new_item_name);\n            setValue('separate_items_with_commas', labels.separate_items_with_commas);\n            setValue('add_or_remove_items', labels.add_or_remove_items);\n            setValue('choose_from_most_used', labels.choose_from_most_used);\n            setValue('not_found', labels.not_found);\n            setValue('no_terms', labels.no_terms);\n            setValue('filter_by_item', labels.filter_by_item);\n            setValue('items_list_navigation', labels.items_list_navigation);\n            setValue('items_list', labels.items_list);\n            setValue('most_used', labels.most_used);\n            setValue('back_to_items', labels.back_to_items);\n        }\n    }, [data]);\n\n    const onSubmit = (data) => {\n        handleSubmit(data, 2);\n        setStepActive(2);\n    };\n\n    const actions = [\n        <Button testId=\"prev-step\" type=\"button\" onClick={() => setStepActive(0)} style={styleVariants.SECONDARY}>{useTranslation(\"Previous Step\")}</Button>,\n        <Button testId=\"next-step\" style={styleVariants.SECONDARY}>{useTranslation(\"Next Step\")}</Button>,\n    ];\n\n    return (\n        <form onSubmit={submit(onSubmit)}>\n            <Layout\n                crumbs={crumbs}\n                title={title}\n                actions={actions}\n            >\n                <Card style=\"with-shadow\">\n                    <StepsHeader\n                        stepActive={stepActive}\n                        headings={headings}\n                    />\n                    {taxonomyLabels.map((label)=>(\n                        <CardRow\n                            label={label.label}\n                            value={\n                                <Input\n                                    id={label.id}\n                                    register={register}\n                                    description={label.description}\n                                    errors={errors}\n                                    isRequired={true}\n                                    validate={{\n                                        required: useTranslation(\"This field is mandatory\")\n                                    }}\n                                />\n                            }\n                        />\n                    ))}\n                </Card>\n            </Layout>\n        </form>\n    );\n};\n\nLabelsStep.propTypes = {\n    headings: PropTypes.arrayOf(PropTypes.shape({\n        label:  PropTypes.string.isRequired,\n        description:  PropTypes.string.isRequired,\n    })).isRequired,\n    title: PropTypes.string.isRequired,\n    crumbs: PropTypes.arrayOf(Button).isRequired,\n    stepActive: PropTypes.number.isRequired,\n    setStepActive: PropTypes.func.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n    formValues: PropTypes.object.isRequired,\n    edit: PropTypes.bool.isRequired,\n};\n\nexport default LabelsStep;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from \"../../../components/Button\";\nimport {useSelector} from \"react-redux\";\nimport {useForm} from \"react-hook-form\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Layout from \"../../../layout/Layout\";\nimport Card from \"../../../components/Card\";\nimport StepsHeader from \"../../../components/Steps/StepsHeader\";\nimport Toggle from \"../../../components/Forms/Toggle\";\nimport CardRow from \"../../../components/Card/CardRow\";\nimport Input from \"../../../components/Forms/Input\";\nimport Checkbox from \"../../../components/Forms/Checkbox\";\n\nconst SettingsStep = ({title, crumbs, headings, stepActive, setStepActive, handleSubmit, formValues, loading = false}) => {\n\n    // manage global state\n    const {data} = useSelector(state => state.fetchTaxonomies);\n\n    // handle form\n    let settings = {};\n    if(data.length > 0){\n        settings = data[0].settings;\n    }\n\n    const { register, handleSubmit: submit, formState: {errors, isValid}, setValue, watch } = useForm({\n        mode: 'all',\n        defaultValues: {\n            public: data.length > 0 ? settings.public : null,\n            publicly_queryable: data.length > 0 ? settings.publicly_queryable : null,\n            hierarchical: data.length > 0 ? settings.hierarchical : null,\n            show_ui: data.length > 0 ? settings.show_ui : null,\n            show_in_menu: data.length > 0 ? settings.show_in_menu : null,\n            show_in_nav_menus: data.length > 0 ? settings.show_in_nav_menus : null,\n            show_in_rest: data.length > 0 ? settings.show_in_rest : null,\n            rest_base: data.length > 0 ? settings.rest_base : null,\n            rest_controller_class: data.length > 0 ? settings.rest_controller_class : null,\n            show_tagcloud: data.length > 0 ? settings.show_tagcloud : null,\n            show_in_quick_edit: data.length > 0 ? settings.show_in_quick_edit : null,\n            show_admin_column: data.length > 0 ? settings.show_admin_column : null,\n            capabilities: data.length > 0 ? settings.capabilities : null,\n            rewrite: data.length > 0 ? settings.rewrite : null,\n            custom_rewrite: data.length > 0 ? settings.custom_rewrite : null,\n            query_var: data.length > 0 ? settings.query_var : null,\n            custom_query_var: data.length > 0 ? settings.custom_query_var : null,\n            default_term: data.length > 0 ? settings.default_term : null,\n            sort: data.length > 0 ? settings.sort : null,\n        }\n    });\n\n    const rewrite = watch(\"rewrite\");\n    const query_var = watch(\"query_var\");\n\n    const onSubmit = (data) => {\n        handleSubmit(data, 3);\n    };\n\n    const actions = [\n        <Button testId=\"prev-step\" type=\"button\" onClick={() => setStepActive(1)} style={styleVariants.SECONDARY}>{useTranslation(\"Previous Step\")}</Button>,\n        <Button testId=\"save\" style={styleVariants.PRIMARY} disabled={loading}>{useTranslation(\"Save\")}</Button>,\n    ];\n\n    return (\n        <form onSubmit={submit(onSubmit)}>\n            <Layout\n                crumbs={crumbs}\n                title={title}\n                actions={actions}\n            >\n                <Card style=\"with-shadow\">\n                    <StepsHeader\n                        stepActive={stepActive}\n                        headings={headings}\n                    />\n                    <CardRow\n                        label={useTranslation(\"Is Public\")}\n                        value={\n                            <Toggle\n                                id=\"public\"\n                                description={useTranslation(\"Whether a taxonomy is intended for use publicly either via the admin interface or by front-end users.\")}\n                                defaultValue={data.length > 0 ? settings.public : true}\n                                register={register}\n                                errors={errors}\n                            />\n                        }\n                    />\n                    <CardRow\n                        label={useTranslation(\"Publicly queryable\")}\n                        value={\n                            <Toggle\n                                id=\"publicly_queryable\"\n                                description={useTranslation(\"Whether the taxonomy is publicly queryable. If not set, the default is inherited from $public.\")}\n                                defaultValue={data.length > 0 ? settings.publicly_queryable : true}\n                                register={register}\n                                errors={errors}\n                            />\n                        }\n                    />\n                    <CardRow\n                        label={useTranslation(\"Hierarchical\")}\n                        value={\n                            <Toggle\n                                id=\"hierarchical\"\n                                description={useTranslation(\"Whether the taxonomy is hierarchical. Default false.\")}\n                                defaultValue={data.length > 0 ? settings.hierarchical : false}\n                                register={register}\n                                errors={errors}\n                            />\n                        }\n                    />\n                    <CardRow\n                        label={useTranslation(\"Show in UI\")}\n                        value={\n                            <Toggle\n                                id=\"show_ui\"\n                                description={useTranslation(\"Whether to generate and allow a UI for managing terms in this taxonomy in the admin. If not set, the default is inherited from $public (default true).\")}\n                                defaultValue={data.length > 0 ? settings.show_ui : true}\n                                register={register}\n                                errors={errors}\n                            />\n                        }\n                    />\n                    <CardRow\n                        label={useTranslation(\"Show in menu\")}\n                        value={\n                            <Toggle\n                                id=\"show_in_menu\"\n                                description={useTranslation(\"Whether to show the taxonomy in the admin menu. If true, the taxonomy is shown as a submenu of the object type menu. If false, no menu is shown. $show_ui must be true. If not set, default is inherited from $show_ui (default true).\")}\n                                defaultValue={data.length > 0 ? settings.show_in_menu : true}\n                                register={register}\n                                errors={errors}\n                            />\n                        }\n                    />\n                    <CardRow\n                        label={useTranslation(\"Show in nav menus\")}\n                        value={\n                            <Toggle\n                                id=\"show_in_nav_menus\"\n                                description={useTranslation(\"Makes this taxonomy available for selection in navigation menus. If not set, the default is inherited from $public (default true).\")}\n                                defaultValue={data.length > 0 ? settings.show_in_nav_menus : true}\n                                register={register}\n                                errors={errors}\n                            />\n                        }\n                    />\n                    <CardRow\n                        label={useTranslation(\"Show in REST API\")}\n                        value={\n                            <Toggle\n                                id=\"show_in_rest\"\n                                description={useTranslation(\"Whether to include the taxonomy in the REST API. Set this to true for the taxonomy to be available in the block editor. SET TRUE TO ENABLE VISUALIZATION ON GUTEMBERG EDITOR.\")}\n                                defaultValue={data.length > 0 ? settings.show_in_rest : true}\n                                register={register}\n                                errors={errors}\n                            />\n                        }\n                    />\n                    <CardRow\n                        label={useTranslation(\"REST API base slug\")}\n                        value={\n                            <Input\n                                id=\"rest_base\"\n                                placeholder={useTranslation(\"REST API base slug\")}\n                                description={useTranslation(\"To change the base url of REST API route. Default is $taxonomy.\")}\n                                validate={{\n                                    maxLength: {\n                                        value: 255,\n                                        message: \"max length is 255\"\n                                    }\n                                }}\n                                register={register}\n                                errors={errors}\n                            />\n                        }\n                    />\n                    <CardRow\n                        label={useTranslation(\"REST controller class\")}\n                        value={\n                            <Input\n                                id=\"rest_controller_class\"\n                                placeholder={useTranslation(\"REST controller class\")}\n                                description={useTranslation(\"REST API Controller class name. Default is 'WP_REST_Terms_Controller'.\")}\n                                validate={{\n                                    maxLength: {\n                                        value: 255,\n                                        message: \"max length is 255\"\n                                    }\n                                }}\n                                register={register}\n                                errors={errors}\n                            />\n                        }\n                    />\n                    <CardRow\n                        label={useTranslation(\"Show Tagcloud\")}\n                        value={\n                            <Toggle\n                                id=\"show_tagcloud\"\n                                description={useTranslation(\"Whether to list the taxonomy in the Tag Cloud Widget controls. If not set, the default is inherited from $show_ui (default true).\")}\n                                defaultValue={data.length > 0 ? settings.show_tagcloud : true}\n                                register={register}\n                                errors={errors}\n                            />\n                        }\n                    />\n                    <CardRow\n                        label={useTranslation(\"Show in quick edit\")}\n                        value={\n                            <Toggle\n                                id=\"show_in_quick_edit\"\n                                description={useTranslation(\"Whether to show the taxonomy in the quick/bulk edit panel. It not set, the default is inherited from $show_ui (default true).\")}\n                                defaultValue={data.length > 0 ? settings.show_in_quick_edit : true}\n                                register={register}\n                                errors={errors}\n                            />\n                        }\n                    />\n                    <CardRow\n                        label={useTranslation(\"Show admin column\")}\n                        value={\n                            <Toggle\n                                id=\"show_admin_column\"\n                                description={useTranslation(\"Whether to display a column for the taxonomy on its post type listing screens. Default false.\")}\n                                defaultValue={data.length > 0 ? settings.show_admin_column : false}\n                                register={register}\n                                errors={errors}\n                            />\n                        }\n                    />\n                    <CardRow\n                        label={useTranslation(\"Capabilities\")}\n                        value={\n                            <Checkbox\n                                id=\"capabilities\"\n                                defaultValue=\"post\"\n                                description={useTranslation(\"Array of capabilities for this taxonomy.\")}\n                                register={register}\n                                errors={errors}\n                                values={{\n                                    \"manage_terms\": {\n                                        \"value\": \"manage_terms\",\n                                        \"checked\": (data.length > 0 && settings.capabilities) ? settings.capabilities.includes('manage_terms') : true,\n                                    },\n                                    \"edit_terms\": {\n                                        \"value\": \"edit_terms\",\n                                        \"checked\": (data.length > 0 && settings.capabilities) ? settings.capabilities.includes('edit_terms') : true,\n                                    },\n                                    \"delete_terms\": {\n                                        \"value\": \"delete_terms\",\n                                        \"checked\": (data.length > 0 && settings.capabilities) ? settings.capabilities.includes('delete_terms') : true,\n                                    },\n                                    \"assign_terms\": {\n                                        \"value\": \"assign_terms\",\n                                        \"checked\": (data.length > 0 && settings.capabilities) ? settings.capabilities.includes('assign_terms') : true,\n                                    }\n                                }}\n                                validate={{\n                                    maxLength: {\n                                        value: 255,\n                                        message: useTranslation(\"max length is 255\")\n                                    }\n                                }}\n                            />\n                        }\n                    />\n                    <CardRow\n                        label={useTranslation(\"Rewrite\")}\n                        value={\n                            <Toggle\n                                id=\"rewrite\"\n                                description={useTranslation(\"Triggers the handling of rewrites for this taxonomy. Default true, using $taxonomy as slug. To prevent rewrite, set to false. To specify rewrite rules, an array can be passed with any of these keys:\")}\n                                defaultValue={data.length > 0 ? settings.rewrite : false}\n                                register={register}\n                                errors={errors}\n                            />\n                        }\n                    />\n                    {rewrite && (\n                        <CardRow\n                            label={useTranslation(\"Custom rewrite rules\")}\n                            value={\n                                <Input\n                                    id=\"custom_rewrite\"\n                                    placeholder={useTranslation(\"Custom rewrite rules\")}\n                                    description={useTranslation(\"Taxonomy slug to use instead of default.\")}\n                                    validate={{\n                                        maxLength: {\n                                            value: 255,\n                                            message: \"max length is 255\"\n                                        }\n                                    }}\n                                    register={register}\n                                    errors={errors}\n                                />\n                            }\n                        />\n                    )}\n                    <CardRow\n                        label={useTranslation(\"Query var\")}\n                        value={\n                            <Toggle\n                                id=\"query_var\"\n                                description={useTranslation(\"Sets the query var key for this taxonomy. Default $taxonomy key. If false, a taxonomy cannot be loaded at ?{query_var}={term_slug}. If a string, the query ?{query_var}={term_slug} will be valid.\")}\n                                defaultValue={data.length > 0 ? settings.query_var : false}\n                                register={register}\n                                errors={errors}\n                            />\n                        }\n                    />\n                    {query_var && (\n                        <CardRow\n                            label={useTranslation(\"Custom query var\")}\n                            value={\n                                <Input\n                                    id=\"custom_query_var\"\n                                    placeholder={useTranslation(\"Custom query var\")}\n                                    description={useTranslation(\"Custom query var slug to use instead of default.\")}\n                                    validate={{\n                                        maxLength: {\n                                            value: 255,\n                                            message: \"max length is 255\"\n                                        }\n                                    }}\n                                    register={register}\n                                    errors={errors}\n                                />\n                            }\n                        />\n                    )}\n                    <CardRow\n                        label={useTranslation(\"Default term\")}\n                        value={\n                            <Input\n                                id=\"default_term\"\n                                placeholder={useTranslation(\"Default term to be used for the taxonomy.\")}\n                                description={useTranslation(\"Allowed keys: 'name', name of default term.|'slug', Slug for default term.|'description', Description for default term\")}\n                                validate={{\n                                    maxLength: {\n                                        value: 255,\n                                        message: \"max length is 255\"\n                                    }\n                                }}\n                                register={register}\n                                errors={errors}\n                            />\n                        }\n                    />\n                    <CardRow\n                        label={useTranslation(\"Sort\")}\n                        value={\n                            <Toggle\n                                id=\"sort\"\n                                description={useTranslation(\"Whether terms in this taxonomy should be sorted in the order they are provided to wp_set_object_terms(). Default null which equates to false.\")}\n                                defaultValue={data.length > 0 ? settings.sort : false}\n                                register={register}\n                                errors={errors}\n                            />\n                        }\n                    />\n                </Card>\n            </Layout>\n        </form>\n    );\n};\n\nSettingsStep.propTypes = {\n    headings: PropTypes.arrayOf(PropTypes.shape({\n        label:  PropTypes.string.isRequired,\n        description:  PropTypes.string.isRequired,\n    })).isRequired,\n    title: PropTypes.string.isRequired,\n    crumbs: PropTypes.arrayOf(Button).isRequired,\n    stepActive: PropTypes.number.isRequired,\n    setStepActive: PropTypes.func.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n    formValues: PropTypes.object.isRequired,\n    loading: PropTypes.bool,\n};\n\nexport default SettingsStep;","import React, {useEffect, useState} from 'react';\nimport useTranslation from \"../../hooks/useTranslation\";\nimport {useNavigate, useParams} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport Loader from \"../../components/Loader\";\nimport PageNotFound from \"../404\";\nimport {changeCurrentAdminMenuLink, metaTitle, refreshPage} from \"../../utils/misc\";\nimport {fetchTaxonomies} from \"../../redux/reducers/fetchTaxonomiesSlice\";\nimport {scrollToTop} from \"../../utils/scroll\";\nimport Steps from \"../../components/Steps\";\nimport BasicStep from \"./Steps/BasicStep\";\nimport LabelsStep from \"./Steps/LabelsStep\";\nimport SettingsStep from \"./Steps/SettingsStep\";\nimport {saveTaxonomy} from \"../../redux/reducers/saveTaxonomySlice\";\nimport {toast} from \"react-hot-toast\";\n\nconst SaveTaxonomy = ({}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {loading} = useSelector(state => state.saveTaxonomy);\n    const {loading: fetchLoading} = useSelector(state => state.fetchTaxonomies);\n\n    // manage local state\n    const {taxonomy} = useParams();\n    const {step} = useParams();\n    const [edit, isEdit] = useState(false);\n    const [fetchError, setFetchError] = useState(false);\n    const [stepActive, setStepActive] = useState(step ? parseInt(step) : 0);\n    const [formValues, setFormValues] = useState({});\n\n    // manage redirect\n    const navigate = useNavigate();\n\n    if(taxonomy === 'category' || taxonomy === 'product_tag'){\n        navigate('/');\n    }\n\n    useEffect(() => {\n        if(taxonomy){\n            metaTitle(useTranslation(\"Edit Taxonomy\"));\n            dispatch(fetchTaxonomies({\n                taxonomy:taxonomy\n            }))\n                .then(res => {\n\n                    if(res.payload.length !== 1){\n                        setFetchError(true);\n                    } else {\n                        setFormValues({\n                            1: {\n                                slug: res.payload[0].slug,\n                                plural_label: res.payload[0].plural,\n                                singular_label: res.payload[0].singular,\n                            },\n                            2: res.payload[0].labels,\n                            3: res.payload[0].settings,\n                        })\n                    }\n\n                })\n                .catch(err => {\n                    setFetchError(true);\n                    console.error(err);\n                })\n            ;\n\n            isEdit(true);\n\n        } else {\n            metaTitle(useTranslation(\"Create new Taxonomy\"));\n            changeCurrentAdminMenuLink('#/register_taxonomy');\n        }\n    }, []);\n\n    const title = taxonomy ? useTranslation(\"Edit Taxonomy\") : useTranslation(\"Create new Taxonomy\");\n    const crumbs = [\n        {\n            label: useTranslation(\"Registered Taxonomies\"),\n            link: \"/taxonomies\"\n        },\n        {\n            label: taxonomy ? useTranslation(\"Edit Taxonomy\") : useTranslation(\"Create new Taxonomy\")\n        }\n    ];\n\n    const headings = [\n        {\n            \"label\": useTranslation(\"Basic\"),\n            \"description\": useTranslation(\"Minimum configuration\")\n        },\n        {\n            \"label\": useTranslation(\"Labels\"),\n            \"description\": useTranslation(\"Additional labels\")\n        },\n        {\n            \"label\": useTranslation(\"Settings\"),\n            \"description\": useTranslation(\"Other settings\")\n        }\n    ];\n\n    const handleSubmit = (data, index) => {\n\n        formValues[index] = data;\n        setFormValues(formValues);\n        scrollToTop();\n\n        if(stepActive === 2){\n            dispatch(saveTaxonomy(formValues))\n                .then(res => {\n                    const payload = res.payload;\n\n                    if(payload.success){\n                        navigate('/taxonomies');\n                        toast.success(useTranslation(\"Taxonomy successfully saved. The browser will refresh after 5 seconds.\"));\n                        refreshPage(5000);\n                    } else {\n                        toast.error(payload.error);\n                    }\n                })\n                .catch(err => {\n                    toast.error(err);\n                })\n            ;\n        }\n    };\n\n    if(edit && fetchLoading){\n        return <Loader/>;\n    }\n\n    if(fetchError){\n        return (\n            <PageNotFound />\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <Steps\n                steps={[\n                    <BasicStep\n                        edit={edit}\n                        title={title}\n                        headings={headings}\n                        crumbs={crumbs}\n                        stepActive={stepActive}\n                        setStepActive={setStepActive}\n                        handleSubmit={handleSubmit}\n                        formValues={formValues}\n                    />,\n                    <LabelsStep\n                        edit={edit}\n                        title={title}\n                        headings={headings}\n                        crumbs={crumbs}\n                        stepActive={stepActive}\n                        setStepActive={setStepActive}\n                        handleSubmit={handleSubmit}\n                        formValues={formValues}\n                    />,\n                    <SettingsStep\n                        title={title}\n                        headings={headings}\n                        crumbs={crumbs}\n                        stepActive={stepActive}\n                        setStepActive={setStepActive}\n                        handleSubmit={handleSubmit}\n                        formValues={formValues}\n                        loading={loading}\n                    />\n                ]}\n                activeStep={stepActive}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default SaveTaxonomy;"],"sourceRoot":""}