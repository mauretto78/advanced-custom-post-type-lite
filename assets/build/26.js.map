{"version":3,"sources":["webpack://advanced-custom-post-type-lite/./assets/src/App/components/Alert/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/BelongBadge/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/ButtonLink/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/Modal/BelongsModal.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/Modal/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/Pagination/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/constants/metaTypes.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/MetaList/BulkActions/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/MetaList/MetaListElement.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/MetaList/Modal/DeleteMetaModal.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/MetaList/index.js"],"names":["Alert","style","children","propTypes","PropTypes","oneOf","Object","values","styleVariants","isRequired","BelongBadge","belongsTo","find","findValue","setFindValue","SECONDARY","metaTypes","TAXONOMY","WARNING","OPTION_PAGE","INFO","DANGER","fetchFind","id","then","res","catch","console","error","err","message","USER","string","ButtonLink","size","to","target","BelongsModal","belongs","documentGlobals","document","globals","modalOpen","setModalOpen","belong","CUSTOM_POST_TYPE","operator","finds","split","length","map","is_rtl","index","isLast","logic","e","preventDefault","array","Modal","title","visible","textAlign","padding","buttons","testId","didMountRef","closed","setClosed","node","current","button","getElementById","bool","number","arrayOf","Button","Pagination","currentPage","totalPages","baseLink","rows","i","push","row","META","BulkActions","control","register","watchedElements","name","count","entries","key","value","WHITE","MetaListElement","record","page","formId","displayAs","display","fieldGroupsDisplay","STANDARD","ACCORDION","HORIZONTAL_TABS","VERTICAL_TABS","width","label","fieldsCount","object","DeleteMetaModal","settings","dispatch","perPage","modalVisible","setmodalVisible","navigate","handleDeleteModal","payload","success","toast","MetaList","parent","ref","methods","mode","state","fetchMeta","data","loading","Math","ceil","areAllSelected","matches","checked","showBulkActions","onSubmit","reset","action","resetField","actions","PRIMARY","handleSubmit","records","r","setValue","currentTarget","parseInt"],"mappings":"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","file":"26.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {styleVariants} from \"../../constants/styles\";\n\nconst Alert = ({style = 'default', children}) => {\n    return (\n        <div className={`acpt-alert acpt-alert-${style}`}>\n            {children}\n        </div>\n    );\n};\n\nAlert.propTypes = {\n    style: PropTypes.oneOf(Object.values(styleVariants)).isRequired\n};\n\nexport default Alert;","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {styleVariants} from \"../../constants/styles\";\nimport {metaTypes} from \"../../constants/metaTypes\";\nimport useTranslation from \"../../hooks/useTranslation\";\nimport Badge from \"../Badge\";\nimport {wpAjaxRequest} from \"../../utils/ajax\";\n\nconst BelongBadge = ({belongsTo, find}) => {\n\n    const [findValue, setFindValue] = useState(find);\n\n    let style = styleVariants.SECONDARY;\n\n    if(belongsTo === metaTypes.TAXONOMY || belongsTo === 'TERM_ID'){\n        style = styleVariants.WARNING;\n    }\n\n    if(belongsTo === metaTypes.OPTION_PAGE){\n        style = styleVariants.INFO;\n    }\n\n    if(belongsTo === \"USER_ID\"){\n        style = styleVariants.DANGER;\n    }\n\n    const fetchFind = () => {\n        wpAjaxRequest(\"fetchFindAction\", {belongsTo :belongsTo, id:find})\n            .then(res => {\n                setFindValue(res);\n            })\n            .catch(err => {\n                console.error(err.message);\n            })\n        ;\n    };\n\n    if(\n        belongsTo === \"POST_ID\" ||\n        belongsTo === \"POST_TAX\" ||\n        belongsTo === \"POST_CAT\" ||\n        belongsTo === \"POST_TEMPLATE\" ||\n        belongsTo === \"TERM_ID\" ||\n        belongsTo === \"USER_ID\"\n    ){\n        fetchFind();\n    }\n\n    if(belongsTo === metaTypes.USER){\n        return <Badge style={styleVariants.DANGER}>{useTranslation(\"User\")}</Badge>\n    }\n\n    return (\n        <Badge style={style}>\n            {findValue}\n        </Badge>\n    );\n};\n\nBelongBadge.propTypes = {\n    belongsTo: PropTypes.string.isRequired,\n    find: PropTypes.string.isRequired\n};\n\nexport default BelongBadge;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport {styleVariants} from \"../../constants/styles\";\n\nconst ButtonLink = ({style = 'default', size = 'default', to, target, children}) => {\n    return (\n        <Link\n            to={to ? to : '#'}\n            target={target}\n            className={`acpt-btn acpt-btn-${style} acpt-btn-${size}`}\n        >\n            {children}\n        </Link>\n    );\n};\n\nButtonLink.propTypes = {\n    style: PropTypes.oneOf(Object.values(styleVariants)).isRequired,\n    size: PropTypes.oneOf([\n        'default',\n        'sm',\n        'xs',\n    ]),\n    to: PropTypes.string.isRequired,\n    target: PropTypes.oneOf([\n        '_blank',\n        '_self',\n        '_parent',\n        '_top',\n    ]),\n};\n\nexport default ButtonLink;","import Modal from \"./index\";\nimport PropTypes from 'prop-types';\nimport React, {useState} from \"react\";\nimport useTranslation from \"../../hooks/useTranslation\";\nimport {styleVariants} from \"../../constants/styles\";\nimport Alert from \"../Alert\";\nimport BelongBadge from \"../BelongBadge\";\nimport {metaTypes} from \"../../constants/metaTypes\";\n\nconst BelongsModal = ({belongs}) => {\n\n    const documentGlobals = document.globals;\n    const globals = documentGlobals.globals;\n\n    // manage local state\n    const [modalOpen, setModalOpen] = useState(false);\n\n    /**\n     *\n     * @param belong\n     * @return {string|*}\n     */\n    const belongsTo = (belong) => {\n\n        if(!belong.belongsTo){\n            return '';\n        }\n\n        let string = '';\n\n        switch (belong.belongsTo) {\n            case metaTypes.CUSTOM_POST_TYPE:\n                string = \"Custom post type\";\n                break;\n\n            case metaTypes.TAXONOMY:\n                string = \"Taxonomy\";\n                break;\n\n            case metaTypes.OPTION_PAGE:\n                string = \"Option page\";\n                break;\n\n            case metaTypes.USER:\n                string = \"All users\";\n                break;\n\n            case \"POST_ID\":\n                string = \"Post\";\n                break;\n\n            case \"POST_TEMPLATE\":\n                string = \"Post template\";\n                break;\n\n            case \"POST_TAX\":\n                string = \"Post taxonomy\";\n                break;\n\n            case \"POST_CAT\":\n                string = \"Post category\";\n                break;\n\n            case \"TERM_ID\":\n                string = \"Term\";\n                break;\n\n            case \"USER_ID\":\n                string = \"User\";\n                break;\n        }\n\n        return useTranslation(string);\n    };\n\n    /**\n     *\n     * @param belong\n     * @return {*}\n     */\n    const operator = (belong) => {\n\n        if(!belong.operator){\n            return '';\n        }\n\n        let string = '';\n\n        switch (belong.operator) {\n            case \"=\":\n                string = \"is equal to\";\n                break;\n\n            case \"!=\":\n                string = \"is not equal to\";\n                break;\n\n            case \"IN\":\n                string = \"is included in\";\n                break;\n\n            case \"NOT_IN\":\n                string = \"is not included in\";\n                break;\n        }\n\n        return useTranslation(string);\n    };\n\n    /**\n     *\n     * @param belong\n     * @return {*}\n     */\n    const find = (belong) => {\n        if(!belong.find || belong.find === ''){\n            return '';\n        }\n\n        const finds = belong.find.split(\",\");\n\n        if(finds.length > 0){\n            return (\n                <div className=\"i-flex-center flex-wrap s-4\">\n                    {finds.map((find) => (\n                        <BelongBadge\n                            belongsTo={belong.belongsTo}\n                            find={find}\n                        />\n                    ))}\n                </div>\n            );\n        }\n\n        return '';\n    };\n\n    return (\n        <React.Fragment>\n            <Modal title={useTranslation(\"Location\")} visible={modalOpen} textAlign=\"left\">\n                {belongs.length > 0 ? (\n                    <div className=\"responsive\">\n                        <table className={`acpt-table spaceless ${globals.is_rtl ? 'rtl' : ''}`}>\n                            <tbody>\n                            {belongs.map((belong, index) => {\n\n                                const isLast = (index === (belongs.length-1));\n\n                                return (\n                                    <tr>\n                                        <td>\n                                            {belongsTo(belong)}\n                                        </td>\n                                        <td>\n                                            {operator(belong)}\n                                        </td>\n                                        <td>\n                                            {find(belong)}\n                                        </td>\n                                        <td>\n                                            {!isLast && belong.logic && useTranslation(belong.logic)}\n                                        </td>\n                                    </tr>\n                                );\n                            })}\n                            </tbody>\n                        </table>\n                    </div>\n                ) : (\n                    <Alert style={styleVariants.SECONDARY}>\n                        {useTranslation(\"No conditions are present.\")}\n                    </Alert>\n                )}\n            </Modal>\n            <a\n                href=\"#\"\n                onClick={e => {\n                    e.preventDefault();\n                    setModalOpen(!modalOpen);\n                }}\n            >\n                {useTranslation(\"Show\")}\n            </a>\n        </React.Fragment>\n    );\n};\n\nBelongsModal.propTypes = {\n    belongs: PropTypes.array.isRequired,\n};\n\nexport default BelongsModal;","import React, {useEffect, useRef, useState} from 'react';\nimport {createPortal} from 'react-dom';\nimport {Icon} from \"@iconify/react\";\nimport PropTypes from 'prop-types';\nimport Button from \"../Button\";\nimport {useOutsideClick} from \"../../hooks/useOutsideClick\";\n\nconst Modal = ( {title, size = 'medium', visible = false, textAlign = \"left\", padding = 24, buttons = [], testId, children}) => {\n\n    // manage local state\n    const didMountRef = useRef(false);\n    const [closed, setClosed] = useState(!visible);\n    const node = useRef();\n\n    useEffect(() => {\n        if (didMountRef.current){\n            setClosed(!closed);\n        } else {\n            didMountRef.current = true;\n        }\n    }, [visible]);\n\n    useOutsideClick(node, () => {\n        setClosed(true);\n    });\n\n    if(closed){\n        return null;\n    }\n\n    return createPortal(\n        <div className=\"acpt-overlay\">\n            <div\n                ref={node}\n                className={`acpt-modal ${size} ${closed ? 'modal-hidden' : 'modal-open'}`}\n                data-cy={testId ? \"modal-\"+testId : null}\n            >\n                <div className=\"acpt-modal-header flex-between\">\n                    <h3>{title}</h3>\n                    <a\n                        className=\"modal-close-icon\"\n                        href=\"#\"\n                        onClick={(e) => {\n                            e.preventDefault();\n                            setClosed(!closed);\n                        }}\n                    >\n                        <Icon icon=\"bx:bx-x\" color=\"#777\" width={24} />\n                    </a>\n                </div>\n                <div className={`acpt-modal-body p-${padding} text-${textAlign}`}>\n                    {children}\n                </div>\n                {buttons.length > 0 && (\n                    <div className=\"acpt-modal-footer\">\n                        <div className=\"i-flex-center s-8\">\n                            {buttons.map((button) => button)}\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>,\n        document.getElementById(\"acpt-admin-app-wrapper\")\n    );\n};\n\nModal.propTypes = {\n    title: PropTypes.string.isRequired,\n    visible: PropTypes.bool,\n    padding: PropTypes.number,\n    testId: PropTypes.string,\n    buttons: PropTypes.arrayOf(Button),\n    textAlign: PropTypes.oneOf([\n        'center',\n        'left',\n        'right',\n    ]),\n    size: PropTypes.oneOf([\n        'small',\n        'medium',\n        'large',\n    ]),\n};\n\nexport default Modal;","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\nconst Pagination = ({currentPage, totalPages, baseLink}) => {\n\n    const rows = [];\n    for (let i = 1; i <= totalPages; i++) {\n        rows.push(i);\n    }\n\n    if(rows.length < 2){\n        return null;\n    }\n\n    return (\n        <ul className=\"acpt-pagination\">\n            {rows.map((row, index) => (\n                <li key={index}>\n                    {row === currentPage\n                        ?\n                        <span>\n                            {row}\n                        </span>\n                        :\n                        <Link to={`${baseLink}/${row}`}>\n                            {row}\n                        </Link>\n                    }\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nPagination.propTypes = {\n    currentPage: PropTypes.number.isRequired,\n    totalPages: PropTypes.number.isRequired,\n    baseLink: PropTypes.string.isRequired,\n};\n\nexport default Pagination;\n\n","export const metaTypes = {\n    CUSTOM_POST_TYPE: \"customPostType\",\n    META: \"meta\",\n    OPTION_PAGE: \"optionPage\",\n    TAXONOMY: \"taxonomy\",\n    USER: \"user\"\n};\n","import React from 'react';\nimport {useFormContext, useWatch} from \"react-hook-form\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport Button from \"../../../components/Button\";\nimport {styleVariants} from \"../../../constants/styles\";\n\nconst BulkActions = () => {\n\n    // manage form state\n    const { control, register } = useFormContext();\n    const watchedElements = useWatch({\n        control,\n        name: \"elements\"\n    });\n\n    /**\n     *\n     * @return {number}\n     */\n    const count = () => {\n\n        let count = 0;\n\n        for (const [key, value] of Object.entries(watchedElements)) {\n            if(value === true){\n                count++;\n            }\n        }\n\n        return count;\n    };\n\n    return (\n        <div className=\"flex-between s-8 mb-24\">\n            <span>\n                {count()} {useTranslation(\"Selected items\")}\n            </span>\n            <div className=\"i-flex-center s-8\">\n                <select\n                    name=\"action\"\n                    className=\"form-control sm\"\n                    {...register(\"action\")}\n                >\n                    <option value=\"\">{useTranslation(\"Select\")}</option>\n                    <option value=\"delete\">{useTranslation(\"Delete\")}</option>\n                </select>\n                <Button\n                    style={styleVariants.WHITE}\n                    size=\"sm\"\n                >\n                    {useTranslation(\"Execute\")}\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default BulkActions;","import React, {memo} from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from \"react-router-dom\";\nimport useTranslation from \"../../hooks/useTranslation\";\nimport DeleteMetaModal from \"./Modal/DeleteMetaModal\";\nimport BelongsModal from \"../../components/Modal/BelongsModal\";\nimport {useFormContext} from \"react-hook-form\";\nimport {fieldGroupsDisplay} from \"../../constants/fields\";\n\nconst MetaListElement = memo(({record, page}) => {\n\n    // manage form state\n    const { register } = useFormContext();\n    const formId = `elements.${record.id}`;\n\n    /**\n     *\n     * @param display\n     * @return {*}\n     */\n    const displayAs = (display) => {\n        switch (display) {\n            default:\n            case fieldGroupsDisplay.STANDARD:\n                return useTranslation(\"Standard view\");\n\n            case fieldGroupsDisplay.ACCORDION:\n                return useTranslation(\"Accordion\");\n\n            case fieldGroupsDisplay.HORIZONTAL_TABS:\n                return useTranslation(\"Horizontal tabs\");\n\n            case fieldGroupsDisplay.VERTICAL_TABS:\n                return useTranslation(\"Vertical tabs\");\n\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <tr>\n                <td style={{\n                    width: \"24px\"\n                }}>\n                    <label className=\"checkbox\" htmlFor={formId}>\n                        <input\n                            type=\"checkbox\"\n                            id={formId}\n                            name={formId}\n                            defaultChecked={false}\n                            {...register(formId)}\n                        />\n                        <span/>\n                    </label>\n                </td>\n                <td>\n                    {record.name}\n                </td>\n                <td>\n                    {record.label}\n                </td>\n                <td>\n                    {displayAs(record.display)}\n                </td>\n                <td>\n                    <BelongsModal belongs={record.belongs} />\n                </td>\n                <td>\n                    {record.fieldsCount}\n                </td>\n                <td>\n                    <div className=\"i-flex-center s-8\">\n                        <Link to={`/edit_meta/${record.id}`}>\n                            {useTranslation(\"Edit\")}\n                        </Link>\n                        <DeleteMetaModal\n                            id={record.id}\n                            page={page}\n                        />\n                    </div>\n                </td>\n            </tr>\n        </React.Fragment>\n    );\n});\n\nMetaListElement.propTypes = {\n    page: PropTypes.number.isRequired,\n    record: PropTypes.object.isRequired\n};\n\nexport default MetaListElement;","import React, {useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport Modal from \"../../../components/Modal\";\nimport useTranslation from \"../../../hooks/useTranslation\";\nimport {styleVariants} from \"../../../constants/styles\";\nimport Button from \"../../../components/Button\";\nimport {useDispatch} from \"react-redux\";\nimport {deleteMeta} from \"../../../redux/reducers/deleteMetaSlice\";\nimport {toast} from \"react-hot-toast\";\nimport {useNavigate} from \"react-router-dom\";\nimport {fetchMeta} from \"../../../redux/reducers/fetchMetaSlice\";\nimport {filterByLabel} from \"../../../utils/objects\";\n\nconst DeleteMetaModal = ({page, id}) => {\n\n    const documentGlobals = document.globals;\n    const settings = documentGlobals.settings;\n\n    // manage global state\n    const dispatch = useDispatch();\n\n    // manage local state\n    const perPage = (settings.length > 0 && filterByLabel(settings, 'key', 'records_per_page') !== '') ? filterByLabel(settings, 'key', 'records_per_page').value : 20;\n    const [modalVisible, setmodalVisible] = useState(false);\n    \n    // manage redirect\n    const navigate = useNavigate();\n\n    const handleDeleteModal = () => {\n        dispatch(deleteMeta(id))\n            .then(res => {\n                const payload = res.payload;\n\n                if(payload.success){\n                    navigate('/meta');\n                    setmodalVisible(!modalVisible);\n                    toast.success(useTranslation(\"Meta group successfully deleted.\"));\n                    dispatch(fetchMeta({\n                        page: page ? page : 1,\n                        perPage: perPage\n                    }));\n                } else {\n                    toast.error(payload.error);\n                }\n            })\n            .catch(err => console.error(err))\n        ;\n    };\n\n    const buttons = [\n        <Button\n            style={styleVariants.DANGER}\n            onClick={() => {\n                handleDeleteModal();\n            }}\n        >\n            {useTranslation(\"Yes, delete it\")}\n        </Button>,\n        <Button\n            style={styleVariants.SECONDARY}\n            onClick={() => {\n                setmodalVisible(!modalVisible);\n            }}\n        >\n            {useTranslation(\"Return back to list\")}\n        </Button>,\n    ];\n\n    return (\n        <React.Fragment>\n            <Modal title={useTranslation('Delete meta group')} buttons={buttons} visible={modalVisible}>\n                <div>\n                    {useTranslation(\"You are going to delete this meta group. Are you sure?\")}\n                </div>\n            </Modal>\n            <a\n                href=\"#\"\n                onClick={e => {\n                    e.preventDefault();\n                    setmodalVisible(!modalVisible);\n                }}\n            >\n                {useTranslation(\"Delete\")}\n            </a>\n        </React.Fragment>\n    );\n};\n\nDeleteMetaModal.propTypes = {\n    page: PropTypes.number.isRequired,\n    id: PropTypes.string.isRequired,\n};\n\nexport default DeleteMetaModal;\n\n","import React, {useEffect, useRef} from 'react';\nimport Layout from \"../../layout/Layout\";\nimport useTranslation from \"../../hooks/useTranslation\";\nimport {changeCurrentAdminMenuLink, metaTitle, refreshPage} from \"../../utils/misc\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {fetchMeta} from \"../../redux/reducers/fetchMetaSlice\";\nimport {Link, useParams} from \"react-router-dom\";\nimport {filterByLabel} from \"../../utils/objects\";\nimport Loader from \"../../components/Loader\";\nimport ButtonLink from \"../../components/ButtonLink\";\nimport {styleVariants} from \"../../constants/styles\";\nimport Alert from \"../../components/Alert\";\nimport MetaListElement from \"./MetaListElement\";\nimport Pagination from \"../../components/Pagination\";\nimport {FormProvider, useForm, useWatch} from \"react-hook-form\";\nimport {metaTypes} from \"../../constants/metaTypes\";\nimport {wpAjaxRequest} from \"../../utils/ajax\";\nimport {toast} from \"react-hot-toast\";\nimport BulkActions from \"./BulkActions\";\nimport {useAutoAnimate} from \"@formkit/auto-animate/react\";\nimport {scrollToTop} from \"../../utils/scroll\";\n\nconst MetaList = () => {\n\n    const documentGlobals = document.globals;\n    const settings = documentGlobals.settings;\n    const globals = documentGlobals.globals;\n\n    // auto-animate\n    const [parent] = useAutoAnimate();\n\n    // ref\n    const ref = useRef();\n\n    // form init\n    const methods = useForm({\n        mode: 'all'\n    });\n\n    const watchedElements = useWatch({\n        control: methods.control,\n        name: \"elements\"\n    });\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {data, loading} = useSelector(state => state.fetchMeta);\n\n    // manage local state\n    const {page} = useParams();\n    const perPage = (settings.length > 0 && filterByLabel(settings, 'key', 'records_per_page') !== '') ? filterByLabel(settings, 'key', 'records_per_page').value : 20;\n    const totalPages = Math.ceil( data.count / perPage );\n\n    useEffect(() => {\n        metaTitle(useTranslation(\"Field groups\"));\n        changeCurrentAdminMenuLink('#/meta');\n        dispatch(fetchMeta({\n            page: page ? page : 1,\n            perPage: perPage\n        }));\n\n    }, [page]);\n\n    useEffect(() => {\n\n        /**\n         *\n         * @return {boolean}\n         */\n        const areAllSelected = () => {\n\n            if(!watchedElements){\n                return false;\n            }\n\n            let matches = 0;\n            for (const [key, value] of Object.entries(watchedElements)) {\n                if(value === true){\n                    matches++;\n                }\n            }\n\n            return matches === Object.entries(watchedElements).length;\n        };\n\n        if(areAllSelected()){\n            ref.current.checked = true;\n        } else {\n            if(ref.current){\n                ref.current.checked = false;\n            }\n        }\n\n    }, [watchedElements]);\n\n    /**\n     *\n     * @return {boolean}\n     */\n    const showBulkActions = () => {\n\n        if(!watchedElements){\n            return false;\n        }\n\n        for (const [key, value] of Object.entries(watchedElements)) {\n            if(value === true){\n                return true;\n            }\n        }\n\n        return false;\n    };\n\n    const onSubmit = (data) => {\n        methods.reset();\n        data.belongsTo = metaTypes.META;\n        wpAjaxRequest('bulkActionsAction', data)\n            .then(res => {\n                if(res.success === true){\n\n                    // flush message\n                    switch (data.action) {\n                        case \"delete\":\n                            toast.success(useTranslation(\"Meta group successfully deleted.\"));\n                            methods.resetField(\"elements\");\n                            scrollToTop();\n\n                            // refresh items\n                            dispatch(fetchMeta({\n                                page: page ? page : 1,\n                                perPage: perPage\n                            }));\n\n                            break;\n                    }\n                } else {\n                    toast.error(res.error);\n                }\n            })\n            .catch(err => {\n                console.error(err);\n                toast.error(useTranslation(\"Unknown error, please retry later\"));\n            })\n        ;\n    };\n\n    const actions = [\n        <ButtonLink style={styleVariants.PRIMARY} to=\"/register_meta\">\n            {useTranslation(\"Create new Meta group\")}\n        </ButtonLink>,\n    ];\n\n    if(loading){\n        return (\n            <Loader/>\n        );\n    }\n\n    return (\n        <FormProvider {...methods}>\n            <form onSubmit={methods.handleSubmit(onSubmit)}>\n                <Layout\n                    title={useTranslation(\"Field groups\")}\n                    actions={actions}\n                    crumbs={[\n                        {\n                            label: useTranslation(\"Field groups\")\n                        }\n                    ]}\n                >\n                    <div ref={parent}>\n                        {showBulkActions() && (\n                            <BulkActions />\n                        )}\n                    </div>\n                    {data.records && data.records.length > 0 ? (\n                        <div className=\"responsive\">\n                            <table className={`acpt-table with-shadow ${globals.is_rtl ? 'rtl' : ''}`}>\n                                <thead>\n                                    <tr>\n                                        <th style={{\n                                            width: \"24px\"\n                                        }}>\n                                            <label className=\"checkbox\" htmlFor=\"all\">\n                                                <input\n                                                    ref={ref}\n                                                    type=\"checkbox\"\n                                                    id=\"all\"\n                                                    defaultChecked={false}\n                                                    onClick={e => {\n                                                        data.records.map((r) => {\n                                                            methods.setValue(`elements.${r.id}`, e.currentTarget.checked);\n                                                        });\n                                                    }}\n                                                />\n                                                <span/>\n                                            </label>\n                                        </th>\n                                        <th>\n                                            {useTranslation(\"Group name\")}\n                                        </th>\n                                        <th>\n                                            {useTranslation(\"Group label\")}\n                                        </th>\n                                        <th>\n                                            {useTranslation(\"Display as\")}\n                                        </th>\n                                        <th>\n                                            {useTranslation(\"Location\")}\n                                        </th>\n                                        <th>\n                                            {useTranslation(\"Fields count\")}\n                                        </th>\n                                        <th>\n                                            {useTranslation(\"Actions\")}\n                                        </th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {data.records && data.records.map((record) => (\n                                        <MetaListElement\n                                            page={page}\n                                            record={record}\n                                            key={record.id}\n                                        />\n                                    ))}\n                                </tbody>\n                                {totalPages > 1 && (\n                                    <tfoot>\n                                    <tr>\n                                        <td colSpan={7}>\n                                            <Pagination\n                                                currentPage={page ? parseInt(page) : 1}\n                                                totalPages={totalPages}\n                                                baseLink=\"/meta\"\n                                            />\n                                        </td>\n                                    </tr>\n                                    </tfoot>\n                                )}\n                            </table>\n                        </div>\n                    ) : (\n                        <Alert style={styleVariants.SECONDARY}>\n                            {useTranslation(\"No meta group found.\")} <Link to=\"/register_meta\">{useTranslation(\"Register the first one\")}</Link>!\n                        </Alert>\n                    )}\n                </Layout>\n            </form>\n        </FormProvider>\n    );\n};\n\nMetaList.propTypes = {};\n\nexport default MetaList;"],"sourceRoot":""}