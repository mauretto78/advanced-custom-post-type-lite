{"version":3,"sources":["webpack://advanced-custom-post-type-lite/./assets/src/App/components/Alert/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/ButtonLink/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/ElementTypeBadge/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/Tooltip/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/AssocCustomPostTypeToTaxonomy/AssocCustomPostTypeToTaxonomyElement.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/AssocCustomPostTypeToTaxonomy/index.js","webpack://advanced-custom-post-type-lite/./node_modules/prop-types/factoryWithThrowingShims.js","webpack://advanced-custom-post-type-lite/./node_modules/prop-types/index.js","webpack://advanced-custom-post-type-lite/./node_modules/prop-types/lib/ReactPropTypesSecret.js"],"names":["Alert","style","children","propTypes","PropTypes","oneOf","Object","values","styleVariants","isRequired","ButtonLink","size","to","target","string","ElementTypeBadge","element","variant","label","id","DANGER","length","parentId","SECONDARY","WARNING","isNative","isWooCommerce","INFO","object","Tooltip","tip","icon","backgroundColor","color","bool","AssocCustomPostTypeToTaxonomyElement","record","taxonomy","defaultChecked","dispatch","handleOnChange","postTypes","then","payload","res","success","toast","error","catch","console","err","name","singular","plural","checked","e","AssocCustomPostTypeToTaxonomy","documentGlobals","document","globals","settings","state","fetchTaxonomies","fetchedTaxonomies","data","loadingTaxonomies","loading","fetchCustomPostTypes","fetchedPosts","loadingPosts","actions","PRIMARY","link","records","is_rtl","map","customPostTypes"],"mappings":"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","file":"971.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {styleVariants} from \"../../constants/styles\";\n\nconst Alert = ({style = 'default', children}) => {\n    return (\n        <div className={`acpt-alert acpt-alert-${style}`}>\n            {children}\n        </div>\n    );\n};\n\nAlert.propTypes = {\n    style: PropTypes.oneOf(Object.values(styleVariants)).isRequired\n};\n\nexport default Alert;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport {styleVariants} from \"../../constants/styles\";\n\nconst ButtonLink = ({style = 'default', size = 'default', to, target, children}) => {\n    return (\n        <Link\n            to={to ? to : '#'}\n            target={target}\n            className={`acpt-btn acpt-btn-${style} acpt-btn-${size}`}\n        >\n            {children}\n        </Link>\n    );\n};\n\nButtonLink.propTypes = {\n    style: PropTypes.oneOf(Object.values(styleVariants)).isRequired,\n    size: PropTypes.oneOf([\n        'default',\n        'sm',\n        'xs',\n    ]),\n    to: PropTypes.string.isRequired,\n    target: PropTypes.oneOf([\n        '_blank',\n        '_self',\n        '_parent',\n        '_top',\n    ]),\n};\n\nexport default ButtonLink;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Badge from \"../Badge\";\nimport {styleVariants} from \"../../constants/styles\";\nimport useTranslation from \"../../hooks/useTranslation\";\n\nconst ElementTypeBadge = ({element}) => {\n\n    let variant;\n    let label;\n\n    if(element.id === 'user_meta') {\n        variant = styleVariants.DANGER;\n        label = useTranslation(\"User\");\n    } else if(element.children){\n        variant = (element.children.length > 0 || element.parentId === null) ? styleVariants.SECONDARY : styleVariants.WARNING;\n        label = useTranslation((element.children.length > 0 || element.parentId === null) ? \"Parent\" : \"Child\");\n    } else if(element.isNative){\n        variant = styleVariants.SECONDARY;\n        label = useTranslation(\"Native\");\n    } else if(element.isWooCommerce){\n        variant = styleVariants.INFO;\n        label = \"WooCommerce\";\n    } else {\n        variant = styleVariants.WARNING;\n        label = useTranslation('Custom');\n    }\n\n    return (\n        <Badge style={variant}>\n            {label}\n        </Badge>\n    );\n};\n\nElementTypeBadge.propTypes = {\n    element: PropTypes.object.isRequired\n};\n\nexport default ElementTypeBadge;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Icon} from \"@iconify/react\";\nimport {Tooltip as ReactTooltip} from 'react-tooltip';\nimport 'react-tooltip/dist/react-tooltip.css'\nimport {randomAlphabeticString} from \"../../utils/strings\";\n\nconst Tooltip = ({label, tip, icon = true}) => {\n\n    const id = \"tooltip_\" + randomAlphabeticString();\n\n    return (\n        <span className=\"acpt-tooltip\">\n            <span\n                className=\"i-flex-center s-8 cursor-help\"\n                data-tooltip-id={id}\n                data-tooltip-content={tip}\n                data-tooltip-place=\"top\"\n            >\n                <div className=\"acpt-tooltip-label\">\n                    {label}\n                </div>\n                {icon && (\n                    <div className=\"acpt-tooltip-help top-2\">\n                        <Icon icon=\"bx:help-circle\" color=\"#007CBA\" width=\"18px\" />\n                    </div>\n                )}\n            </span>\n            <ReactTooltip\n                id={id}\n                style={{\n                    backgroundColor: \"#777\",\n                    color: \"#fff\",\n                }}\n            />\n        </span>\n    );\n};\n\nTooltip.propTypes = {\n    label: PropTypes.string.isRequired,\n    tip: PropTypes.element.isRequired,\n    icon: PropTypes.bool,\n};\n\nexport default Tooltip;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ElementTypeBadge from \"../../components/ElementTypeBadge\";\nimport {useDispatch} from \"react-redux\";\nimport {assocPostTypeToTaxonomy} from \"../../redux/reducers/assocPostTypeToTaxonomySlice\";\nimport {toast} from \"react-hot-toast\";\nimport useTranslation from \"../../hooks/useTranslation\";\n\nconst AssocCustomPostTypeToTaxonomyElement = ({record, taxonomy, defaultChecked}) => {\n\n    // manage global state\n    const dispatch = useDispatch();\n\n    const handleOnChange = (element) => {\n        dispatch(assocPostTypeToTaxonomy({taxonomy: taxonomy, postTypes:[element]}))\n            .then(res => {\n\n                const payload = res.payload;\n\n                if(payload.success){\n                    toast.success(useTranslation(\"Taxonomy was associated to selected Custom post types\"));\n                }\n\n                if(payload.error){\n                    toast.error(error);\n                }\n            })\n            .catch(err => console.error(err))\n        ;\n    };\n\n    return (\n        <tr>\n            <td>\n                {record.name}\n            </td>\n            <td>\n                <ElementTypeBadge element={record}/>\n            </td>\n            <td>\n                {record.singular}\n            </td>\n            <td>\n                {record.plural}\n            </td>\n            <td>\n                <label\n                    data-cy={`assoc-${record.name}-to-${taxonomy}`}\n                    className=\"checkbox\"\n                    htmlFor={record.id}\n                >\n                    <input\n                        id={record.id}\n                        type=\"checkbox\"\n                        defaultChecked={defaultChecked}\n                        onChange={e => handleOnChange({\n                            id: record.id,\n                            checked: e.target.checked\n                        })}\n                    />\n                    <span/>\n                </label>\n            </td>\n        </tr>\n    );\n};\n\nAssocCustomPostTypeToTaxonomyElement.propTypes = {\n    taxonomy: PropTypes.string.isRequired,\n    record: PropTypes.object.isRequired,\n    defaultChecked: PropTypes.bool.isRequired,\n};\n\nexport default AssocCustomPostTypeToTaxonomyElement;","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Link, useParams} from \"react-router-dom\";\nimport Loader from \"../../components/Loader\";\nimport {metaTitle} from \"../../utils/misc\";\nimport useTranslation from \"../../hooks/useTranslation\";\nimport {fetchTaxonomies} from \"../../redux/reducers/fetchTaxonomiesSlice\";\nimport {fetchCustomPostTypes} from \"../../redux/reducers/fetchCustomPostTypesSlice\";\nimport Layout from \"../../layout/Layout\";\nimport Alert from \"../../components/Alert\";\nimport {styleVariants} from \"../../constants/styles\";\nimport {filterById, isEmpty} from \"../../utils/objects\";\nimport AssocCustomPostTypeToTaxonomyElement from \"./AssocCustomPostTypeToTaxonomyElement\";\nimport Tooltip from \"../../components/Tooltip\";\nimport ButtonLink from \"../../components/ButtonLink\";\nimport Button from \"../../components/Button\";\n\nconst AssocCustomPostTypeToTaxonomy = () => {\n\n    const documentGlobals = document.globals;\n    const settings = documentGlobals.settings;\n    const globals = documentGlobals.globals;\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {data: fetchedTaxonomies, loading: loadingTaxonomies} = useSelector(state => state.fetchTaxonomies);\n    const {data: fetchedPosts, loading: loadingPosts} = useSelector(state => state.fetchCustomPostTypes);\n\n    // manage local state\n    const {taxonomy} = useParams();\n\n    useEffect(() => {\n        metaTitle(useTranslation(`${useTranslation(\"Associate custom post types to\")} ${taxonomy}`));\n        dispatch(fetchTaxonomies({\n            taxonomy: taxonomy\n        }));\n        dispatch(fetchCustomPostTypes());\n    }, []);\n\n    if(loadingTaxonomies && loadingPosts){\n        return <Loader/>;\n    }\n\n    const actions = [\n        <ButtonLink style={styleVariants.PRIMARY} to=\"/register_taxonomy\">\n            {useTranslation(\"Register new Taxonomy\")}\n        </ButtonLink>,\n    ];\n\n    return (\n        <Layout\n            title={useTranslation(`${useTranslation(\"Associate custom post types to\")} ${taxonomy}`)}\n            actions={actions}\n            crumbs={[\n                {\n                    label: useTranslation(\"Registered Taxonomies\"),\n                    link: \"/taxonomies\"\n                },\n                {\n                    label: taxonomy,\n                    link: `/view_taxonomy/${taxonomy}`\n                },\n                {\n                    label: `${useTranslation(\"Associate custom post types to\")} ${taxonomy}`\n                }\n            ]}\n        >\n            {fetchedTaxonomies.length  > 0 && fetchedPosts.records && fetchedPosts.records.length > 0 ? (\n                <div className=\"responsive\">\n                    <table className={`acpt-table with-shadow ${globals.is_rtl ? 'rtl' : ''}`}>\n                        <thead>\n                            <tr>\n                                <th>\n                                    {useTranslation(\"Name\")}\n                                </th>\n                                <th>\n                                    {useTranslation(\"Type\")}\n                                </th>\n                                <th>\n                                    <Tooltip\n                                        tip={useTranslation(\"Singular label. Used when a singular label is needed\")}\n                                        label={useTranslation(\"Singular\")}\n                                    />\n                                </th>\n                                <th>\n                                    <Tooltip\n                                        tip={useTranslation(\"Plural label. Used for the taxonomy admin menu item\")}\n                                        label={useTranslation(\"Plural\")}\n                                    />\n                                </th>\n                                <th>\n                                    {useTranslation(\"Associate\")}\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        {fetchedPosts.records && fetchedPosts.records.map((record) => (\n                            <AssocCustomPostTypeToTaxonomyElement\n                                record={record}\n                                key={record.id}\n                                taxonomy={taxonomy}\n                                defaultChecked={!isEmpty(filterById(fetchedTaxonomies[0].customPostTypes, record.id))}\n                            />\n                        ))}\n                        </tbody>\n                    </table>\n                </div>\n            ) : (\n                <Alert style={styleVariants.SECONDARY}>\n                    {useTranslation(\"No custom post type found.\")} <Link to=\"/register\">{useTranslation(\"Register the first one\")}</Link>!\n                </Alert>\n            )}\n        </Layout>\n    );\n};\n\nexport default AssocCustomPostTypeToTaxonomy;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"sourceRoot":""}