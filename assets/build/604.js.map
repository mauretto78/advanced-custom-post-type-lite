{"version":3,"sources":["webpack://advanced-custom-post-type-lite/./assets/src/App/components/pages/CustomPostTypeMeta/index.js"],"names":["CustomPostTypeMeta","postType","dispatch","state","metaStateReducer","boxes","fields","values","isSaved","isValid","saveLoading","loading","saveErrors","errors","success","fetchMetaReducer","fetched","didMountRef","Prompt","setDirty","setPristine","modalVisible","setModalVisible","metaTypes","CUSTOM_POST_TYPE","onSortEnd","oldIndex","newIndex","handleSubmit","handleDeleteAll","current","toast","length","map","error","renderDeleteButton","e","preventDefault","buttons","label","link"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC","file":"604.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport {useParams} from \"react-router-dom\";\nimport {arrayMove} from 'react-sortable-hoc';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {createBox, setBoxes, setStatusSaved} from \"../../../redux/actions/metaStateActions\";\nimport useUnsavedChangesWarning from \"../../../hooks/useUnsavedChangesWarning\";\nimport {metaTitle} from \"../../../utils/misc\";\nimport {fetchMeta} from \"../../../redux/thunks/fetchMeta\";\nimport Spinner from \"../../reusable/Loader/Spinner\";\nimport Breadcrumbs from \"../../reusable/Layout/Breadcrumbs\";\nimport {metaSubmit} from \"../../../redux/thunks/metaSubmit\";\nimport {toast} from \"react-toastify\";\nimport {deleteAllMeta} from \"../../../redux/thunks/deleteAllMeta\";\nimport Layout from \"../../reusable/Layout\";\nimport ActionsBar from \"../../reusable/Layout/ActionsBar\";\nimport {metaTypes} from \"../../../constants/metaTypes\";\nimport Meta from \"../../reusable/Meta\";\nimport Modal from \"../../reusable/Modal\";\n\nconst CustomPostTypeMeta = () => {\n\n    // manage global state\n    const { postType } = useParams();\n    const dispatch = useDispatch();\n    const {boxes, fields, values, isSaved, isValid, loading: saveLoading, errors: saveErrors, success} = useSelector(state => state.metaStateReducer);\n    const {loading, fetched} = useSelector(state => state.fetchMetaReducer);\n\n    // manage local state\n    const didMountRef = useRef(false);\n    const [Prompt, setDirty, setPristine] = useUnsavedChangesWarning();\n    const [modalVisible, setModalVisible] = useState(false);\n\n    // set page meta title\n    useEffect(() => {\n        metaTitle(`ACPT - meta${isSaved ? '' : '*'}`);\n        if(!isSaved){ setDirty(); }\n    }, [isSaved]);\n\n    // fetching data and\n    // populate the UI\n    useEffect(() => {\n        dispatch(fetchMeta(metaTypes.CUSTOM_POST_TYPE, postType));\n    }, [saveLoading]);\n\n    // sortable\n    const onSortEnd = ({oldIndex, newIndex}) => {\n        dispatch(setBoxes(arrayMove(boxes, oldIndex, newIndex)));\n    };\n\n    // handle data submit\n    const handleSubmit = () => {\n        dispatch(metaSubmit(values));\n        dispatch(setStatusSaved());\n        setPristine();\n    };\n\n    const handleDeleteAll = () => {\n        dispatch(deleteAllMeta(metaTypes.CUSTOM_POST_TYPE, postType));\n        dispatch(setStatusSaved());\n        setPristine();\n    };\n\n    // handle form submission outcome\n    useEffect(() => {\n        if (didMountRef.current){\n            if(!saveLoading){\n                if(success){\n                    setPristine();\n                    toast.success(\"Custom post type meta successfully saved\");\n                }\n\n                if(saveErrors.length > 0){\n                    saveErrors.map((error) => {\n                        toast.error(error);\n                    });\n                }\n            }\n        } else {\n            didMountRef.current = true;\n        }\n    }, [saveLoading]);\n\n    if(loading){\n        return <Spinner />;\n    }\n\n    const renderDeleteButton = (\n        <React.Fragment>\n            <Modal title={`Confirm deleting all`} visible={modalVisible}>\n                <p>Are you sure?</p>\n                <p>\n                    <a\n                        href=\"#\"\n                        className=\"acpt-btn acpt-btn-primary\"\n                        onClick={(e) => {\n                            e.preventDefault();\n                            handleDeleteAll();\n                        }}\n                    >\n                        Yes\n                    </a>\n                    &nbsp;\n                    <a\n                        href=\"#\"\n                        className=\"acpt-btn acpt-btn-primary-o\"\n                        onClick={(e) => {\n                            e.preventDefault();\n                            setModalVisible(!modalVisible);\n                        }}\n                    >\n                        No\n                    </a>\n                </p>\n            </Modal>\n            <button\n                onClick={(e) => {\n                    e.preventDefault();\n                    setModalVisible(true);\n                }}\n                type=\"submit\"\n                className=\"acpt-btn acpt-btn-danger\"\n            >\n                Delete all\n            </button>\n        </React.Fragment>\n    );\n\n    const buttons =\n        <React.Fragment>\n            <a\n                href=\"#\"\n                onClick={ (e) => {\n                    e.preventDefault();\n                    dispatch(createBox(metaTypes.CUSTOM_POST_TYPE, postType));\n                } }\n                className=\"acpt-btn acpt-btn-primary-o\"\n            >\n                Add meta box\n            </a>\n            {boxes.length > 0\n                ? (\n                    <React.Fragment>\n                        <button\n                            disabled={!isValid}\n                            onClick={(e) => {\n                                e.preventDefault();\n                                handleSubmit();\n                            }}\n                            type=\"submit\"\n                            className=\"acpt-btn acpt-btn-primary\"\n                        >\n                            Save\n                        </button>\n                        {renderDeleteButton}\n                    </React.Fragment>\n                ) : (\n                    <React.Fragment>\n                        {fetched.length > 0 && renderDeleteButton}\n                    </React.Fragment>\n                )}\n        </React.Fragment>\n    ;\n\n    return(\n        <Layout>\n            <ActionsBar\n                title={`${postType} meta boxes`}\n                actions={buttons}\n            />\n            <main>\n                <Breadcrumbs crumbs={[\n                    {\n                        label: \"Registered Custom Post Types\",\n                        link: \"/\"\n                    },\n                    {\n                        label: `${postType} meta boxes`\n                    }\n                ]} />\n                {Prompt}\n                <Meta\n                    belongsTo={metaTypes.CUSTOM_POST_TYPE}\n                    find={postType}\n                    boxes={boxes}\n                    fields={fields}\n                    onSortEnd={onSortEnd}\n                    values={values}\n                />\n            </main>\n        </Layout>\n    )\n};\n\nexport default CustomPostTypeMeta;\n\n\n// import React, {useEffect, useRef} from 'react';\n// import {useHistory, useParams} from \"react-router-dom\";\n// import {arrayMove} from 'react-sortable-hoc';\n// import {SortableList} from \"../../reusable/Sortable\";\n// import {useDispatch, useSelector} from \"react-redux\";\n// import {createBox, setBoxes, setStatusSaved} from \"../../../redux/actions/metaStateActions\";\n// import useUnsavedChangesWarning from \"../../../hooks/useUnsavedChangesWarning\";\n// import {metaTitle} from \"../../../utils/misc\";\n// import {fetchMeta} from \"../../../redux/thunks/fetchMeta\";\n// import Spinner from \"../../reusable/Loader/Spinner\";\n// import Breadcrumbs from \"../../reusable/Breadcrumbs\";\n// import {metaSubmit} from \"../../../redux/thunks/metaSubmit\";\n// import {toast} from \"react-toastify\";\n// import {deleteAllMeta} from \"../../../redux/thunks/deleteAllMeta\";\n// import {Icon} from \"@iconify/react\";\n// import {scrollToTargetId} from \"../../../utils/scroll\";\n//\n// const CustomPostTypeList = () => {\n//\n//     // manage global state\n//     const { postType } = useParams();\n//     const dispatch = useDispatch();\n//     const {boxes, values, isSaved, isValid, loading: saveLoading, errors: saveErrors, success} = useSelector(state => state.metaStateReducer);\n//     const {loading, fetched} = useSelector(state => state.fetchMetaReducer);\n//\n//     // manage local state\n//     const didMountRef = useRef(false);\n//     const [Prompt, setDirty, setPristine] = useUnsavedChangesWarning();\n//\n//     // manage redirect\n//     const history = useHistory();\n//\n//     // set page meta title\n//     useEffect(() => {\n//         metaTitle(`ACPT - meta${isSaved ? '' : '*'}`);\n//         if(!isSaved){ setDirty(); }\n//     }, [isSaved]);\n//\n//     // fetching data and\n//     // populate the UI\n//     useEffect(() => {\n//         dispatch(fetchMeta(postType));\n//     }, [saveLoading]);\n//\n//     // sortable\n//     const onSortEnd = ({oldIndex, newIndex}) => {\n//         dispatch(setBoxes(arrayMove(boxes, oldIndex, newIndex)));\n//     };\n//\n//     // handle data submit\n//     const handleSubmit = () => {\n//         dispatch(metaSubmit(values));\n//         dispatch(setStatusSaved());\n//         setPristine();\n//     };\n//\n//     const handleDeleteAll = () => {\n//         dispatch(deleteAllMeta(postType));\n//         dispatch(setStatusSaved());\n//         setPristine();\n//     };\n//\n//     // handle form submission outcome\n//     useEffect(() => {\n//         if (didMountRef.current){\n//             if(!saveLoading){\n//                 if(success){\n//                     setPristine();\n//                     toast.success(\"Custom post type meta successfully saved\");\n//                 }\n//\n//                 if(saveErrors.length > 0){\n//                     saveErrors.map((error) => {\n//                         toast.error(error);\n//                     });\n//                 }\n//             }\n//         } else {\n//             didMountRef.current = true;\n//         }\n//     }, [saveLoading]);\n//\n//     if(loading){\n//         return <Spinner />;\n//     }\n//\n//     return(\n//         <div>\n//             <Breadcrumbs crumbs={[\n//                 {\n//                     label: \"Registered Custom Post Types\",\n//                     link: \"/\"\n//                 },\n//                 {\n//                     label: `${postType} meta boxes`\n//                 }\n//             ]} />\n//             {Prompt}\n//             <h1 className=\"acpt-title vertical-center\">\n//                 <Icon icon=\"bx:bx-inbox\" color=\"#02c39a\" width=\"18px\"/>\n//                 &nbsp;\n//                 {postType} meta boxes\n//             </h1>\n//             <div className=\"acpt-buttons\">\n//                 <a\n//                     href=\"#\"\n//                     onClick={ (e) => {\n//                         e.preventDefault();\n//                         dispatch(createBox(postType));\n//                         scrollToTargetId(\"buttons\");\n//                     } }\n//                     className=\"acpt-btn acpt-btn-primary-o\"\n//                 >\n//                     <Icon icon=\"bx:bx-plus-circle\" width=\"18px\"/>\n//                     &nbsp;\n//                     Add meta box\n//                 </a>\n//             </div>\n//             {boxes.length > 0\n//                 ? (\n//                     <React.Fragment>\n//                         <SortableList\n//                             items={boxes}\n//                             onSortEnd={onSortEnd}\n//                             useDragHandle\n//                             lockAxis=\"y\"\n//                             helperClass=\"dragging-helper-class\"\n//                             disableAutoscroll={false}\n//                             useWindowAsScrollContainer={true}\n//                         />\n//                         <div className=\"acpt-buttons\">\n//                             <a\n//                                 href=\"#\"\n//                                 onClick={ (e) => {\n//                                     e.preventDefault();\n//                                     dispatch(createBox(postType));\n//                                     scrollToTargetId(\"buttons\");\n//                                 } }\n//                                 className=\"acpt-btn acpt-btn-primary-o\"\n//                             >\n//                                 <Icon icon=\"bx:bx-plus-circle\" width=\"18px\"/>\n//                                 &nbsp;\n//                                 Add meta box\n//                             </a>\n//                         </div>\n//                         <div className=\"acpt-card__footer\">\n//                             <div className=\"acpt-card__inner\">\n//                                 <button\n//                                     disabled={!isValid}\n//                                     onClick={(e) => {\n//                                         e.preventDefault();\n//                                         handleSubmit();\n//                                     }}\n//                                     type=\"submit\"\n//                                     className=\"acpt-btn acpt-btn-primary submit\"\n//                                 >\n//                                     <Icon icon=\"bx:bx-save\" width=\"18px\"/>\n//                                     &nbsp;\n//                                     Save\n//                                 </button>\n//                                 &nbsp;\n//                                 <button\n//                                     onClick={(e) => {\n//                                         e.preventDefault();\n//                                         handleDeleteAll();\n//                                     }}\n//                                     type=\"submit\"\n//                                     className=\"acpt-btn acpt-btn-danger submit\"\n//                                 >\n//                                     <Icon icon=\"bx:bx-trash\" width=\"18px\"/>\n//                                     &nbsp;\n//                                     Delete all\n//                                 </button>\n//                             </div>\n//                         </div>\n//                     </React.Fragment>\n//                 )\n//                 : (\n//                     <React.Fragment>\n//                         <div className=\"\">\n//                             No meta box already created. Create the first one now by clicking the button \"Add meta box\"!\n//                         </div>\n//                         {fetched.length > 0 && (\n//                             <button\n//                                 onClick={(e) => {\n//                                     e.preventDefault();\n//                                     handleDeleteAll();\n//                                 }}\n//                                 type=\"submit\"\n//                                 className=\"acpt-btn acpt-btn-danger submit\"\n//                             >\n//                                 <Icon icon=\"bx:bx-trash\" width=\"18px\"/>\n//                                 &nbsp;\n//                                 Delete all\n//                             </button>\n//                         )}\n//                     </React.Fragment>\n//                 )\n//             }\n//         </div>\n//     )\n// };\n//\n// export default CustomPostTypeList;"],"sourceRoot":""}