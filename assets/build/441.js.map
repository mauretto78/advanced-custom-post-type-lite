{"version":3,"sources":["webpack://advanced-custom-post-type-lite/./assets/src/App/components/pages/UserMeta/index.js"],"names":["UserMeta","dispatch","state","metaStateReducer","boxes","fields","values","isSaved","isValid","saveLoading","loading","saveErrors","errors","success","fetchMetaReducer","fetched","didMountRef","Prompt","setDirty","setPristine","modalVisible","setModalVisible","metaTypes","USER","onSortEnd","oldIndex","newIndex","handleSubmit","handleDeleteAll","setUserMetaStatusSaved","current","toast","length","map","error","renderDeleteButton","e","preventDefault","buttons","label","link"],"mappings":"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":"441.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport Breadcrumbs from \"../../reusable/Layout/Breadcrumbs\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport useUnsavedChangesWarning from \"../../../hooks/useUnsavedChangesWarning\";\nimport {changeCurrentAdminMenuLink, metaTitle} from \"../../../utils/misc\";\nimport {arrayMove} from \"react-sortable-hoc\";\nimport {toast} from \"react-toastify\";\nimport Spinner from \"../../reusable/Loader/Spinner\";\nimport {Icon} from \"@iconify/react\";\nimport Layout from \"../../reusable/Layout\";\nimport ActionsBar from \"../../reusable/Layout/ActionsBar\";\nimport {fetchMeta} from \"../../../redux/thunks/fetchMeta\";\nimport {metaTypes} from \"../../../constants/metaTypes\";\nimport {metaSubmit} from \"../../../redux/thunks/metaSubmit\";\nimport {deleteAllMeta} from \"../../../redux/thunks/deleteAllMeta\";\nimport {createBox, setBoxes, setStatusSaved} from \"../../../redux/actions/metaStateActions\";\nimport Meta from \"../../reusable/Meta\";\nimport Modal from \"../../reusable/Modal\";\n\nconst UserMeta = () => {\n\n    // manage global state\n    const dispatch = useDispatch();\n    const {boxes, fields, values, isSaved, isValid, loading: saveLoading, errors: saveErrors, success} = useSelector(state => state.metaStateReducer);\n    const {loading, fetched} = useSelector(state => state.fetchMetaReducer);\n\n    // manage local state\n    const didMountRef = useRef(false);\n    const [Prompt, setDirty, setPristine] = useUnsavedChangesWarning();\n    const [modalVisible, setModalVisible] = useState(false);\n\n    // set page meta title\n    useEffect(() => {\n        metaTitle(`ACPT - User meta${isSaved ? '' : '*'}`);\n        changeCurrentAdminMenuLink('#/user-meta');\n        if(!isSaved){ setDirty(); }\n    }, [isSaved]);\n\n    // fetching data and\n    // populate the UI\n    useEffect(() => {\n        dispatch(fetchMeta(metaTypes.USER));\n    }, [saveLoading]);\n\n    // sortable\n    const onSortEnd = ({oldIndex, newIndex}) => {\n        dispatch(setBoxes(arrayMove(boxes, oldIndex, newIndex)));\n    };\n\n    // handle data submit\n    const handleSubmit = () => {\n        dispatch(metaSubmit(values));\n        dispatch(setStatusSaved());\n        setPristine();\n    };\n\n    const handleDeleteAll = () => {\n        dispatch(deleteAllMeta(metaTypes.USER));\n        dispatch(setUserMetaStatusSaved());\n        setPristine();\n    };\n\n    // handle form submission outcome\n    useEffect(() => {\n        if (didMountRef.current){\n            if(!saveLoading){\n                if(success){\n                    setPristine();\n                    toast.success(\"User meta successfully saved\");\n                }\n\n                if(saveErrors.length > 0){\n                    saveErrors.map((error) => {\n                        toast.error(error);\n                    });\n                }\n            }\n        } else {\n            didMountRef.current = true;\n        }\n    }, [saveLoading]);\n\n    if(loading){\n        return <Spinner />;\n    }\n\n    const renderDeleteButton = (\n        <React.Fragment>\n            <Modal title={`Confirm deleting all`} visible={modalVisible}>\n                <p>Are you sure?</p>\n                <p>\n                    <a\n                        href=\"#\"\n                        className=\"acpt-btn acpt-btn-primary\"\n                        onClick={(e) => {\n                            e.preventDefault();\n                            handleDeleteAll();\n                        }}\n                    >\n                        Yes\n                    </a>\n                    &nbsp;\n                    <a\n                        href=\"#\"\n                        className=\"acpt-btn acpt-btn-primary-o\"\n                        onClick={(e) => {\n                            e.preventDefault();\n                            setModalVisible(!modalVisible);\n                        }}\n                    >\n                        No\n                    </a>\n                </p>\n            </Modal>\n            <button\n                onClick={(e) => {\n                    e.preventDefault();\n                    setModalVisible(true);\n                }}\n                type=\"submit\"\n                className=\"acpt-btn acpt-btn-danger\"\n            >\n                Delete all\n            </button>\n        </React.Fragment>\n    );\n\n    const buttons = (\n        <React.Fragment>\n            <button\n                onClick={ (e) => {\n                    e.preventDefault();\n                    dispatch(createBox(metaTypes.USER));\n                } }\n                className=\"acpt-btn acpt-btn-primary-o\"\n            >\n                Add meta box\n            </button>\n            {boxes.length > 0\n                ?\n                <React.Fragment>\n                    <button\n                        disabled={!isValid}\n                        onClick={(e) => {\n                            e.preventDefault();\n                            handleSubmit();\n                        }}\n                        type=\"submit\"\n                        className=\"acpt-btn acpt-btn-primary\"\n                    >\n                        Save\n                    </button>\n                    {renderDeleteButton}\n                </React.Fragment>\n                :\n                <React.Fragment>\n                    {fetched.length > 0 && renderDeleteButton}\n                </React.Fragment>\n            }\n        </React.Fragment>\n    );\n\n    return (\n        <Layout>\n            <ActionsBar\n                title=\"User meta boxes\"\n                actions={buttons}\n            />\n            <main>\n                <Breadcrumbs crumbs={[\n                    {\n                        label: \"Registered Custom Post Types\",\n                        link: \"/\"\n                    },\n                    {\n                        label: \"Manage User Meta\"\n                    }\n                ]} />\n                {Prompt}\n                <Meta\n                    belongsTo={metaTypes.USER}\n                    boxes={boxes}\n                    fields={fields}\n                    onSortEnd={onSortEnd}\n                    values={values}\n                />\n            </main>\n        </Layout>\n    );\n};\n\nexport default UserMeta;\n\n\n\n// import React, {useEffect, useRef} from 'react';\n// import Breadcrumbs from \"../../reusable/Breadcrumbs\";\n// import {useHistory, useParams} from \"react-router-dom\";\n// import {useDispatch, useSelector} from \"react-redux\";\n// import useUnsavedChangesWarning from \"../../../hooks/useUnsavedChangesWarning\";\n// import {changeCurrentAdminMenuLink, metaTitle} from \"../../../utils/misc\";\n// import {arrayMove} from \"react-sortable-hoc\";\n// import {toast} from \"react-toastify\";\n// import Spinner from \"../../reusable/Loader/Spinner\";\n// import {fetchUserMeta} from \"../../../redux/thunks/fetchUserMeta\";\n// import {createUserMetaBox, setUserMetaBoxes, setUserMetaStatusSaved} from \"../../../redux/actions/userMetaStateActions\";\n// import {deleteAllUserMeta} from \"../../../redux/thunks/deleteAllUserMeta\";\n// import {Icon} from \"@iconify/react\";\n// import {SortableList} from \"../../reusable/Sortable\";\n// import {userMetaSubmit} from \"../../../redux/thunks/userMetaSubmit\";\n//\n// const UserMeta = () => {\n//\n//     // manage global state\n//     const { postType } = useParams();\n//     const dispatch = useDispatch();\n//     const {boxes, values, isSaved, isValid, loading: saveLoading, errors: saveErrors, success} = useSelector(state => state.userMetaStateReducer);\n//     const {loading, fetched} = useSelector(state => state.fetchUserMetaReducer);\n//\n//     // manage local state\n//     const didMountRef = useRef(false);\n//     const [Prompt, setDirty, setPristine] = useUnsavedChangesWarning();\n//\n//     // manage redirect\n//     const history = useHistory();\n//\n//     // set page meta title\n//     useEffect(() => {\n//         metaTitle(`ACPT - User meta${isSaved ? '' : '*'}`);\n//         changeCurrentAdminMenuLink('#/user-meta');\n//         if(!isSaved){ setDirty(); }\n//     }, [isSaved]);\n//\n//     // fetching data and\n//     // populate the UI\n//     useEffect(() => {\n//         dispatch(fetchUserMeta());\n//     }, [saveLoading]);\n//\n//     // sortable\n//     const onSortEnd = ({oldIndex, newIndex}) => {\n//         dispatch(setUserMetaBoxes(arrayMove(boxes, oldIndex, newIndex)));\n//     };\n//\n//     // handle data submit\n//     const handleSubmit = () => {\n//         dispatch(userMetaSubmit(values));\n//         dispatch(setUserMetaStatusSaved());\n//         setPristine();\n//     };\n//\n//     const handleDeleteAll = () => {\n//         dispatch(deleteAllUserMeta());\n//         dispatch(setUserMetaStatusSaved());\n//         setPristine();\n//     };\n//\n//     // handle form submission outcome\n//     useEffect(() => {\n//         if (didMountRef.current){\n//             if(!saveLoading){\n//                 if(success){\n//                     setPristine();\n//                     toast.success(\"User meta successfully saved\");\n//                 }\n//\n//                 if(saveErrors.length > 0){\n//                     saveErrors.map((error) => {\n//                         toast.error(error);\n//                     });\n//                 }\n//             }\n//         } else {\n//             didMountRef.current = true;\n//         }\n//     }, [saveLoading]);\n//\n//     if(loading){\n//         return <Spinner />;\n//     }\n//\n//     return (\n//         <div>\n//             <Breadcrumbs crumbs={[\n//                 {\n//                     label: \"Registered Custom Post Types\",\n//                     link: \"/\"\n//                 },\n//                 {\n//                     label: \"Manage User Meta\"\n//                 }\n//             ]} />\n//             {Prompt}\n//             <h1 className=\"acpt-title vertical-center\">\n//                 <Icon icon=\"bx:bx-user\" color=\"#02c39a\" width=\"18px\"/>\n//                 &nbsp;\n//                 User meta boxes\n//             </h1>\n//             <div className=\"acpt-buttons\">\n//                 <a\n//                     href=\"#\"\n//                     onClick={ (e) => {\n//                         e.preventDefault();\n//                         dispatch(createUserMetaBox());\n//                     } }\n//                     className=\"acpt-btn acpt-btn-primary-o\"\n//                 >\n//                     <Icon icon=\"bx:bx-plus-circle\" width=\"18px\"/>\n//                     &nbsp;\n//                     Add meta box\n//                 </a>\n//             </div>\n//             {boxes.length > 0\n//                 ? (\n//                     <React.Fragment>\n//                         <SortableList\n//                             items={boxes}\n//                             onSortEnd={onSortEnd}\n//                             useDragHandle\n//                             lockAxis=\"y\"\n//                             helperClass=\"dragging-helper-class\"\n//                             disableAutoscroll={false}\n//                             useWindowAsScrollContainer={true}\n//                         />\n//                         <div className=\"acpt-buttons\">\n//                             <a\n//                                 href=\"#\"\n//                                 onClick={ (e) => {\n//                                     e.preventDefault();\n//                                     dispatch(createUserMetaBox());\n//                                 } }\n//                                 className=\"acpt-btn acpt-btn-primary-o\"\n//                             >\n//                                 <Icon icon=\"bx:bx-plus-circle\" width=\"18px\"/>\n//                                 &nbsp;\n//                                 Add meta box\n//                             </a>\n//                         </div>\n//                         <div className=\"acpt-card__footer\">\n//                             <div className=\"acpt-card__inner\">\n//                                 <button\n//                                     disabled={!isValid}\n//                                     onClick={(e) => {\n//                                         e.preventDefault();\n//                                         handleSubmit();\n//                                     }}\n//                                     type=\"submit\"\n//                                     className=\"acpt-btn acpt-btn-primary submit\"\n//                                 >\n//                                     <Icon icon=\"bx:bx-save\" width=\"18px\"/>\n//                                     &nbsp;\n//                                     Save\n//                                 </button>\n//                                 &nbsp;\n//                                 <button\n//                                     onClick={(e) => {\n//                                         e.preventDefault();\n//                                         handleDeleteAll();\n//                                     }}\n//                                     type=\"submit\"\n//                                     className=\"acpt-btn acpt-btn-danger submit\"\n//                                 >\n//                                     <Icon icon=\"bx:bx-trash\" width=\"18px\"/>\n//                                     &nbsp;\n//                                     Delete all\n//                                 </button>\n//                             </div>\n//                         </div>\n//                     </React.Fragment>\n//                 )\n//                 : (\n//                     <React.Fragment>\n//                         <div className=\"\">\n//                             No meta box already created. Create the first one now by clicking the button \"Add meta box\"!\n//                         </div>\n//                         {fetched.length > 0 && (\n//                             <button\n//                                 onClick={(e) => {\n//                                     e.preventDefault();\n//                                     handleDeleteAll();\n//                                 }}\n//                                 type=\"submit\"\n//                                 className=\"acpt-btn acpt-btn-danger submit\"\n//                             >\n//                                 <Icon icon=\"bx:bx-trash\" width=\"18px\"/>\n//                                 &nbsp;\n//                                 Delete all\n//                             </button>\n//                         )}\n//                     </React.Fragment>\n//                 )\n//             }\n//         </div>\n//     );\n// };\n//\n// export default UserMeta;"],"sourceRoot":""}