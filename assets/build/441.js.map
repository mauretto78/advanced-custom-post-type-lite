{"version":3,"sources":["webpack://advanced-custom-post-type-lite/./assets/src/App/components/pages/UserMeta/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/redux/thunks/deleteAllUserMeta.js","webpack://advanced-custom-post-type-lite/./assets/src/App/redux/thunks/fetchUserMeta.js","webpack://advanced-custom-post-type-lite/./assets/src/App/redux/thunks/userMetaSubmit.js"],"names":["UserMeta","postType","dispatch","state","userMetaStateReducer","boxes","values","isSaved","isValid","saveLoading","loading","saveErrors","errors","success","fetchUserMetaReducer","fetched","didMountRef","Prompt","setDirty","setPristine","history","onSortEnd","oldIndex","newIndex","handleSubmit","handleDeleteAll","current","toast","length","map","error","label","link","e","preventDefault","deleteAllUserMeta","getState","res","console","log","fetchUserMeta","userMetaSubmit","data"],"mappings":"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","file":"441.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport Breadcrumbs from \"../../reusable/Breadcrumbs\";\nimport {useHistory, useParams} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport useUnsavedChangesWarning from \"../../../hooks/useUnsavedChangesWarning\";\nimport {changeCurrentAdminMenuLink, metaTitle} from \"../../../utils/misc\";\nimport {arrayMove} from \"react-sortable-hoc\";\nimport {toast} from \"react-toastify\";\nimport Spinner from \"../../reusable/Loader/Spinner\";\nimport {fetchUserMeta} from \"../../../redux/thunks/fetchUserMeta\";\nimport {createUserMetaBox, setUserMetaBoxes, setUserMetaStatusSaved} from \"../../../redux/actions/userMetaStateActions\";\nimport {deleteAllUserMeta} from \"../../../redux/thunks/deleteAllUserMeta\";\nimport {Icon} from \"@iconify/react\";\nimport {SortableList} from \"../../reusable/Sortable\";\nimport {userMetaSubmit} from \"../../../redux/thunks/userMetaSubmit\";\n\nconst UserMeta = () => {\n\n    // manage global state\n    const { postType } = useParams();\n    const dispatch = useDispatch();\n    const {boxes, values, isSaved, isValid, loading: saveLoading, errors: saveErrors, success} = useSelector(state => state.userMetaStateReducer);\n    const {loading, fetched} = useSelector(state => state.fetchUserMetaReducer);\n\n    // manage local state\n    const didMountRef = useRef(false);\n    const [Prompt, setDirty, setPristine] = useUnsavedChangesWarning();\n\n    // manage redirect\n    const history = useHistory();\n\n    // set page meta title\n    useEffect(() => {\n        metaTitle(`ACPT - User meta${isSaved ? '' : '*'}`);\n        changeCurrentAdminMenuLink('#/user-meta');\n        if(!isSaved){ setDirty(); }\n    }, [isSaved]);\n\n    // fetching data and\n    // populate the UI\n    useEffect(() => {\n        dispatch(fetchUserMeta());\n    }, [saveLoading]);\n\n    // sortable\n    const onSortEnd = ({oldIndex, newIndex}) => {\n        dispatch(setUserMetaBoxes(arrayMove(boxes, oldIndex, newIndex)));\n    };\n\n    // handle data submit\n    const handleSubmit = () => {\n        dispatch(userMetaSubmit(values));\n        dispatch(setUserMetaStatusSaved());\n        setPristine();\n    };\n\n    const handleDeleteAll = () => {\n        dispatch(deleteAllUserMeta());\n        dispatch(setUserMetaStatusSaved());\n        setPristine();\n    };\n\n    // handle form submission outcome\n    useEffect(() => {\n        if (didMountRef.current){\n            if(!saveLoading){\n                if(success){\n                    setPristine();\n                    toast.success(\"User meta successfully saved\");\n                }\n\n                if(saveErrors.length > 0){\n                    saveErrors.map((error) => {\n                        toast.error(error);\n                    });\n                }\n            }\n        } else {\n            didMountRef.current = true;\n        }\n    }, [saveLoading]);\n\n    if(loading){\n        return <Spinner />;\n    }\n\n    return (\n        <div>\n            <Breadcrumbs crumbs={[\n                {\n                    label: \"Registered Custom Post Types\",\n                    link: \"/\"\n                },\n                {\n                    label: \"Manage User Meta\"\n                }\n            ]} />\n            {Prompt}\n            <h1 className=\"acpt-title vertical-center\">\n                <Icon icon=\"bx:bx-user\" color=\"#02c39a\" width=\"24px\"/>\n                &nbsp;\n                User meta boxes\n            </h1>\n            <div className=\"acpt-buttons\">\n                <a\n                    href=\"#\"\n                    onClick={ (e) => {\n                        e.preventDefault();\n                        dispatch(createUserMetaBox());\n                    } }\n                    className=\"acpt-btn acpt-btn-primary-o\"\n                >\n                    <Icon icon=\"bx:bx-plus-circle\" width=\"24px\"/>\n                    &nbsp;\n                    Add meta box\n                </a>\n            </div>\n            {boxes.length > 0\n                ? (\n                    <React.Fragment>\n                        <SortableList\n                            items={boxes}\n                            onSortEnd={onSortEnd}\n                            useDragHandle\n                            lockAxis=\"y\"\n                            helperClass=\"dragging-helper-class\"\n                            disableAutoscroll={false}\n                            useWindowAsScrollContainer={true}\n                        />\n                        <div className=\"acpt-buttons\">\n                            <a\n                                href=\"#\"\n                                onClick={ (e) => {\n                                    e.preventDefault();\n                                    dispatch(createUserMetaBox());\n                                } }\n                                className=\"acpt-btn acpt-btn-primary-o\"\n                            >\n                                <Icon icon=\"bx:bx-plus-circle\" width=\"24px\"/>\n                                &nbsp;\n                                Add meta box\n                            </a>\n                        </div>\n                        <div className=\"acpt-card__footer\">\n                            <div className=\"acpt-card__inner\">\n                                <button\n                                    disabled={!isValid}\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        handleSubmit();\n                                    }}\n                                    type=\"submit\"\n                                    className=\"acpt-btn acpt-btn-primary submit\"\n                                >\n                                    <Icon icon=\"bx:bx-save\" width=\"24px\"/>\n                                    &nbsp;\n                                    Save\n                                </button>\n                                &nbsp;\n                                <button\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        handleDeleteAll();\n                                    }}\n                                    type=\"submit\"\n                                    className=\"acpt-btn acpt-btn-danger submit\"\n                                >\n                                    <Icon icon=\"bx:bx-trash\" width=\"24px\"/>\n                                    &nbsp;\n                                    Delete all\n                                </button>\n                            </div>\n                        </div>\n                    </React.Fragment>\n                )\n                : (\n                    <React.Fragment>\n                        <div className=\"\">\n                            No meta box already created. Create the first one now by clicking the button \"Add meta box\"!\n                        </div>\n                        {fetched.length > 0 && (\n                            <button\n                                onClick={(e) => {\n                                    e.preventDefault();\n                                    handleDeleteAll();\n                                }}\n                                type=\"submit\"\n                                className=\"acpt-btn acpt-btn-danger submit\"\n                            >\n                                <Icon icon=\"bx:bx-trash\" width=\"24px\"/>\n                                &nbsp;\n                                Delete all\n                            </button>\n                        )}\n                    </React.Fragment>\n                )\n            }\n        </div>\n    );\n};\n\nexport default UserMeta;","import {wpAjaxRequest} from \"../../utils/ajax\";\nimport {deleteAllUserMetaFailure, deleteAllUserMetaInProgress, deleteAllUserMetaSuccess} from \"../actions/userMetaStateActions\";\n\nexport const deleteAllUserMeta = () => async (dispatch, getState) => {\n    try {\n        dispatch(deleteAllUserMetaInProgress());\n        const res = await wpAjaxRequest(\"deleteUserMetaAction\", {});\n        (res.success === true) ? dispatch(deleteAllUserMetaSuccess()) : dispatch(deleteAllUserMetaFailure(res.error)) ;\n    } catch (e) {\n        console.log(e);\n        dispatch(deleteAllUserMetaFailure(e));\n    }\n};","import {wpAjaxRequest} from \"../../utils/ajax\";\nimport {fetchUserMetaFailure, fetchUserMetaInProgress, fetchUserMetaSuccess} from \"../actions/fetchUserMetaActions\";\nimport {hydrateUserMetaValues} from \"../actions/userMetaStateActions\";\n\nexport const fetchUserMeta = () => async (dispatch, getState) => {\n    try {\n        dispatch(fetchUserMetaInProgress());\n        const fetched = await wpAjaxRequest('fetchUserMetaAction', {});\n        dispatch(fetchUserMetaSuccess(fetched));\n        dispatch(hydrateUserMetaValues(fetched));\n    } catch ( e ) {\n        dispatch(fetchUserMetaFailure(e));\n    }\n};","import {wpAjaxRequest} from \"../../utils/ajax\";\nimport {submitUserMetaFailure, submitUserMetaInProgress, submitUserMetaSuccess} from \"../actions/userMetaStateActions\";\n\nexport const userMetaSubmit = (data) => async (dispatch, getState) => {\n    try {\n        dispatch(submitUserMetaInProgress());\n        const res = await wpAjaxRequest(\"saveUserMetaAction\", data);\n        (res.success === true) ? dispatch(submitUserMetaSuccess()) : dispatch(submitUserMetaFailure(res.error)) ;\n    } catch (e) {\n        console.log(e);\n        dispatch(submitUserMetaFailure(e));\n    }\n};"],"sourceRoot":""}