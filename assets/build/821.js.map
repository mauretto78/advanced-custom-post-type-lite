{"version":3,"sources":["webpack://advanced-custom-post-type-lite/./assets/src/App/components/Card/CardRow.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/Card/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/Forms/Input.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/Forms/ReactSelect.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/Forms/Select.js","webpack://advanced-custom-post-type-lite/./assets/src/App/components/Forms/Toggle.js","webpack://advanced-custom-post-type-lite/./assets/src/App/constants/fonts.js","webpack://advanced-custom-post-type-lite/./assets/src/App/pages/Settings/index.js","webpack://advanced-custom-post-type-lite/./assets/src/App/utils/validation.js"],"names":["CardRow","label","value","wizard","__html","propTypes","PropTypes","string","isRequired","element","Card","title","style","actions","children","documentGlobals","document","globals","is_rtl","Input","innerRef","type","size","placeholder","id","defaultValue","description","step","min","max","readOnly","onClick","onChangeCapture","validate","register","errors","disabled","error","message","oneOf","func","bool","number","array","ReactSelect","control","values","isMulti","externalOnChange","onChange","field","onBlur","name","ref","fieldState","invalid","isTouched","isDirty","formState","reactSelectStyles","arrayOf","object","Select","muted","renderSelectElement","map","renderOption","option","options","originalLabel","length","Toggle","fontList","Settings","state","saveSettings","saveError","saveSuccess","success","saveLoading","loading","dispatch","isFormSubmitted","setFormSubmitted","settings","fetched","enableCacheDefaultValue","parseInt","deletePostsDefaultValue","deleteMetadataDefaultValue","deleteDefinitionsDefaultValue","perPageDefaultValue","languageDefaultValue","available_languages","fontDefaultValue","mode","defaultValues","enable_cache","delete_metadata","delete_posts","delete_tables_when_deactivate","records_per_page","language","font","handleSubmit","isValid","onSubmit","data","toast","handleFlushCache","then","res","catch","console","err","buttons","styleVariants","PRIMARY","required","SECONDARY","e","preventDefault","alphanumericallyValid","matches","match","isPostTypeNameValid","post_name","asyncIsPostTypeNameValid","postType","exists","isTaxonomySlugValid","slug","asyncIsTaxonomySlugValid","isAValidValueForThisType","fieldTypes","COLOR","validColor","CURRENCY","validCurrency","DATE","validDate","EMAIL","validEmail","WEIGHT","LENGTH","NUMBER","validNumber","PHONE","validPhone","CHECKBOX","RADIO","SELECT","SELECT_MULTI","validSelect","TOGGLE","validToggle","URL","validURL","str","re","test","pattern","RegExp","forEach","o","validWPGraphQLName","validateGoogleMapsApiKey","key","regx"],"mappings":"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","file":"821.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CardRow = ({label, value, wizard}) => {\n\n    return (\n        <div className=\"acpt-card-row\">\n            <span className=\"label\">\n                <span>{label}</span>\n                {wizard && (\n                    <div\n                        className=\"wizard\"\n                        dangerouslySetInnerHTML={{__html: wizard}}\n                    />\n                )}\n            </span>\n            <span className=\"value\">\n                {value}\n            </span>\n        </div>\n    );\n};\n\nCardRow.propTypes = {\n    label: PropTypes.string.isRequired,\n    value: PropTypes.element.isRequired,\n    wizard: PropTypes.string,\n};\n\nexport default CardRow;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Card = ({title, style = 'with-shadow', actions, children}) => {\n\n    const documentGlobals = document.globals;\n    const globals = documentGlobals.globals;\n\n    return (\n        <div className={`acpt-card ${globals.is_rtl === true ? `rtl` : ``} ${style}`}>\n            {title && (\n                <div className=\"acpt-card-header\">\n                    <h3>{title}</h3>\n                    {actions && (\n                        <div className=\"actions\">\n                            {actions}\n                        </div>\n                    )}\n                </div>\n            )}\n            <div className=\"acpt-card-body\">\n                <div className=\"responsive\">\n                    {children}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nCard.propTypes = {\n    title: PropTypes.string,\n    style: PropTypes.string,\n    actions: PropTypes.element,\n};\n\nexport default Card;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {get} from 'react-hook-form';\n\nconst Input = ({innerRef, type = 'text', size= 'default', placeholder, id, defaultValue, description, step, min, max, readOnly, onClick, onChangeCapture, validate, register, errors, disabled = false}) => {\n\n    const error = get(errors, id);\n\n    return (\n        <React.Fragment>\n            <input\n                ref={innerRef}\n                id={id}\n                data-cy={`input-${id}`}\n                name={id}\n                type={type}\n                disabled={disabled}\n                min={min ? min : 0}\n                max={max}\n                step={step ? min : 1}\n                defaultValue={defaultValue}\n                placeholder={placeholder}\n                onChangeCapture={onChangeCapture}\n                onClick={onClick}\n                readOnly={readOnly}\n                aria-invalid={error ? \"true\" : \"false\"}\n                className={`form-control ${size} ${error ? 'has-errors': ''}`}\n                {...register(id, validate)}\n            />\n            {error && <div data-cy={`input-error-${id}`} className=\"invalid-feedback\">{error.message}</div>}\n            {description && (\n                <div className=\"form-description\">{description}</div>\n            )}\n        </React.Fragment>\n    );\n};\n\nInput.propTypes = {\n    id: PropTypes.string.isRequired,\n    size: PropTypes.oneOf([\n        'default',\n        'sm',\n    ]),\n    innerRef: PropTypes.func,\n    placeholder: PropTypes.string,\n    defaultValue: PropTypes.string,\n    description: PropTypes.string,\n    readOnly: PropTypes.bool,\n    min: PropTypes.number,\n    max: PropTypes.number,\n    step: PropTypes.number,\n    onChangeCapture: PropTypes.func,\n    validate: PropTypes.func,\n    register: PropTypes.func.isRequired,\n    errors: PropTypes.array.isRequired,\n    disabled: PropTypes.bool,\n    type: PropTypes.oneOf([\n        'text',\n        'email',\n        'number',\n        'tel',\n        'url',\n        'date',\n        'time',\n    ]),\n\n};\n\nexport default Input;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Controller} from \"react-hook-form\";\nimport Select from \"react-select\";\nimport useTranslation from \"../../hooks/useTranslation\";\nimport {reactSelectStyles} from \"../../constants/styles\";\n\nconst ReactSelect = ({id, validate, control, values, defaultValue, description, disabled, isMulti=false, placeholder, onChange: externalOnChange}) => {\n\n    return (\n        <React.Fragment>\n            <Controller\n                id={id}\n                control={control}\n                name={id}\n                rules={validate}\n                defaultValue={defaultValue}\n                render={(\n                    {\n                        field: { onChange, onBlur, value, name, ref },\n                        fieldState: { invalid, isTouched, isDirty, error },\n                        formState,\n                    }\n                ) => (\n                    <div>\n                        <Select\n                            placeholder={placeholder ? placeholder : useTranslation(\"Select\")}\n                            isDisabled={disabled}\n                            isMulti={isMulti}\n                            defaultValue={defaultValue}\n                            styles={reactSelectStyles}\n                            classNamePrefix=\"addl-class\"\n                            onBlur={onBlur}\n                            onChange={(value)=> {\n                                onChange(value);\n                                if(externalOnChange){\n                                    externalOnChange(value);\n                                }\n                            }}\n                            checked={value}\n                            inputRef={ref}\n                            options={values}\n                        />\n                        {error && <div className=\"invalid-feedback\">{error.message}</div>}\n                    </div>\n                )}\n            />\n            {description && (\n                <div className=\"form-description\">{description}</div>\n            )}\n        </React.Fragment>\n    );\n};\n\nReactSelect.propTypes = {\n    id: PropTypes.string.isRequired,\n    isMulti: PropTypes.bool,\n    description: PropTypes.string,\n    placeholder: PropTypes.string,\n    defaultValue: PropTypes.string,\n    disabled: PropTypes.bool,\n    values: PropTypes.arrayOf(PropTypes.object).isRequired,\n    validate: PropTypes.func,\n    onChange: PropTypes.func,\n    control: PropTypes.func.isRequired,\n};\n\nexport default ReactSelect;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {get} from 'react-hook-form';\n\nconst Select = ({size= 'default', placeholder, id, defaultValue, description, values, onChangeCapture, validate, register, errors, disabled, muted}) => {\n\n    const error = get(errors, id);\n\n    /**\n     *\n     * @param value\n     * @return {*}\n     */\n    const renderSelectElement = (value = null) => {\n        return (\n            <React.Fragment>\n                <div className={`${!muted ? 'acpt-select' : ''}`}>\n                    <select\n                        id={id}\n                        name={id}\n                        data-cy={`select-${id}`}\n                        defaultValue={value}\n                        placeholder={placeholder}\n                        onChangeCapture={onChangeCapture}\n                        disabled={disabled}\n                        aria-invalid={error ? \"true\" : \"false\"}\n                        className={muted ? 'muted' :`form-control ${size} ${error ? 'has-errors': ''}`}\n                        {...register(id, validate)}\n                    >\n                        {values.map((value) => {\n\n                            const renderOption = (option) => {\n\n                                if(option.value === null){\n                                    return (\n                                        <option value=\"\">{option.label}</option>\n                                    )\n                                }\n\n                                return (\n                                    <option value={option.value}>{option.label}</option>\n                                )\n                            };\n\n                            if(value.options){\n                                return (\n                                    <optgroup label={value.label} data-original={value.originalLabel ? value.originalLabel : value.label}>\n                                        {value.options.map((option)=> renderOption(option))}\n                                    </optgroup>\n                                );\n                            } else {\n                                return renderOption(value);\n                            }\n                        })}\n                    </select>\n                </div>\n                {error && <div data-cy={`select-error-${id}`} className=\"invalid-feedback\">{error.message}</div>}\n                {description && (\n                    <div className=\"form-description\">{description}</div>\n                )}\n            </React.Fragment>\n        );\n    };\n\n    // Force re-rendering when injecting the defaultValue\n    if(defaultValue && values.length > 0){\n        return (\n            <div className=\"acpt-select-wrapper-with-values\" data-current-value={defaultValue}>\n                {renderSelectElement(defaultValue)}\n            </div>\n        );\n    }\n\n    return renderSelectElement();\n};\n\nSelect.propTypes = {\n    id: PropTypes.string.isRequired,\n    size: PropTypes.oneOf([\n        'default',\n        'sm',\n    ]),\n    placeholder: PropTypes.string,\n    defaultValue: PropTypes.string,\n    description: PropTypes.string,\n    isMulti: PropTypes.bool,\n    disabled: PropTypes.bool,\n    muted: PropTypes.bool,\n    values: PropTypes.array.isRequired,\n    validate: PropTypes.func,\n    register: PropTypes.func.isRequired,\n    errors: PropTypes.array.isRequired,\n};\n\nexport default Select;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {get} from 'react-hook-form';\n\nconst Toggle = ({id, defaultValue = 0, description, validate, register, errors}) => {\n\n    const error = get(errors, id);\n\n    return (\n        <div className=\"toggle-group\">\n            <label\n                data-cy={`toggle-${id}`}\n                className=\"toggle\"\n            >\n                <input\n                    id={id}\n                    name={id}\n                    type=\"checkbox\"\n                    data-cy={`toggle-checkbox-${id}`}\n                    defaultChecked={defaultValue}\n                    {...register(id, validate)}\n                />\n                <span className=\"slider round\"/>\n            </label>\n            {description && (\n                <span className=\"form-description\">{description}</span>\n            )}\n            {error && <div className=\"invalid-feedback\">{error.message}</div>}\n        </div>\n    );\n};\n\nToggle.propTypes = {\n    id: PropTypes.string.isRequired,\n    defaultValue: PropTypes.bool,\n    description: PropTypes.string,\n    validate: PropTypes.func,\n    register: PropTypes.func.isRequired,\n    errors: PropTypes.array.isRequired,\n};\n\nexport default Toggle;","\nexport const fontList = [\n    {label: \"Default\", value: \"Default\"},\n    {label: \"Inter\", value: \"Inter\"},\n    {label: \"Lato\", value: \"Lato\"},\n    {label: \"Open Sans\", value: \"Open Sans\"},\n    {label: \"Poppins\", value: \"Poppins\"},\n    {label: \"Roboto\", value: \"Roboto\"},\n    {label: \"Ubuntu\", value: \"Ubuntu\"},\n];","import React, {useEffect, useState} from 'react';\nimport Layout from \"../../layout/Layout\";\nimport useTranslation from \"../../hooks/useTranslation\";\nimport Button from \"../../components/Button\";\nimport {styleVariants} from \"../../constants/styles\";\nimport Card from \"../../components/Card\";\nimport CardRow from \"../../components/Card/CardRow\";\nimport {useForm} from \"react-hook-form\";\nimport Input from \"../../components/Forms/Input\";\nimport ReactSelect from \"../../components/Forms/ReactSelect\";\nimport {filterByLabel, filterByValue} from \"../../utils/objects\";\nimport {changeCurrentAdminMenuLink, metaTitle, refreshPage} from \"../../utils/misc\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {saveSettings} from \"../../redux/reducers/saveSettingsSlice\";\nimport {toast} from \"react-hot-toast\";\nimport Toggle from \"../../components/Forms/Toggle\";\nimport {validateGoogleMapsApiKey} from \"../../utils/validation\";\nimport {wpAjaxRequest} from \"../../utils/ajax\";\nimport Select from \"../../components/Forms/Select\";\nimport {fontList} from \"../../constants/fonts\";\n\nconst Settings = () => {\n\n    // manage global state\n    const {error: saveError, success: saveSuccess, loading: saveLoading} = useSelector(state => state.saveSettings);\n    const dispatch = useDispatch();\n\n    // manage local state\n    const [isFormSubmitted, setFormSubmitted] = useState(false);\n\n    useEffect(() => {\n        metaTitle(useTranslation(\"Settings page\"));\n        changeCurrentAdminMenuLink('#/settings');\n    }, []);\n\n    const settings = document.globals;\n    const fetched = settings.settings;\n\n    const enableCacheDefaultValue = (fetched.length > 0 && typeof filterByLabel(fetched, 'key', 'enable_cache') !== 'undefined') ? parseInt(filterByLabel(fetched, 'key', 'enable_cache').value) : 1;\n    const deletePostsDefaultValue = (fetched.length > 0 && typeof filterByLabel(fetched, 'key', 'delete_posts') !== 'undefined') ? parseInt(filterByLabel(fetched, 'key', 'delete_posts').value) : 0;\n    const deleteMetadataDefaultValue = (fetched.length > 0 && typeof filterByLabel(fetched, 'key', 'delete_metadata') !== 'undefined') ? parseInt(filterByLabel(fetched, 'key', 'delete_metadata').value) : 0;\n    const deleteDefinitionsDefaultValue = (fetched.length > 0 && typeof filterByLabel(fetched, 'key', 'delete_tables_when_deactivate') !== 'undefined') ? parseInt(filterByLabel(fetched, 'key', 'delete_tables_when_deactivate').value) : 0;\n    const perPageDefaultValue = (fetched.length > 0 && filterByLabel(fetched, 'key', 'records_per_page') !== '') ? filterByLabel(fetched, 'key', 'records_per_page').value : 20;\n    const languageDefaultValue = (fetched.length > 0 && typeof filterByLabel(fetched, 'key', 'language').value !== 'undefined') ? filterByValue(settings.globals.available_languages, filterByLabel(fetched, 'key', 'language').value).value : 'en_US';\n    const fontDefaultValue = (fetched.length > 0 && typeof filterByLabel(fetched, 'key', 'font').value !== 'undefined') ? filterByValue(fontList, filterByLabel(fetched, 'key', 'font').value).value : 'Inter';\n\n    const { register, handleSubmit, formState: {errors, isValid} } = useForm({\n        mode: 'all',\n        defaultValues: {\n            enable_cache: enableCacheDefaultValue,\n            delete_metadata: deleteMetadataDefaultValue,\n            delete_posts: deletePostsDefaultValue,\n            delete_tables_when_deactivate: deleteDefinitionsDefaultValue,\n            records_per_page: perPageDefaultValue,\n            language: languageDefaultValue,\n            font: fontDefaultValue,\n        }\n    });\n\n    const onSubmit = (data) => {\n        dispatch(saveSettings({\n            records_per_page: data.records_per_page,\n            enable_cache: data.enable_cache ? 1 : 0,\n            delete_tables_when_deactivate: data.delete_tables_when_deactivate ? 1 : 0,\n            delete_posts: data.delete_posts ? 1 : 0,\n            delete_metadata: data.delete_metadata ? 1 : 0,\n            language: data.language ? data.language : null,\n            font: data.font ? data.font : null\n        }));\n        setFormSubmitted(true);\n    };\n\n    useEffect(()=>{\n        if(isFormSubmitted && saveSuccess){\n            toast.success(useTranslation(\"Settings saved. The browser will refresh after 5 seconds.\"));\n            refreshPage(5000);\n        }\n\n        if(isFormSubmitted && saveError !== null){\n            toast.error(saveError);\n        }\n\n        if(isFormSubmitted){\n            setFormSubmitted(false);\n        }\n    }, [saveLoading]);\n\n    const handleFlushCache = () => {\n        wpAjaxRequest(\"flushCacheAction\", {})\n            .then(res => {\n                if(res.success === true){\n                    toast.success(useTranslation(\"Cache was successfully flushed\"));\n                } else {\n                    toast.error(res.error);\n                }\n            })\n            .catch(err => console.error(err))\n        ;\n    };\n\n    const buttons = [\n        <Button\n            testId=\"save-settings\"\n            style={styleVariants.PRIMARY}\n            disabled={!!(!isValid || saveLoading)}\n        >\n            {saveLoading ? useTranslation('Loading...') : useTranslation('Save')}\n        </Button>\n    ];\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <Layout\n                crumbs={[\n                    {\n                        label: useTranslation(\"Settings\")\n                    }\n                ]}\n                title={useTranslation(\"Settings\")}\n                actions={buttons}\n            >\n                <div className=\"flex-column s-24\">\n                    <Card title={useTranslation(\"General settings\")}>\n                        <CardRow\n                            label={useTranslation(\"Language\")}\n                            value={\n                                <Select\n                                    id=\"language\"\n                                    label={useTranslation(\"Language\")}\n                                    placeholder={useTranslation(\"Set the language of the plug-in\")}\n                                    description={useTranslation(\"Set the language of the plug-in\")}\n                                    register={register}\n                                    defaultValue={languageDefaultValue}\n                                    values={settings.globals.available_languages}\n                                    isRequired={true}\n                                    errors={errors}\n                                    validate={{\n                                        required: \"This field is mandatory\"\n                                    }}\n                                />\n                            }\n                        />\n                        <CardRow\n                            label={useTranslation(\"Font\")}\n                            value={\n                                <Select\n                                    id=\"font\"\n                                    label={useTranslation(\"Font\")}\n                                    placeholder={useTranslation(\"Set the font of the plug-in\")}\n                                    description={useTranslation(\"Set the font of the plug-in\")}\n                                    register={register}\n                                    defaultValue={languageDefaultValue}\n                                    values={fontList}\n                                    isRequired={true}\n                                    errors={errors}\n                                    validate={{\n                                        required: \"This field is mandatory\"\n                                    }}\n                                />\n                            }\n                        />\n                        <CardRow\n                            label={useTranslation(\"Records per page\")}\n                            value={\n                                <Input\n                                    type=\"number\"\n                                    id=\"records_per_page\"\n                                    description={useTranslation(\"Set the number of records per page in your ACPT dashboards.\")}\n                                    register={register}\n                                    errors={errors}\n                                    isRequired={true}\n                                    min={1}\n                                    max={200}\n                                    validate={{\n                                        required: \"This field is mandatory\"\n                                    }}\n                                />\n                            }\n                        />\n                    </Card>\n                    <Card title={useTranslation(\"Performances\")}>\n                        <CardRow\n                            label={useTranslation(\"Enable ACPT cache\")}\n                            value={\n                                <Toggle\n                                    id=\"enable_cache\"\n                                    description={useTranslation(\"Enable the ACPT cache. The cache stores the MySQL results in simple textual files to avoid useless DB calls.\")}\n                                    register={register}\n                                    errors={errors}\n                                    defaultValue={enableCacheDefaultValue}\n                                />\n                            }\n                        />\n                        {enableCacheDefaultValue ? (\n                            <CardRow\n                                label={useTranslation(\"Flush the ACPT cache\")}\n                                value={\n                                    <Button\n                                        style={styleVariants.SECONDARY}\n                                        onClick={e => {\n                                            e.preventDefault();\n                                            handleFlushCache();\n                                        }}\n                                    >\n                                        {useTranslation(\"Flush cache\")}\n                                    </Button>\n                                }\n                            />\n                        ) : null}\n                    </Card>\n                    <Card title={useTranslation(\"Danger zone\")}>\n                        <CardRow\n                            label={useTranslation(\"Delete ACPT definitions when deactivate the plug-in\")}\n                            value={\n                                <Toggle\n                                    id=\"delete_tables_when_deactivate\"\n                                    description={useTranslation(\"Delete all saved ACPT definitions when you deactivate the plug-in. This means that if you select NO when you deactivate and then reactivate the plug-in you will find all the previously saved ACPT definitions (meta fields, options etc.)\")}\n                                    register={register}\n                                    errors={errors}\n                                    defaultValue={deleteDefinitionsDefaultValue}\n                                />\n                            }\n                        />\n                        <CardRow\n                            label={useTranslation(\"Delete posts when delete an ACPT post definition\")}\n                            value={\n                                <Toggle\n                                    id=\"delete_posts\"\n                                    description={useTranslation(\"   Delete posts when delete an ACPT post type definition. This means that if you select YES, when you delete an ACPT post type definition all the saved posts will be deleted\")}\n                                    register={register}\n                                    errors={errors}\n                                    defaultValue={deletePostsDefaultValue}\n                                />\n                            }\n                        />\n                        <CardRow\n                            label={useTranslation(\"Delete metadata when delete an ACPT field\")}\n                            value={\n                                <Toggle\n                                    id=\"delete_metadata\"\n                                    description={useTranslation(\"Delete post metadata when deleting an ACPT field. This means that if you select YES, when you delete an ACPT meta field all the saved metadata will be deleted\")}\n                                    register={register}\n                                    errors={errors}\n                                    defaultValue={deleteMetadataDefaultValue}\n                                />\n                            }\n                        />\n                    </Card>\n                </div>\n            </Layout>\n        </form>\n    );\n};\n\nexport default Settings;","/**\n * validate a value for a given field type\n *\n * @param type\n * @param value\n * @return {boolean}\n */\nimport {fieldTypes} from \"../constants/fields\";\nimport {wpAjaxRequest} from \"./ajax\";\nimport useTranslation from \"../hooks/useTranslation\";\n\nexport const alphanumericallyValid = (string) => {\n\n    const matches = string.match(/^[0-9a-zA-Z_-]+$/g);\n\n    if (matches === null) {\n        return 'Only alphanumeric characters allowed';\n    }\n\n    return true;\n};\n\n/**\n * Keys are used as internal identifiers. Lowercase alphanumeric characters, dashes, and underscores are allowed.\n * https://developer.wordpress.org/reference/functions/sanitize_key/\n *\n * @param post_name\n * @returns {boolean}\n */\nexport const isPostTypeNameValid = (post_name) => {\n\n    const size = post_name.length;\n\n    if (size > 20) {\n        return 'Max post type name lenght is 20';\n    }\n\n    const matches = post_name.match(/[a-z0-9_-]/g);\n\n    if (matches === null || size !== matches.length) {\n        return 'Allowed characters: [Lowercase alphanumeric characters, dashes, and underscores]';\n    }\n\n    return true;\n};\n\nexport const asyncIsPostTypeNameValid = async (post_name) => {\n\n    const size = post_name.length;\n\n    if (size > 20) {\n        return 'Max post type name lenght is 20';\n    }\n\n    const matches = post_name.match(/[a-z0-9_-]/g);\n\n    if (matches === null || size !== matches.length) {\n        return 'Allowed characters: [Lowercase alphanumeric characters, dashes, and underscores]';\n    }\n\n    // check if already exists\n    const res = await wpAjaxRequest(\"checkPostTypeNameAction\", {postType: post_name});\n\n    if(res.exists === true){\n        return post_name + ' post type already exists.';\n    }\n\n    return true;\n};\n\nexport const isTaxonomySlugValid = async (slug) => {\n\n    const size = slug.length;\n\n    if (size > 32) {\n        return 'Max post type name lenght is 32';\n    }\n\n    const matches = slug.match(/[a-z0-9_-]/g);\n\n    if (matches === null || size !== matches.length) {\n        return 'Allowed characters: [Lowercase alphanumeric characters, dashes, and underscores]';\n    }\n\n    return true;\n};\n\nexport const asyncIsTaxonomySlugValid = async (slug) => {\n\n    const size = slug.length;\n\n    if (size > 32) {\n        return 'Max post type name lenght is 32';\n    }\n\n    const matches = slug.match(/[a-z0-9_-]/g);\n\n    if (matches === null || size !== matches.length) {\n        return 'Allowed characters: [Lowercase alphanumeric characters, dashes, and underscores]';\n    }\n\n    // check if already exists\n    const res = await wpAjaxRequest(\"checkTaxonomySlugAction\", {slug: slug});\n\n    if (res.exists === true) {\n        return slug + ' taxonomy already exists.';\n    }\n\n    return true;\n};\n\nexport const isAValidValueForThisType = (type, value, options) => {\n\n    if(typeof value === 'undefined' || value === null || value === ''){\n        return true;\n    }\n\n    if(value.length > 50){\n        return false;\n    }\n\n    switch (type ) {\n        case fieldTypes.COLOR:\n            return validColor(value);\n\n        case fieldTypes.CURRENCY:\n            return validCurrency(value);\n\n        case fieldTypes.DATE:\n            return validDate(value);\n\n        case fieldTypes.EMAIL:\n            return validEmail(value);\n\n        case fieldTypes.WEIGHT:\n        case fieldTypes.LENGTH:\n        case fieldTypes.NUMBER:\n            return validNumber(value);\n\n        case fieldTypes.PHONE:\n            return validPhone(value);\n\n        case fieldTypes.CHECKBOX:\n        case fieldTypes.RADIO:\n        case fieldTypes.SELECT:\n        case fieldTypes.SELECT_MULTI:\n            return validSelect(value, options);\n\n        case fieldTypes.TOGGLE:\n            return validToggle(value);\n\n        case fieldTypes.URL:\n            return validURL(value);\n\n        default:\n            return true;\n    }\n};\n\n/**\n *\n * @param str\n * @return {boolean}\n */\nexport const validEmail = (str) => {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    return re.test(str);\n};\n\n/**\n *\n * @param str\n * @return {boolean}\n */\nexport const validURL = (str) => {\n    const pattern = new RegExp( '^(https?:\\\\/\\\\/)?' + // protocol\n        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n        '(\\\\#[-a-z\\\\d_]*)?$', 'i' ); // fragment locator\n\n    return !!pattern.test(str);\n};\n\n/**\n *\n * @param str\n * @return {boolean}\n */\nexport const validCurrency = (str) => {\n\n    const re = /^[0-9]{1,}.[0-9]{2}$/i;\n\n    return re.test(str);\n};\n\n/**\n *\n * @param str\n * @return {boolean}\n */\nexport const validNumber = (str) => {\n    const re = /^[0-9]{1,}$/i;\n\n    return re.test(str);\n};\n\n/**\n *\n * @param str\n * @return {boolean}\n */\nexport const validPhone = (str) => {\n    const re = /^\\+?([0-9]{2,3})\\)?[-. ]?([0-9-. ]{6,15})$/;\n\n    return re.test(str);\n};\n\n/**\n *\n * @param str\n * @return {boolean}\n */\nexport const validColor = (str) => {\n    const re = /^#[a-f0-9]{6}$/i;\n\n    return re.test(str);\n};\n\n/**\n *\n * @param str\n * @return {boolean}\n */\nexport const validDate = (str) => {\n    const re = /(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[13-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})/gi;\n\n    return re.test(str);\n};\n\n/**\n *\n * @param str\n * @return {boolean}\n */\nexport const validToggle = (str) => {\n    const re = /^[0-1]{1}$/i;\n\n    return re.test(str);\n};\n\n/**\n *\n * @param value\n * @param options\n * @return {boolean}\n */\nexport const validSelect = (value, options) => {\n\n    if(value === null || value === ''){\n        return true;\n    }\n\n    if(options == null || options.length === 0){\n        return false;\n    }\n\n    let matches = 0;\n\n    options.forEach((o) => {\n        if(o.value === value){\n            matches++;\n        }\n    });\n\n    return matches > 0;\n};\n\nexport const validWPGraphQLName = (name) => {\n\n    if (null === name.match(/^[a-z]/)) {\n        return \"The string needs to start with a letter.\";\n    }\n\n    if (null ===  name.match(/^[0-9a-zA-Z]+$/)) {\n        return \"The string needs to be alphanumeric (camelcase).\";\n    }\n};\n\n/**\n *\n * @param key\n * @return {string|boolean}\n */\nexport const validateGoogleMapsApiKey = (key) => {\n\n    if(typeof key === 'undefined' ||  key === null || key === '' || key.length === 0){\n        return  true;\n    }\n\n    if(key.length !== 39){\n        return useTranslation('Key length must be 39.');\n    }\n\n    const regx = new RegExp( \"^[A-Za-z0-9-_]+$\" );\n\n    if(!regx.test(key)){\n        return useTranslation('Not valid format.');\n    }\n\n    return true;\n};"],"sourceRoot":""}